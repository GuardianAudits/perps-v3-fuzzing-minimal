"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const contracts_1 = require("@synthetixio/core-utils/utils/hardhat/contracts");
const config_1 = require("hardhat/config");
const iterators_1 = require("../internal/iterators");
const task_names_1 = require("../task-names");
require("hardhat/types/runtime");
(0, config_1.subtask)(task_names_1.SUBTASK_STORAGE_GET_SOURCE_UNITS).setAction(async ({ artifacts }, hre) => {
    const sourceUnits = await (0, contracts_1.getContractsAsts)(hre, artifacts);
    // When running coverage, remove function calls added by solidity-coverage
    if (hre.__SOLIDITY_COVERAGE_RUNNING) {
        for (const [, contractNode, functionNode] of (0, iterators_1.iterateFunctions)(sourceUnits)) {
            // Remove function added to the contract
            if (functionNode.name.startsWith('c_')) {
                contractNode.nodes = contractNode.nodes.filter((node) => node !== functionNode);
                continue;
            }
            // Remove the function calls to the previously deleted coverage functions
            if (Array.isArray(functionNode.body?.statements)) {
                functionNode.body.statements = functionNode.body.statements.filter((node) => {
                    if (node.nodeType !== 'ExpressionStatement')
                        return true;
                    const e = node.expression;
                    const isCoverage = e.nodeType === 'FunctionCall' &&
                        e.kind === 'functionCall' &&
                        e.expression.nodeType === 'Identifier' &&
                        e.expression.name.startsWith('c_');
                    return !isCoverage;
                });
            }
        }
    }
    return sourceUnits;
});
//# sourceMappingURL=get-source-units.js.map