"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const contracts_1 = require("@synthetixio/core-utils/utils/hardhat/contracts");
const logger_1 = __importDefault(require("@synthetixio/core-utils/utils/io/logger"));
const config_1 = require("hardhat/config");
const contract_names_1 = require("hardhat/utils/contract-names");
const render_testable_storage_1 = require("../internal/render-testable-storage");
const task_names_1 = require("../task-names");
(0, config_1.subtask)(task_names_1.SUBTASK_GENERATE_TESTABLE_STORAGE, 'Reads deployed modules from the deployment data file and generates the source for a new router contract.')
    .addParam('artifact', 'The artifact to generate a testable version of')
    .addParam('output', 'Where to put the generated code')
    .setAction(async ({ output, artifact }, hre) => {
    const sourceAstNode = await (0, contracts_1.getContractAst)(hre, artifact);
    logger_1.default.subtitle(`Generating testable storage for ${artifact}`);
    const { sourceName } = (0, contract_names_1.parseFullyQualifiedName)(artifact);
    const relativeSourceName = node_path_1.default.join(node_path_1.default.relative(node_path_1.default.dirname(output), node_path_1.default.dirname(sourceName)), node_path_1.default.basename(sourceName));
    const sourceCode = (0, render_testable_storage_1.renderTestableStorage)({
        relativeSourceName,
        artifact,
        sourceAstNode,
    });
    await promises_1.default.writeFile(output, sourceCode);
    logger_1.default.success(`Generated and written to ${output}`);
    return output;
});
//# sourceMappingURL=generate-testable-storage.js.map