"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterateSlotAssignments = exports.iterateFunctions = exports.iterateVariables = exports.iterateContracts = void 0;
const finders_1 = require("@synthetixio/core-utils/utils/ast/finders");
function* iterateContracts(sourceUnits, filter) {
    for (const sourceUnit of sourceUnits) {
        for (const contractNode of (0, finders_1.findAll)(sourceUnit, 'ContractDefinition')) {
            if (!filter || filter(sourceUnit, contractNode)) {
                yield [sourceUnit, contractNode];
            }
        }
    }
}
exports.iterateContracts = iterateContracts;
function* iterateVariables(contractNodes, filter) {
    for (const [sourceUnit, contractNode] of contractNodes) {
        for (const variableNode of (0, finders_1.findAll)(contractNode, 'VariableDeclaration', filter)) {
            yield [sourceUnit, contractNode, variableNode];
        }
    }
}
exports.iterateVariables = iterateVariables;
function* iterateFunctions(sourceUnits, filter) {
    for (const [sourceUnit, contractNode] of iterateContracts(sourceUnits)) {
        for (const functionNode of (0, finders_1.findAll)(contractNode, 'FunctionDefinition', filter)) {
            yield [sourceUnit, contractNode, functionNode];
        }
    }
}
exports.iterateFunctions = iterateFunctions;
function* iterateSlotAssignments(sourceUnits) {
    for (const [sourceUnit, contractNode, functionNode] of iterateFunctions(sourceUnits, _isPureInternal)) {
        // Do not include slot assignments from coverage
        if (functionNode.name.startsWith('c_'))
            continue;
        const yulAssignments = (0, finders_1.findAll)(functionNode, 'YulAssignment', (node) => {
            return node.variableNames[0].name.endsWith('.slot');
        });
        if (!yulAssignments.length)
            continue;
        if (yulAssignments.length > 1) {
            throw new Error('Cannon have a function that assigns slots several times');
        }
        yield [sourceUnit, contractNode, functionNode, yulAssignments[0]];
    }
}
exports.iterateSlotAssignments = iterateSlotAssignments;
function _isPureInternal(node) {
    return node.stateMutability === 'pure' && node.visibility === 'internal';
}
//# sourceMappingURL=iterators.js.map