"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const types = __importStar(require("@synthetixio/core-utils/utils/hardhat/argument-types"));
const contracts_1 = require("@synthetixio/core-utils/utils/hardhat/contracts");
const logger_1 = __importDefault(require("@synthetixio/core-utils/utils/io/logger"));
const config_1 = require("hardhat/config");
const contract_names_1 = require("hardhat/utils/contract-names");
const quiet_compile_1 = require("../internal/quiet-compile");
const task_names_1 = require("../task-names");
const DEFAULT_OUTPUT_FOLDER = 'generated/test/';
(0, config_1.task)(task_names_1.TASK_GENERATE_TESTABLE, 'Creates generated test contracts for all storage libraries')
    .addOptionalPositionalParam('artifacts', 'Contract files, names, fully qualified names or folder of contracts to include', ['contracts/storage/*'], types.stringArray)
    .addOptionalParam('outputFolder', 'Where to store all the testable contracts inside the sources folder', DEFAULT_OUTPUT_FOLDER)
    .addFlag('debug', 'Display debug logs')
    .addFlag('quiet', 'Silence all output')
    .setAction(async (taskArguments, hre) => {
    const { artifacts, outputFolder = DEFAULT_OUTPUT_FOLDER, debug, quiet } = taskArguments;
    logger_1.default.quiet = !!quiet;
    logger_1.default.debugging = !!debug;
    await (0, quiet_compile_1.quietCompile)(hre, true);
    const output = node_path_1.default.resolve(hre.config.paths.sources, outputFolder);
    const storageLibs = await (0, contracts_1.getContractsFullyQualifiedNames)(hre, artifacts);
    logger_1.default.info(`Generating testable storage for ${storageLibs.length} contracts`);
    await promises_1.default.mkdir(output, { recursive: true });
    // Delete old testable contracts
    for (const f of await promises_1.default.readdir(output)) {
        if (f.startsWith('Testable')) {
            await promises_1.default.unlink(node_path_1.default.join(output, f));
        }
    }
    // scan for all storage interfaces
    for (const contractFullyQualifiedName of storageLibs) {
        const { contractName } = (0, contract_names_1.parseFullyQualifiedName)(contractFullyQualifiedName);
        await hre.run(task_names_1.SUBTASK_GENERATE_TESTABLE_STORAGE, {
            artifact: contractFullyQualifiedName,
            output: node_path_1.default.join(output, `Testable${contractName}Storage.sol`),
        });
    }
});
//# sourceMappingURL=generate-testable.js.map