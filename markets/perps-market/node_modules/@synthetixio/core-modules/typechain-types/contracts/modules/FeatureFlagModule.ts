/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface FeatureFlagModuleInterface extends utils.Interface {
  functions: {
    "addToFeatureFlagAllowlist(bytes32,address)": FunctionFragment;
    "getDeniers(bytes32)": FunctionFragment;
    "getFeatureFlagAllowAll(bytes32)": FunctionFragment;
    "getFeatureFlagAllowlist(bytes32)": FunctionFragment;
    "getFeatureFlagDenyAll(bytes32)": FunctionFragment;
    "isFeatureAllowed(bytes32,address)": FunctionFragment;
    "removeFromFeatureFlagAllowlist(bytes32,address)": FunctionFragment;
    "setDeniers(bytes32,address[])": FunctionFragment;
    "setFeatureFlagAllowAll(bytes32,bool)": FunctionFragment;
    "setFeatureFlagDenyAll(bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToFeatureFlagAllowlist"
      | "getDeniers"
      | "getFeatureFlagAllowAll"
      | "getFeatureFlagAllowlist"
      | "getFeatureFlagDenyAll"
      | "isFeatureAllowed"
      | "removeFromFeatureFlagAllowlist"
      | "setDeniers"
      | "setFeatureFlagAllowAll"
      | "setFeatureFlagDenyAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToFeatureFlagAllowlist",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeniers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeatureFlagAllowAll",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeatureFlagAllowlist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeatureFlagDenyAll",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeatureAllowed",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromFeatureFlagAllowlist",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeniers",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeatureFlagAllowAll",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeatureFlagDenyAll",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToFeatureFlagAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeniers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeatureFlagAllowAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeatureFlagAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeatureFlagDenyAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeatureAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromFeatureFlagAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDeniers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeatureFlagAllowAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeatureFlagDenyAll",
    data: BytesLike
  ): Result;

  events: {
    "FeatureFlagAllowAllSet(bytes32,bool)": EventFragment;
    "FeatureFlagAllowlistAdded(bytes32,address)": EventFragment;
    "FeatureFlagAllowlistRemoved(bytes32,address)": EventFragment;
    "FeatureFlagDeniersReset(bytes32,address[])": EventFragment;
    "FeatureFlagDenyAllSet(bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeatureFlagAllowAllSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeatureFlagAllowlistAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeatureFlagAllowlistRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeatureFlagDeniersReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeatureFlagDenyAllSet"): EventFragment;
}

export interface FeatureFlagAllowAllSetEventObject {
  feature: string;
  allowAll: boolean;
}
export type FeatureFlagAllowAllSetEvent = TypedEvent<
  [string, boolean],
  FeatureFlagAllowAllSetEventObject
>;

export type FeatureFlagAllowAllSetEventFilter =
  TypedEventFilter<FeatureFlagAllowAllSetEvent>;

export interface FeatureFlagAllowlistAddedEventObject {
  feature: string;
  account: string;
}
export type FeatureFlagAllowlistAddedEvent = TypedEvent<
  [string, string],
  FeatureFlagAllowlistAddedEventObject
>;

export type FeatureFlagAllowlistAddedEventFilter =
  TypedEventFilter<FeatureFlagAllowlistAddedEvent>;

export interface FeatureFlagAllowlistRemovedEventObject {
  feature: string;
  account: string;
}
export type FeatureFlagAllowlistRemovedEvent = TypedEvent<
  [string, string],
  FeatureFlagAllowlistRemovedEventObject
>;

export type FeatureFlagAllowlistRemovedEventFilter =
  TypedEventFilter<FeatureFlagAllowlistRemovedEvent>;

export interface FeatureFlagDeniersResetEventObject {
  feature: string;
  deniers: string[];
}
export type FeatureFlagDeniersResetEvent = TypedEvent<
  [string, string[]],
  FeatureFlagDeniersResetEventObject
>;

export type FeatureFlagDeniersResetEventFilter =
  TypedEventFilter<FeatureFlagDeniersResetEvent>;

export interface FeatureFlagDenyAllSetEventObject {
  feature: string;
  denyAll: boolean;
}
export type FeatureFlagDenyAllSetEvent = TypedEvent<
  [string, boolean],
  FeatureFlagDenyAllSetEventObject
>;

export type FeatureFlagDenyAllSetEventFilter =
  TypedEventFilter<FeatureFlagDenyAllSetEvent>;

export interface FeatureFlagModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeatureFlagModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDeniers(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFeatureFlagAllowAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFeatureFlagAllowlist(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getFeatureFlagDenyAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFeatureAllowed(
      feature: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFromFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDeniers(
      feature: BytesLike,
      deniers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeatureFlagAllowAll(
      feature: BytesLike,
      allowAll: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeatureFlagDenyAll(
      feature: BytesLike,
      denyAll: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addToFeatureFlagAllowlist(
    feature: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDeniers(feature: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  getFeatureFlagAllowAll(
    feature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFeatureFlagAllowlist(
    feature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getFeatureFlagDenyAll(
    feature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFeatureAllowed(
    feature: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFromFeatureFlagAllowlist(
    feature: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDeniers(
    feature: BytesLike,
    deniers: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeatureFlagAllowAll(
    feature: BytesLike,
    allowAll: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeatureFlagDenyAll(
    feature: BytesLike,
    denyAll: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeniers(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFeatureFlagAllowAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFeatureFlagAllowlist(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getFeatureFlagDenyAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFeatureAllowed(
      feature: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeniers(
      feature: BytesLike,
      deniers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeatureFlagAllowAll(
      feature: BytesLike,
      allowAll: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeatureFlagDenyAll(
      feature: BytesLike,
      denyAll: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeatureFlagAllowAllSet(bytes32,bool)"(
      feature?: BytesLike | null,
      allowAll?: null
    ): FeatureFlagAllowAllSetEventFilter;
    FeatureFlagAllowAllSet(
      feature?: BytesLike | null,
      allowAll?: null
    ): FeatureFlagAllowAllSetEventFilter;

    "FeatureFlagAllowlistAdded(bytes32,address)"(
      feature?: BytesLike | null,
      account?: null
    ): FeatureFlagAllowlistAddedEventFilter;
    FeatureFlagAllowlistAdded(
      feature?: BytesLike | null,
      account?: null
    ): FeatureFlagAllowlistAddedEventFilter;

    "FeatureFlagAllowlistRemoved(bytes32,address)"(
      feature?: BytesLike | null,
      account?: null
    ): FeatureFlagAllowlistRemovedEventFilter;
    FeatureFlagAllowlistRemoved(
      feature?: BytesLike | null,
      account?: null
    ): FeatureFlagAllowlistRemovedEventFilter;

    "FeatureFlagDeniersReset(bytes32,address[])"(
      feature?: BytesLike | null,
      deniers?: null
    ): FeatureFlagDeniersResetEventFilter;
    FeatureFlagDeniersReset(
      feature?: BytesLike | null,
      deniers?: null
    ): FeatureFlagDeniersResetEventFilter;

    "FeatureFlagDenyAllSet(bytes32,bool)"(
      feature?: BytesLike | null,
      denyAll?: null
    ): FeatureFlagDenyAllSetEventFilter;
    FeatureFlagDenyAllSet(
      feature?: BytesLike | null,
      denyAll?: null
    ): FeatureFlagDenyAllSetEventFilter;
  };

  estimateGas: {
    addToFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDeniers(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeatureFlagAllowAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeatureFlagAllowlist(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeatureFlagDenyAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFeatureAllowed(
      feature: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDeniers(
      feature: BytesLike,
      deniers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeatureFlagAllowAll(
      feature: BytesLike,
      allowAll: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeatureFlagDenyAll(
      feature: BytesLike,
      denyAll: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDeniers(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeatureFlagAllowAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeatureFlagAllowlist(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeatureFlagDenyAll(
      feature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFeatureAllowed(
      feature: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromFeatureFlagAllowlist(
      feature: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDeniers(
      feature: BytesLike,
      deniers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeatureFlagAllowAll(
      feature: BytesLike,
      allowAll: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeatureFlagDenyAll(
      feature: BytesLike,
      denyAll: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
