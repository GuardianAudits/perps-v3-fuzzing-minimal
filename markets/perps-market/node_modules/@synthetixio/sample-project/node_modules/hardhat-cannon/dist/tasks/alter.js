"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const cli_1 = require("@usecannon/cli");
const config_1 = require("hardhat/config");
const load_pkg_json_1 = require("../internal/load-pkg-json");
const task_names_1 = require("../task-names");
(0, config_1.task)(task_names_1.TASK_ALTER, 'Make a change to a cannon package outside the regular build process')
    .addPositionalParam('packageName', 'Name and version of the cannon package to inspect')
    .addPositionalParam('command', 'Alteration command to execute. Current options: set-url, set-contract-address, mark-complete')
    .addOptionalVariadicPositionalParam('options', 'Additional options for your alteration command')
    .addOptionalParam('chainId', 'Chain ID of the variant to inspect')
    .addOptionalParam('subpkg', 'When the change needs to be made in a subpackage, specify the step names leading to the subpackage, comma separated')
    .addOptionalParam('providerUrl', 'RPC endpoint of the variant to inspect')
    .addOptionalParam('preset', 'Preset of the variant to inspect')
    .setAction(async ({ packageName, subpkg, chainId, providerUrl, preset, command, options }, hre) => {
    const packageSpec = await hre.run(task_names_1.SUBTASK_LOAD_PACKAGE_DEFINITION, {
        packageWithSettingsParams: packageName ? [packageName] : [],
    });
    if (!chainId) {
        chainId = hre?.network?.config?.chainId || 13370;
    }
    await (0, cli_1.alter)(`${packageSpec.name}:${packageSpec.version}`, subpkg.split(',').filter((s) => s.length > 0), chainId, providerUrl, preset, (0, load_pkg_json_1.loadPackageJson)(node_path_1.default.join(hre.config.paths.root, 'package.json')), command, options, {
        getArtifact: async (n) => await hre.run(task_names_1.SUBTASK_GET_ARTIFACT, { name: n }),
    });
});
//# sourceMappingURL=alter.js.map