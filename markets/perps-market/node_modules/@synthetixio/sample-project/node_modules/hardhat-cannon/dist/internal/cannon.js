"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllContractDatasFromOutputs = exports.getContractDataFromOutputs = exports.cannonBuild = void 0;
const node_path_1 = __importDefault(require("node:path"));
const cli_1 = require("@usecannon/cli");
const task_names_1 = require("../task-names");
const get_hardhat_signers_1 = require("./get-hardhat-signers");
const load_pkg_json_1 = require("./load-pkg-json");
const viem = __importStar(require("viem"));
async function cannonBuild(options) {
    const { hre } = options;
    const provider = (0, cli_1.getProvider)(options.node);
    const signers = (0, get_hardhat_signers_1.getHardhatSigners)(options.hre /*, provider*/);
    const getSigner = async (address) => {
        const addr = viem.getAddress(address);
        for (const signer of signers) {
            if (viem.isAddressEqual(addr, signer.address)) {
                return {
                    address: addr,
                    wallet: viem.createWalletClient({
                        account: signer,
                        transport: viem.custom(provider.transport),
                        chain: provider.chain,
                    }),
                };
            }
        }
        throw new Error(`Signer for address "${address}" not found`);
    };
    const { name, version, def } = await (0, cli_1.loadCannonfile)(node_path_1.default.join(hre.config.paths.root, options.cannonfile));
    const { outputs } = await (0, cli_1.build)({
        provider,
        def,
        packageDefinition: {
            name,
            version,
            settings: options.settings,
        },
        getArtifact: async (contractName) => await hre.run(task_names_1.SUBTASK_GET_ARTIFACT, { name: contractName }),
        getSigner,
        getDefaultSigner: async () => getSigner(signers[0].address),
        presetArg: options.preset,
        pkgInfo: (0, load_pkg_json_1.loadPackageJson)(node_path_1.default.join(hre.config.paths.root, 'package.json')),
        projectDirectory: hre.config.paths.root,
        registryPriority: options.registryPriority,
        publicSourceCode: false,
    });
    return { outputs };
}
exports.cannonBuild = cannonBuild;
function getContractDataFromOutputs(outputs, contractName) {
    const contracts = getAllContractDatasFromOutputs(outputs);
    const contract = contracts[contractName];
    if (!contract) {
        const list = Object.keys(contracts).join('\n  ');
        throw new Error(`Contract "${contractName}" not found on cannon build. Possible options: \n${list}`);
    }
    return contract;
}
exports.getContractDataFromOutputs = getContractDataFromOutputs;
function getAllContractDatasFromOutputs(outputs) {
    const result = {};
    _setContractsDatasFromOutputs(outputs, result);
    return result;
}
exports.getAllContractDatasFromOutputs = getAllContractDatasFromOutputs;
function _setContractsDatasFromOutputs(outputs, result, scope) {
    // this logic handles deeply nested imports such as synthetix.oracle_manager
    // which is really outputs.imports.synthetix.imports.oracle_manager
    const from = scope
        ? scope.split('.').reduce((outputs, importName) => {
            const from = outputs.imports?.[importName];
            if (!from)
                throw new Error(`Could not find imports named "${importName}"`);
            return from;
        }, outputs)
        : outputs;
    for (const [contractName, contractData] of Object.entries(from.contracts || {})) {
        const key = scope ? `${scope}.${contractName}` : contractName;
        result[key] = contractData;
    }
    for (const subScope of Object.keys(from.imports || {})) {
        const newScope = scope ? `${scope}.${subScope}` : subScope;
        _setContractsDatasFromOutputs(outputs, result, newScope);
    }
}
//# sourceMappingURL=cannon.js.map