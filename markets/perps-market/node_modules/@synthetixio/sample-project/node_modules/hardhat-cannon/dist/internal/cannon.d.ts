import { ContractMap } from '@usecannon/builder';
import { PackageSettings } from '@usecannon/cli';
import type { CannonRpcNode } from '@usecannon/cli/src/rpc';
import type { HardhatRuntimeEnvironment } from 'hardhat/types';
import type { BuildOutputs } from '../types';
interface BuildOptions {
    hre: HardhatRuntimeEnvironment;
    node: CannonRpcNode;
    cannonfile: string;
    preset: string;
    settings: PackageSettings;
    registryPriority?: 'local' | 'onchain' | 'offline';
}
export declare function cannonBuild(options: BuildOptions): Promise<{
    outputs: Partial<Pick<import("@usecannon/builder").ChainBuilderContext, "contracts" | "txns" | "settings" | "extras" | "imports">>;
}>;
export declare function getContractDataFromOutputs(outputs: BuildOutputs, contractName: string): import("@usecannon/builder").ContractData;
export declare function getAllContractDatasFromOutputs(outputs: BuildOutputs): ContractMap;
export {};
//# sourceMappingURL=cannon.d.ts.map