import { describeRefSync, execSync, ValidationError } from '@lerna-lite/core';
import log from 'npmlog';
import { getGithubCommits } from './get-github-commits.js';
export async function getCommitsSinceLastRelease(client, gitRemote, branchName, isIndependent, execOpts) {
    const { commitDate } = getOldestCommitSinceLastTag(execOpts, isIndependent, false);
    switch (client) {
        case 'github':
            return getGithubCommits(gitRemote, branchName, commitDate, execOpts);
        case 'gitlab':
        default:
            throw new ValidationError('EREMOTE', 'Invalid remote client type, "github" is currently the only supported client with the option --changelog-include-commits-client-login.');
    }
}
export function getOldestCommitSinceLastTag(execOpts, isIndependent, includeMergedTags) {
    let commitResult = '';
    const describeOptions = { ...execOpts };
    if (isIndependent) {
        describeOptions.match = '*@*';
    }
    const { lastTagName } = describeRefSync(describeOptions, includeMergedTags);
    if (lastTagName) {
        const gitCommandArgs = ['log', `${lastTagName}..HEAD`, '--format="%h %aI"', '--reverse'];
        log.silly('git', 'getCurrentBranchOldestCommitSinceLastTag');
        log.verbose('exec', `git ${gitCommandArgs.join(' ')}`);
        let stdout = execSync('git', gitCommandArgs, execOpts);
        if (!stdout) {
            stdout = execSync('git', ['log', '-1', '--format="%h %aI"', lastTagName], execOpts) || '';
        }
        [commitResult] = stdout.split('\n');
    }
    else {
        const gitCommandArgs = ['log', '--oneline', '--format="%h %aI"', '--reverse', '--max-parents=0', 'HEAD'];
        log.silly('git', 'getCurrentBranchFirstCommit');
        log.verbose('exec', `git ${gitCommandArgs.join(' ')}`);
        commitResult = execSync('git', gitCommandArgs, execOpts);
    }
    const [, commitHash, commitDate] = /^"?([0-9a-f]+)\s([0-9\-|\+T\:]*)"?$/.exec(commitResult) || [];
    log.info('oldestCommitSinceLastTag', `commit found since last tag: ${lastTagName} - (SHA) ${commitHash} - ${commitDate}`);
    return { commitHash, commitDate };
}
//# sourceMappingURL=get-commits-since-last-release.js.map