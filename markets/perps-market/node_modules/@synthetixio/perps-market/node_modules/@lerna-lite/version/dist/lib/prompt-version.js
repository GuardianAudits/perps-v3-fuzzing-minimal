import semver from 'semver';
import { promptSelectOne, promptTextInput } from '@lerna-lite/core';
import { applyBuildMetadata } from '../conventional-commits/index.js';
export function makePromptVersion(resolvePrereleaseId, buildMetadata) {
    return (node) => promptVersion(node.version, node.name, resolvePrereleaseId(node.prereleaseId), buildMetadata);
}
export async function promptVersion(currentVersion, name, prereleaseId, buildMetadata) {
    const patch = applyBuildMetadata(semver.inc(currentVersion, 'patch'), buildMetadata);
    const minor = applyBuildMetadata(semver.inc(currentVersion, 'minor'), buildMetadata);
    const major = applyBuildMetadata(semver.inc(currentVersion, 'major'), buildMetadata);
    const prepatch = applyBuildMetadata(semver.inc(currentVersion, 'prepatch', prereleaseId), buildMetadata);
    const preminor = applyBuildMetadata(semver.inc(currentVersion, 'preminor', prereleaseId), buildMetadata);
    const premajor = applyBuildMetadata(semver.inc(currentVersion, 'premajor', prereleaseId), buildMetadata);
    const message = `Select a new version ${name ? `for ${name} ` : ''}(currently ${currentVersion})`;
    const choice = await promptSelectOne(message, {
        choices: [
            { value: patch, name: `Patch (${patch})` },
            { value: minor, name: `Minor (${minor})` },
            { value: major, name: `Major (${major})` },
            { value: prepatch, name: `Prepatch (${prepatch})` },
            { value: preminor, name: `Preminor (${preminor})` },
            { value: premajor, name: `Premajor (${premajor})` },
            { value: 'PRERELEASE', name: 'Custom Prerelease' },
            { value: 'CUSTOM', name: 'Custom Version' },
        ],
    });
    if (choice === 'CUSTOM') {
        return promptTextInput('Enter a custom version', {
            filter: semver.valid,
            validate: (v) => v !== null || 'Must be a valid semver version',
        });
    }
    if (choice === 'PRERELEASE') {
        const defaultVersion = semver.inc(currentVersion, 'prerelease', prereleaseId);
        const prompt = `(default: "${prereleaseId}", yielding ${defaultVersion})`;
        return promptTextInput(`Enter a prerelease identifier ${prompt}`, {
            filter: (v) => applyBuildMetadata(semver.inc(currentVersion, 'prerelease', v || prereleaseId), buildMetadata),
        });
    }
    return choice;
}
//# sourceMappingURL=prompt-version.js.map