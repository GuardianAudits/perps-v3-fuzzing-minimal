import { getComplexObjectValue } from '@lerna-lite/core';
import dedent from 'dedent';
import log from 'npmlog';
import { createGitHubClient, parseGitRepo } from '../git-clients/index.js';
const QUERY_PAGE_SIZE = 100;
export async function getGithubCommits(gitRemote, branchName, sinceDate, execOpts) {
    const repo = parseGitRepo(gitRemote, execOpts);
    const octokit = await createGitHubClient();
    const remoteCommits = [];
    let afterCursor = '';
    let hasNextPage = false;
    do {
        const afterCursorStr = afterCursor ? `, after: "${afterCursor}"` : '';
        const queryStr = dedent `
      query getCommits($repo: String!, $owner: String!, $branchName: String!, $pageSize: Int!, $since: GitTimestamp!) {
          repository(name: $repo, owner: $owner) {
            ref(qualifiedName: $branchName) {
              target { ... on Commit {
                  history(first: $pageSize, since: $since ${afterCursorStr}) {
                    nodes { oid, message, author { name, user { login }}}
                    pageInfo { hasNextPage, endCursor }
        }}}}}}
        `.trim();
        const response = await octokit.graphql(queryStr, {
            owner: repo.owner,
            repo: repo.name,
            afterCursor,
            branchName,
            pageSize: QUERY_PAGE_SIZE,
            since: sinceDate,
        });
        const historyData = getComplexObjectValue(response, 'repository.ref.target.history');
        const pageInfo = historyData?.pageInfo;
        hasNextPage = pageInfo?.hasNextPage ?? false;
        afterCursor = pageInfo?.endCursor ?? '';
        if (historyData?.nodes) {
            for (const commit of historyData.nodes) {
                if (commit?.oid && commit?.author) {
                    remoteCommits.push({
                        shortHash: commit.oid.substring(0, 7),
                        authorName: commit?.author.name,
                        login: commit?.author?.user?.login ?? '',
                        message: commit?.message ?? '',
                    });
                }
            }
        }
    } while (hasNextPage);
    log.verbose('github', 'found %s commits since last release timestamp %s', remoteCommits.length, sinceDate);
    return remoteCommits;
}
//# sourceMappingURL=get-github-commits.js.map