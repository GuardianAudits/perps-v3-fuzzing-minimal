import fs from 'graceful-fs';
import { isStream } from 'is-stream';
import makeDir from 'make-dir';
import tempDir from 'temp-dir';
import { dirname, join } from 'node:path';
import { promisify } from 'node:util';
import { v4 as uuidv4 } from 'uuid';
const writeFileP = promisify(fs.writeFile);
const tempfile = (filePath) => join(tempDir, `lerna-${uuidv4()}`, filePath || '');
const writeStream = async (filePath, fileContent) => new Promise((resolve, reject) => {
    const writable = fs.createWriteStream(filePath);
    fileContent
        .on('error', (error) => {
        reject(error);
        fileContent.unpipe(writable);
        writable.end();
    })
        .pipe(writable)
        .on('error', reject)
        .on('finish', resolve);
});
export async function tempWrite(fileContent, filePath) {
    const tempPath = tempfile(filePath);
    const write = isStream(fileContent) ? writeStream : writeFileP;
    await makeDir(dirname(tempPath));
    await write(tempPath, fileContent);
    return tempPath;
}
tempWrite.sync = (fileContent, filePath) => {
    const tempPath = tempfile(filePath);
    makeDir.sync(dirname(tempPath));
    fs.writeFileSync(tempPath, fileContent);
    return tempPath;
};
//# sourceMappingURL=temp-write.js.map