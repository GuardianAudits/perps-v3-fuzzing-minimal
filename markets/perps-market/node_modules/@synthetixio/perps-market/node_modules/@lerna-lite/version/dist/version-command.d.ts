import { Command, CommandType, Package, PackageGraphNode, ProjectConfig, VersionCommandOption } from '@lerna-lite/core';
import { GitCreateReleaseClientOutput, ReleaseNote, RemoteCommit } from './models/index.js';
export declare function factory(argv: VersionCommandOption): VersionCommand;
export declare class VersionCommand extends Command<VersionCommandOption> {
    name: CommandType;
    globalVersion: string;
    changelogIncludeCommitsClientLogin?: boolean | string;
    changelogIncludeCommitsGitAuthor?: boolean | string;
    commitsSinceLastRelease?: RemoteCommit[];
    currentBranch: string;
    gitRemote: string;
    tagPrefix: string;
    commitAndTag: boolean;
    pushToRemote: boolean;
    hasRootedLeaf: boolean;
    releaseClient?: GitCreateReleaseClientOutput;
    releaseNotes: ReleaseNote[];
    gitOpts: any;
    runPackageLifecycle: any;
    runRootLifecycle: (stage: string) => Promise<void> | void;
    savePrefix: string;
    tags: string[];
    packagesToVersion: Package[];
    updates: PackageGraphNode[];
    updatesVersions?: Map<string, string>;
    premajorVersionBump?: 'default' | 'force-patch';
    get otherCommandConfigs(): string[];
    get requiresGit(): boolean;
    constructor(argv: VersionCommandOption | ProjectConfig);
    configureProperties(): Promise<void>;
    initialize(): Promise<boolean>;
    execute(): Promise<{
        updates: PackageGraphNode[];
        updatesVersions: Map<string, string> | undefined;
    }>;
    getVersionsForUpdates(): Promise<Map<string, string>>;
    reduceVersions(getVersion: (s: PackageGraphNode) => string): Promise<Map<string, string>>;
    setUpdatesForVersions(versions: Map<string, string>): void;
    getPrereleasePackageNames(): string[];
    getPackagesForOption(option?: boolean | string | string[]): Set<string>;
    recommendVersions(resolvePrereleaseId: any): Promise<Map<string, string>>;
    confirmVersions(): Promise<boolean> | boolean;
    updatePackageVersions(): Promise<any>;
    commitAndTagUpdates(): Promise<void>;
    gitCommitAndTagVersionForUpdates(): Promise<string[]>;
    gitCommitAndTagVersion(): Promise<string[]>;
    gitPushToRemote(): Promise<void>;
    setGlobalVersionFloor(): void;
    setGlobalVersionCeiling(versions: Map<string, string>): string;
}
