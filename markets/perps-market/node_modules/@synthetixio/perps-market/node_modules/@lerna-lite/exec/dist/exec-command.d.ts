import 'dotenv/config';
import { Command, CommandType, ExecCommandOption, Package, ProjectConfig } from '@lerna-lite/core';
import { FilterOptions } from '@lerna-lite/filter-packages';
import { ExecStreamingOption } from './models/index.js';
export declare function factory(argv: ExecCommandOption): ExecCommand;
export declare class ExecCommand extends Command<ExecCommandOption & FilterOptions> {
    name: CommandType;
    args: string[];
    bail: boolean;
    count?: number;
    env: {
        [key: string]: string | undefined;
    };
    filteredPackages: Package[];
    packagePlural?: 'package' | 'packages';
    joinedCommand?: string;
    prefix: boolean;
    command: string;
    get requiresGit(): boolean;
    constructor(argv: ExecCommandOption | ProjectConfig);
    initialize(): Promise<void>;
    execute(): Promise<void>;
    getOpts(pkg: Package): ExecStreamingOption;
    getRunner(): (pkg: Package) => Promise<any>;
    runCommandInPackagesTopological(): Promise<any>;
    runCommandInPackagesParallel(): Promise<any[]>;
    runCommandInPackagesLexical(): Promise<any[]>;
    runCommandInPackageStreaming(pkg: Package): Promise<any>;
    runCommandInPackageCapturing(pkg: Package): Promise<any>;
    dryRunExec(commandName: string, pkgName: string): Promise<any>;
}
