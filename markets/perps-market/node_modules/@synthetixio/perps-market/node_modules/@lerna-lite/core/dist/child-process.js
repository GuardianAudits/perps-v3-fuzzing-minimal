import chalk from 'chalk';
import { execa, execaSync } from 'execa';
import log from 'npmlog';
import { constants } from 'node:os';
import logTransformer from 'strong-log-transformer';
const children = new Set();
const colorWheel = ['cyan', 'magenta', 'blue', 'yellow', 'green', 'red'];
const NUM_COLORS = colorWheel.length;
let currentColor = 0;
export function exec(command, args, opts, dryRun = false) {
    const options = Object.assign({ stdio: 'pipe' }, opts);
    const spawned = spawnProcess(command, args, options, dryRun);
    return dryRun ? Promise.resolve() : wrapError(spawned);
}
export function execSync(command, args, opts, dryRun = false) {
    return dryRun
        ? logExecCommand(command, args)
        : execaSync(command, args, opts).stdout;
}
export function spawn(command, args, opts, dryRun = false) {
    const options = Object.assign({}, opts, { stdio: 'inherit' });
    const spawned = spawnProcess(command, args, options, dryRun);
    return wrapError(spawned);
}
export function spawnStreaming(command, args, opts, prefix, dryRun = false) {
    const options = Object.assign({}, opts);
    options.stdio = ['ignore', 'pipe', 'pipe'];
    const spawned = spawnProcess(command, args, options, dryRun);
    const stdoutOpts = {};
    const stderrOpts = {};
    if (prefix) {
        const colorName = colorWheel[currentColor % NUM_COLORS];
        const color = chalk[colorName];
        currentColor += 1;
        stdoutOpts.tag = `${color.bold(prefix)}:`;
        stderrOpts.tag = `${color(prefix)}:`;
    }
    if (children.size > process.stdout.listenerCount('close')) {
        process.stdout.setMaxListeners(children.size);
        process.stderr.setMaxListeners(children.size);
    }
    spawned.stdout?.pipe(logTransformer(stdoutOpts)).pipe(process.stdout);
    spawned.stderr?.pipe(logTransformer(stderrOpts)).pipe(process.stderr);
    return wrapError(spawned);
}
export function getChildProcessCount() {
    return children.size;
}
export function getExitCode(result) {
    if (typeof result.code === 'number' || typeof result.exitCode === 'number') {
        return result.code ?? result.exitCode;
    }
    if (typeof result.code === 'string' || typeof result.exitCode === 'string') {
        return constants.errno[result.code ?? result.exitCode];
    }
    throw new TypeError(`Received unexpected exit code value ${JSON.stringify(result.code ?? result.exitCode)}`);
}
export function spawnProcess(command, args, opts, dryRun = false) {
    if (dryRun) {
        return logExecCommand(command, args);
    }
    const child = execa(command, args, opts);
    const drain = (_code, signal) => {
        children.delete(child);
        if (signal === undefined) {
            child.removeListener('exit', drain);
        }
    };
    child.once('exit', drain);
    child.once('error', drain);
    if (opts.pkg) {
        child.pkg = opts.pkg;
    }
    children.add(child);
    return child;
}
export function wrapError(spawned) {
    if (spawned.pkg) {
        return spawned.catch((err) => {
            err.exitCode = getExitCode(err);
            err.pkg = spawned.pkg;
            throw err;
        });
    }
    return spawned;
}
export function logExecCommand(command, args) {
    const argStr = (Array.isArray(args) ? args.join(' ') : args) ?? '';
    const cmdList = [];
    for (const c of [command, argStr]) {
        cmdList.push(Array.isArray(c) ? c.join(' ') : c);
    }
    log.info(chalk.bold.magenta('[dry-run] >'), cmdList.join(' '));
    return '';
}
//# sourceMappingURL=child-process.js.map