import { PackageGraph } from '../package-graph/package-graph.js';
export class QueryGraph {
    static toposort(packages, options) {
        const graph = new QueryGraph(packages, options);
        const result = [];
        let batch = graph.getAvailablePackages();
        while (batch.length) {
            for (const node of batch) {
                result.push(node.pkg);
                graph.markAsDone(node);
            }
            batch = graph.getAvailablePackages();
        }
        return result;
    }
    constructor(packages, { graphType = 'allDependencies', localDependencies = 'auto', rejectCycles } = {}) {
        this.graph = new PackageGraph(packages, graphType, localDependencies);
        this.cycles = this.graph.collapseCycles(rejectCycles);
    }
    _getNextLeaf() {
        return Array.from(this.graph.values()).filter((node) => node.localDependencies.size === 0);
    }
    _getNextCycle() {
        const cycle = Array.from(this.cycles).find((cycleNode) => cycleNode.localDependencies.size === 0);
        if (!cycle) {
            return [];
        }
        this.cycles.delete(cycle);
        return cycle.flatten();
    }
    getAvailablePackages() {
        const availablePackages = this._getNextLeaf();
        if (availablePackages.length > 0) {
            return availablePackages;
        }
        return this._getNextCycle();
    }
    markAsTaken(name) {
        this.graph.delete(name);
    }
    markAsDone(candidateNode) {
        this.graph.remove(candidateNode);
        for (const cycle of this.cycles) {
            cycle.unlink(candidateNode);
        }
    }
}
//# sourceMappingURL=query-graph.js.map