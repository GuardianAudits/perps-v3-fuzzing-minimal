import log from 'npmlog';
import npa from 'npm-package-arg';
import { Package } from '../package.js';
import { InitCommandOption, PublishCommandOption, RunCommandOption, VersionCommandOption } from './command-options.js';
export type JsonObject = {
    [Key in string]: JsonValue;
} & {
    [Key in string]?: JsonValue | undefined;
};
export type JsonArray = JsonValue[];
export type JsonPrimitive = string | number | boolean | null;
export type JsonValue = JsonPrimitive | JsonObject | JsonArray;
export interface CommandOptions {
    rollPublish?: boolean;
    rollVersion?: boolean;
}
export type CommandType = '' | 'changed' | 'exec' | 'info' | 'init' | 'list' | 'publish' | 'run' | 'version';
export interface DescribeRefOptions {
    cwd?: string;
    match?: string;
    separator?: string;
}
export interface DescribeRefFallbackResult {
    isDirty: boolean;
    lastVersion?: string;
    lastTagName?: string;
    refCount: number | string;
    sha: string;
}
export interface DescribeRefDetailedResult {
    lastTagName: string;
    lastVersion: string;
    isDirty: boolean;
    refCount: number | string;
    sha: string;
}
export interface ExecOpts {
    cwd: string;
    maxBuffer?: number;
}
export interface LifecycleConfig {
    access?: 'public' | 'restricted';
    defaultTag?: string;
    ignorePrepublish?: boolean;
    ignoreScripts?: boolean;
    log: log.Logger;
    lernaCommand?: string;
    nodeOptions?: string;
    projectScope?: string | null;
    scriptShell?: string;
    scriptsPrependNodePath?: boolean;
    snapshot?: any;
    stdio?: string;
    tag?: string;
    unsafePerm?: boolean;
}
export interface Manifest {
    name: string;
    location: string;
    manifest: Package;
    version: string;
}
export interface FetchConfig {
    [key: string]: unknown;
    fetchRetries: number;
    log: log.Logger;
    registry: string;
    username: string;
}
export interface PackConfig {
    log: log.Logger;
    lernaCommand?: string;
    ignorePrepublish?: boolean;
}
export interface ProfileData {
    tfa: {
        pending: boolean;
        mode: 'auth-and-writes' | 'auth-only';
    };
    name: string;
    username: string;
    email: string;
    email_verified: boolean;
    created: string;
    updated: string;
    fullname?: string;
    twitter?: string;
    github?: string;
}
export interface QueryGraphConfig {
    graphType?: 'all' | 'allDependencies' | 'allPlusPeerDependencies' | 'dependencies';
    localDependencies?: 'auto' | 'force' | 'explicit';
    rejectCycles?: boolean;
    premajorVersionBump?: 'default' | 'force-patch';
}
export interface TopologicalConfig extends QueryGraphConfig {
    concurrency?: number;
}
export type NpaResolveResult = (npa.FileResult | npa.HostedGitResult | npa.URLResult | npa.AliasResult | npa.RegistryResult) & {
    workspaceSpec?: string;
};
export interface LernaConfig {
    command?: {
        init?: InitCommandOption;
        publish?: PublishCommandOption;
        version?: VersionCommandOption;
        run?: RunCommandOption;
    };
    packages?: string[];
    loglevel?: 'silent' | 'error' | 'warn' | 'notice' | 'http' | 'timing' | 'info' | 'verbose' | 'silly';
    npmClient?: 'npm' | 'pnpm' | 'yarn';
    useWorkspaces?: boolean;
    version: string;
}
export interface ProjectConfig extends LernaConfig, QueryGraphConfig {
    $schema: string;
    ci?: boolean;
    concurrency: number | string;
    cwd: string;
    composed?: boolean | string;
    lernaVersion: string;
    progress?: boolean;
    since?: string;
    sort?: boolean;
    stream?: boolean;
    verbose?: boolean;
    onRejected?: (result: any) => void;
    onResolved?: (result: any) => void;
    describeTag?: string;
}
export interface RawManifest extends Package {
    publishConfig?: Record<'directory' | 'registry' | 'tag', string>;
}
export interface UpdateCollectorOptions {
    bump?: string;
    canary?: boolean;
    ignoreChanges?: string[];
    includeMergedTags?: boolean;
    forcePublish?: boolean | string | string[];
    since?: string;
    isIndependent?: boolean;
    describeTag?: string;
    conventionalCommits?: boolean;
    conventionalGraduate?: boolean | string;
    forceConventionalGraduate?: boolean;
    excludeDependents?: boolean;
    tagVersionSeparator?: string;
    independentSubpackages?: boolean;
}
export type RemoteClientType = 'gitlab' | 'github';
