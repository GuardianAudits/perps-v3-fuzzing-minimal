import log from 'npmlog';
import { exec, execSync } from '../child-process.js';
function getArgs(options, includeMergedTags) {
    let args = [
        'describe',
        '--always',
        '--long',
        '--dirty',
        '--first-parent',
    ];
    if (options.match) {
        args.push('--match', options.match);
    }
    if (includeMergedTags) {
        args = args.filter((arg) => arg !== '--first-parent');
    }
    return args;
}
function describeRef(options = {}, includeMergedTags, dryRun = false) {
    const promise = exec('git', getArgs(options, includeMergedTags), options, dryRun);
    return promise.then(({ stdout } = { stdout: '' }) => {
        const result = parse(stdout, options.cwd, options.separator);
        if (options?.match) {
            log.verbose('git-describe', '%j => %j', options?.match, stdout);
        }
        if (stdout) {
            log.silly('git-describe', 'parsed => %j', result);
        }
        return result;
    });
}
function describeRefSync(options = {}, includeMergedTags, dryRun = false) {
    const stdout = execSync('git', getArgs(options, includeMergedTags), options, dryRun);
    const result = parse(stdout, options.cwd, options.separator);
    if (options?.match) {
        log.verbose('git-describe.sync', '%j => %j', options?.match, stdout);
    }
    if (stdout) {
        log.silly('git-describe', 'parsed => %j', result);
    }
    return result;
}
function parse(stdout, cwd, separator) {
    separator = separator || '@';
    const minimalShaRegex = /^([0-9a-f]{7,40})(-dirty)?$/;
    if (minimalShaRegex.test(stdout)) {
        const [, sha, isDirty] = minimalShaRegex.exec(stdout);
        const refCount = execSync('git', ['rev-list', '--count', sha], { cwd });
        return { refCount, sha, isDirty: Boolean(isDirty) };
    }
    const escapedSeparator = separator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regexPattern = new RegExp(`^((?:.*${escapedSeparator})?(.*))-(\\d+)-g([0-9a-f]+)(-dirty)?$`);
    const [, lastTagName, lastVersion, refCount, sha, isDirty] = regexPattern.exec(stdout) || [];
    return { lastTagName, lastVersion, refCount, sha, isDirty: Boolean(isDirty) };
}
export { describeRef, describeRefSync };
//# sourceMappingURL=describe-ref.js.map