import { CommandType, NpaResolveResult, RawManifest } from './models/index.js';
export declare class Package {
    _id: string;
    name: string;
    isBumpOnlyVersion: boolean;
    licensePath: string;
    localDependencies: Map<string, any>;
    static lazy(ref: string | Package | RawManifest, dir?: string): Package;
    constructor(pkg: RawManifest, location: string, rootPath?: string);
    get location(): string;
    get private(): boolean;
    get resolved(): {
        name: string;
        bin: any;
        scope: any;
    };
    get rootPath(): string;
    get scripts(): any;
    get bin(): any;
    get binLocation(): string;
    get manifest(): RawManifest;
    get manifestLocation(): string;
    get nodeModulesLocation(): string;
    get __isLernaPackage(): boolean;
    get version(): string;
    set version(version: string);
    get workspaces(): string[] | {
        packages: string[];
    };
    set workspaces(workspaces: string[] | {
        packages: string[];
    });
    get contents(): string;
    set contents(subDirectory: string);
    get dependencies(): {
        [depName: string]: string;
    };
    get devDependencies(): {
        [depName: string]: string;
    };
    get optionalDependencies(): {
        [depName: string]: string;
    };
    get peerDependencies(): {
        [depName: string]: string;
    };
    get pkg(): Package;
    get<K extends keyof RawManifest>(key: string): K;
    set(key: string, val: RawManifest[keyof RawManifest]): Package;
    toJSON(): {};
    refresh(): Promise<this>;
    serialize(): Promise<this>;
    removeDependencyWorkspaceProtocolPrefix(pkgName: string, resolved: NpaResolveResult): void;
    updateLocalDependency(resolved: NpaResolveResult, depVersion: string, savePrefix: string, allowPeerDependenciesUpdate?: boolean, updatedByCommand?: CommandType): void;
    private retrievePackageDependencies;
}
