import { collectUncommitted } from './collect-uncommitted.js';
import { describeRef } from './describe-ref.js';
import { ValidationError } from '../validation-error.js';
export function checkWorkingTree({ cwd } = {}, dryRun = false) {
    let chain = Promise.resolve();
    chain = chain.then(() => describeRef({ cwd }, undefined, dryRun));
    const tests = [
        chain.then(throwIfReleased),
        chain.then(mkThrowIfUncommitted({ cwd }, dryRun)),
    ];
    return chain.then((result) => Promise.all(tests).then(() => result));
}
export function throwIfReleased({ refCount }) {
    if (refCount === '0') {
        throw new ValidationError('ERELEASED', 'The current commit has already been released. Please make new commits before continuing.');
    }
}
const EUNCOMMIT_MSG = 'Working tree has uncommitted changes, please commit or remove the following changes before continuing:\n';
export function mkThrowIfUncommitted(options = {}, dryRun = false) {
    return function ({ isDirty }) {
        if (isDirty) {
            return collectUncommitted(options, dryRun).then((uncommitted) => {
                throw new ValidationError('EUNCOMMIT', `${EUNCOMMIT_MSG}${uncommitted.join('\n')}`);
            });
        }
    };
}
export function throwIfUncommitted() {
    mkThrowIfUncommitted();
}
//# sourceMappingURL=check-working-tree.js.map