import PQueue from 'p-queue';
import { QueryGraph } from './query-graph.js';
export function runTopologically(packages, runner, { concurrency, graphType, rejectCycles } = {}) {
    const queue = new PQueue({ concurrency });
    const graph = new QueryGraph(packages, { graphType, rejectCycles });
    return new Promise((resolve, reject) => {
        const returnValues = [];
        const queueNextAvailablePackages = () => graph.getAvailablePackages().forEach(({ pkg, name }) => {
            graph.markAsTaken(name);
            queue
                .add(() => runner(pkg)
                .then((value) => returnValues.push(value))
                .then(() => graph.markAsDone(pkg))
                .then(() => queueNextAvailablePackages()))
                .catch(reject);
        });
        queueNextAvailablePackages();
        return queue.onIdle().then(() => resolve(returnValues));
    });
}
//# sourceMappingURL=run-topologically.js.map