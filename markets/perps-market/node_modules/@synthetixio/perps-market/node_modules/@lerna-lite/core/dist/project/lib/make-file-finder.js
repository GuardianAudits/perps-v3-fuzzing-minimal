import { globby, globbySync } from 'globby';
import { normalize as pathNormalize, posix } from 'node:path';
import pMap from 'p-map';
import { ValidationError } from '../../validation-error.js';
function normalize(results) {
    return results.map((fp) => pathNormalize(fp));
}
function getGlobOpts(rootPath, packageConfigs) {
    const globOpts = {
        cwd: rootPath,
        absolute: true,
        expandDirectories: false,
        followSymbolicLinks: false,
    };
    if (packageConfigs.some((cfg) => cfg.indexOf('**') > -1)) {
        if (packageConfigs.some((cfg) => cfg.indexOf('node_modules') > -1)) {
            throw new ValidationError('EPKGCONFIG', 'An explicit node_modules package path does not allow globstars (**)');
        }
        globOpts.ignore = [
            '**/node_modules/**',
        ];
    }
    return globOpts;
}
export function makeFileFinder(rootPath, packageConfigs) {
    const globOpts = getGlobOpts(rootPath, packageConfigs);
    return (fileName, fileMapper, customGlobOpts) => {
        const options = Object.assign({}, customGlobOpts, globOpts);
        const promise = pMap(Array.from(packageConfigs).sort(), (globPath) => {
            let chain = globby(posix.join(globPath, fileName), options);
            chain = chain.then((results) => results.sort());
            chain = chain.then(normalize);
            if (fileMapper) {
                chain = chain.then(fileMapper);
            }
            return chain;
        }, { concurrency: 4 });
        return promise.then((results) => results.reduce((acc, result) => acc.concat(result), []));
    };
}
export function makeSyncFileFinder(rootPath, packageConfigs) {
    const globOpts = getGlobOpts(rootPath, packageConfigs);
    return (fileName, fileMapper, customGlobOpts) => {
        const options = Object.assign({}, customGlobOpts, globOpts);
        const patterns = packageConfigs.map((globPath) => posix.join(globPath, fileName)).sort();
        let results = globbySync(patterns, options);
        results = normalize(results);
        if (fileMapper) {
            results = results.map(fileMapper);
        }
        return results;
    };
}
//# sourceMappingURL=make-file-finder.js.map