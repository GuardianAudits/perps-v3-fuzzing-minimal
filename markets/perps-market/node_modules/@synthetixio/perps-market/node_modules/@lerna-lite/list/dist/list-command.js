import { Command, logOutput } from '@lerna-lite/core';
import { getFilteredPackages } from '@lerna-lite/filter-packages';
import { listable } from '@lerna-lite/listable';
export function factory(argv) {
    return new ListCommand(argv);
}
export class ListCommand extends Command {
    constructor(argv) {
        super(argv);
        this.name = 'list';
    }
    get requiresGit() {
        return false;
    }
    async initialize() {
        this.options.isIndependent = this.project.isIndependent();
        const filteredPackages = await getFilteredPackages(this.packageGraph, this.execOpts, this.options);
        this.result = listable.format(filteredPackages, this.options);
    }
    execute() {
        if (this.result?.text.length) {
            logOutput(this.result.text);
        }
        this.logger.success('found', '%d %s', this.result?.count, this.result?.count === 1 ? 'package' : 'packages');
    }
}
//# sourceMappingURL=list-command.js.map