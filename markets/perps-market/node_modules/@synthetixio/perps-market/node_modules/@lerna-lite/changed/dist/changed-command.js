import { collectUpdates, Command, logOutput, } from '@lerna-lite/core';
import { listable } from '@lerna-lite/listable';
export function factory(argv) {
    return new ChangedCommand(argv);
}
export class ChangedCommand extends Command {
    constructor(argv) {
        super(argv);
        this.name = 'changed';
    }
    get otherCommandConfigs() {
        return ['version', 'publish'];
    }
    async initialize() {
        if (this.options.conventionalGraduate) {
            this.options.conventionalCommits = true;
            if (this.options.forcePublish) {
                this.logger.warn('option', '--force-publish superseded by --conventional-graduate');
            }
        }
        const updates = collectUpdates(this.packageGraph.rawPackageList, this.packageGraph, this.execOpts, this.options);
        this.result = listable.format(updates.map((node) => node.pkg), this.options);
        if (this.result.count === 0) {
            this.logger.info('', 'No changed packages found');
            process.exitCode = 1;
            return false;
        }
    }
    execute() {
        logOutput(this.result?.text);
        this.logger.success('found', '%d %s ready to publish', this.result?.count, this.result?.count === 1 ? 'package' : 'packages');
    }
}
//# sourceMappingURL=changed-command.js.map