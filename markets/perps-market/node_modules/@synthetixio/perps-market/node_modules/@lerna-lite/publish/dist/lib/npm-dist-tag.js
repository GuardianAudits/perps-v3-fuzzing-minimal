import { otplease } from '@lerna-lite/version';
import log from 'npmlog';
import npa from 'npm-package-arg';
import fetch from 'npm-registry-fetch';
export function add(spec, tag = '', options, otpCache) {
    const opts = {
        log,
        ...options,
        spec: npa(spec),
    };
    const cleanTag = (tag || opts.defaultTag || opts.tag).trim();
    const { name, rawSpec: version } = opts.spec;
    opts.log.verbose('dist-tag', `adding "${cleanTag}" to ${name}@${version}`);
    if (opts.dryRun) {
        opts.log.silly('dist-tag', 'dry-run configured, bailing now');
        return Promise.resolve();
    }
    return fetchTags(opts).then((tags) => {
        if (tags[cleanTag] === version) {
            opts.log.warn('dist-tag', `${name}@${cleanTag} already set to ${version}`);
            return tags;
        }
        const uri = `/-/package/${opts.spec.escapedName}/dist-tags/${encodeURIComponent(cleanTag)}`;
        const payload = {
            ...opts,
            method: 'PUT',
            body: JSON.stringify(version),
            headers: {
                'content-type': 'application/json',
            },
            spec: opts.spec,
        };
        return otplease((wrappedPayload) => fetch(uri, wrappedPayload), payload, otpCache).then(() => {
            opts.log.verbose('dist-tag', `added "${cleanTag}" to ${name}@${version}`);
            tags[cleanTag] = version;
            return tags;
        });
    });
}
export function remove(spec, tag, options, otpCache) {
    const opts = {
        log,
        ...options,
        spec: npa(spec),
    };
    opts.log.verbose('dist-tag', `removing "${tag}" from ${opts.spec.name}`);
    if (opts.dryRun) {
        opts.log.silly('dist-tag', 'dry-run configured, bailing now');
        return Promise.resolve();
    }
    return fetchTags(opts).then((tags) => {
        const version = tags[tag];
        if (!version) {
            opts.log.info('dist-tag', `"${tag}" is not a dist-tag on ${opts.spec.name}`);
            return tags;
        }
        const uri = `/-/package/${opts.spec.escapedName}/dist-tags/${encodeURIComponent(tag)}`;
        const payload = {
            ...opts,
            method: 'DELETE',
            spec: opts.spec,
        };
        return otplease((wrappedPayload) => fetch(uri, wrappedPayload), payload, otpCache).then(() => {
            opts.log.verbose('dist-tag', `removed "${tag}" from ${opts.spec.name}@${version}`);
            delete tags[tag];
            return tags;
        });
    });
}
export function list(spec, options) {
    const opts = {
        log,
        ...options,
        spec: npa(spec),
    };
    if (opts.dryRun) {
        opts.log.silly('dist-tag', 'dry-run configured, bailing now');
        return Promise.resolve();
    }
    return fetchTags(opts);
}
export function fetchTags(opts) {
    return fetch
        .json(`/-/package/${opts.spec.escapedName ?? ''}/dist-tags`, {
        ...opts,
        preferOnline: true,
        spec: opts.spec,
    })
        .then((data) => {
        if (data && typeof data === 'object') {
            delete data._etag;
        }
        return data || {};
    });
}
//# sourceMappingURL=npm-dist-tag.js.map