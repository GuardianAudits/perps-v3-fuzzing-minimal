import { runLifecycle } from '@lerna-lite/core';
import { otplease } from '@lerna-lite/version';
import { readFile } from 'fs/promises';
import log from 'npmlog';
import npa from 'npm-package-arg';
import { join } from 'node:path';
import pify from 'pify';
import { publish } from 'libnpmpublish';
import readJSON from 'read-package-json';
const readJSONAsync = pify(readJSON);
function flattenOptions(obj) {
    return {
        defaultTag: obj['tag'] || 'latest',
        dryRun: obj['dry-run'] || obj['git-dry-run'],
        strictSSL: obj['strict-ssl'],
        ...obj,
    };
}
export function npmPublish(pkg, tarFilePath, options = {}, otpCache) {
    const { dryRun, ...remainingOptions } = flattenOptions(options);
    const { scope } = npa(pkg?.name ?? '');
    const opts = {
        log,
        ...remainingOptions,
        projectScope: scope,
    };
    opts.log.verbose('publish', pkg.name);
    let chain = Promise.resolve();
    if (!dryRun) {
        chain = chain.then(() => {
            let { manifestLocation } = pkg;
            if (pkg.contents !== pkg.location) {
                manifestLocation = join(pkg.contents, 'package.json');
            }
            return Promise.all([readFile(tarFilePath), readJSONAsync(manifestLocation)]);
        });
        chain = chain.then(([tarData, manifest]) => {
            if (opts.defaultTag !== 'latest' &&
                manifest.publishConfig &&
                manifest.publishConfig.tag &&
                manifest.publishConfig.tag !== opts.defaultTag) {
                manifest.publishConfig.tag = opts.defaultTag;
            }
            if (manifest.publishConfig) {
                Object.assign(opts, publishConfigToOpts(manifest.publishConfig));
            }
            return otplease((innerOpts) => publish(manifest, tarData, innerOpts), opts, otpCache);
        });
    }
    chain = chain.then(() => runLifecycle(pkg, 'publish', opts));
    chain = chain.then(() => runLifecycle(pkg, 'postpublish', opts));
    return chain;
}
function publishConfigToOpts(publishConfig) {
    const opts = { ...publishConfig };
    if (publishConfig.tag) {
        opts.defaultTag = publishConfig.tag;
        delete opts.tag;
    }
    return opts;
}
//# sourceMappingURL=npm-publish.js.map