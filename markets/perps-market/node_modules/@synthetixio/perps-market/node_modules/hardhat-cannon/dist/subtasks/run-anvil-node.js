"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const builder_1 = require("@usecannon/builder");
const viem = __importStar(require("viem"));
const cli_1 = require("@usecannon/cli");
const config_1 = require("hardhat/config");
const task_names_1 = require("../task-names");
(0, config_1.subtask)(task_names_1.SUBTASK_RUN_ANVIL_NODE).setAction(async ({ dryRun, anvilOptions }, hre) => {
    if (hre.network.name === 'hardhat')
        return;
    if (!dryRun && hre.network.name !== 'cannon')
        return;
    const nodeOptions = {
        accounts: 10, // in hardhat, default is 10
        ...(anvilOptions || {}),
    };
    const rpcOptions = {};
    if (!nodeOptions.port) {
        nodeOptions.port = hre.config.networks.cannon.port;
    }
    if (!nodeOptions.chainId) {
        nodeOptions.chainId =
            hre.network.name === 'cannon'
                ? builder_1.CANNON_CHAIN_ID
                : parseInt((await hre.network.provider.request({ method: 'eth_chainId', params: [] })));
    }
    if (hre.network.name !== 'cannon') {
        // dry run fork
        rpcOptions.forkProvider = viem.createPublicClient({ transport: viem.custom(hre.network.provider) });
    }
    return (0, cli_1.runRpc)(nodeOptions, rpcOptions);
});
//# sourceMappingURL=run-anvil-node.js.map