import * as viem from 'viem';
import { ChainArtifacts, ContractData } from '../types';
export declare function traceActions(artifacts: ChainArtifacts): (client: viem.Client) => {
    estimateGas: (args: viem.EstimateGasParameters) => Promise<bigint | undefined>;
    estimateContractGas: (args: viem.EstimateContractGasParameters) => Promise<bigint | undefined>;
    prepareTransactionRequest: (args: viem.PrepareTransactionRequestParameters) => Promise<{
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "legacy";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip2930";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip1559";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain?: undefined;
        to: `0x${string}` | null;
        maxFeePerBlobGas: bigint;
        accessList?: viem.AccessList | undefined;
        blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
        kzg?: viem.Kzg | undefined;
        sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
        type: "eip4844";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: readonly `0x${string}`[];
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "legacy";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "legacy";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "legacy";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "legacy";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "legacy";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip2930";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip2930";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip2930";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip2930";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip2930";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: bigint;
        maxFeePerGas: never;
        maxPriorityFeePerGas: never;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip1559";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain?: undefined;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip1559";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip1559";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip1559";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain: viem.Chain;
        to?: viem.Address | null | undefined;
        maxFeePerBlobGas?: undefined;
        accessList?: viem.AccessList | undefined;
        blobs?: undefined;
        kzg?: undefined;
        sidecars?: undefined;
        type: "eip1559";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: never;
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain?: undefined;
        to: `0x${string}` | null;
        maxFeePerBlobGas: bigint;
        accessList?: viem.AccessList | undefined;
        blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
        kzg?: viem.Kzg | undefined;
        sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
        type: "eip4844";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: readonly `0x${string}`[];
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain?: undefined;
        to: `0x${string}` | null;
        maxFeePerBlobGas: bigint;
        accessList?: viem.AccessList | undefined;
        blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
        kzg?: viem.Kzg | undefined;
        sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
        type: "eip4844";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: readonly `0x${string}`[];
    } | {
        value?: bigint | undefined;
        from?: undefined;
        data?: viem.Hex | undefined;
        account?: undefined;
        chain: viem.Chain;
        to: `0x${string}` | null;
        maxFeePerBlobGas: bigint;
        accessList?: viem.AccessList | undefined;
        blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
        kzg?: viem.Kzg | undefined;
        sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
        type: "eip4844";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: readonly `0x${string}`[];
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: `0x${string}`;
            type: "json-rpc";
            source?: undefined;
            nonceManager?: undefined;
            signMessage?: undefined;
            signTransaction?: undefined;
            signTypedData?: undefined;
            publicKey?: undefined;
        };
        chain: viem.Chain;
        to: `0x${string}` | null;
        maxFeePerBlobGas: bigint;
        accessList?: viem.AccessList | undefined;
        blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
        kzg?: viem.Kzg | undefined;
        sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
        type: "eip4844";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: readonly `0x${string}`[];
    } | {
        value?: bigint | undefined;
        from: viem.Address;
        data?: viem.Hex | undefined;
        account: {
            address: viem.Address;
            nonceManager?: viem.NonceManager | undefined;
            signMessage: ({ message }: {
                message: viem.SignableMessage;
            }) => Promise<viem.Hash>;
            signTransaction: <serializer extends viem.SerializeTransactionFn<viem.TransactionSerializable> = viem.SerializeTransactionFn<viem.TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, args?: {
                serializer?: serializer | undefined;
            } | undefined) => Promise<import("viem/_types/types/utils").IsNarrowable<viem.TransactionSerialized<viem.GetTransactionType<transaction>>, viem.Hash> extends true ? viem.TransactionSerialized<viem.GetTransactionType<transaction>> : viem.Hash>;
            signTypedData: <const typedData extends viem.TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(typedDataDefinition: viem.TypedDataDefinition<typedData, primaryType>) => Promise<viem.Hash>;
            publicKey: viem.Hex;
            source: string;
            type: "local";
        };
        chain: viem.Chain;
        to: `0x${string}` | null;
        maxFeePerBlobGas: bigint;
        accessList?: viem.AccessList | undefined;
        blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
        kzg?: viem.Kzg | undefined;
        sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
        type: "eip4844";
        nonce: number;
        chainId: number;
        gas: bigint;
        gasPrice: never;
        maxFeePerGas: bigint;
        maxPriorityFeePerGas: bigint;
        blobVersionedHashes: readonly `0x${string}`[];
    } | undefined>;
    simulateContract: (args: viem.SimulateContractParameters) => Promise<viem.SimulateContractReturnType<viem.Abi, string, readonly unknown[], viem.Chain | undefined, viem.Account | undefined, viem.Chain | undefined, undefined, readonly [never], viem.Account | undefined> | undefined>;
};
export declare function handleTxnError(artifacts: ChainArtifacts, provider: viem.Client, err: any, txnData?: viem.PrepareTransactionRequestParameters): Promise<any>;
export declare function findContract(ctx: ChainArtifacts, condition: (v: {
    address: viem.Address;
    abi: viem.Abi;
}) => boolean, prefix?: string): {
    name: string;
    contract: ContractData;
} | null;
//# sourceMappingURL=index.d.ts.map