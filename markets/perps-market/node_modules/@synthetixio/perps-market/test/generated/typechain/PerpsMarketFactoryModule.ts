/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PerpsMarketFactoryModuleInterface extends utils.Interface {
  functions: {
    "createMarket(uint128,string,string)": FunctionFragment;
    "initializeFactory(address,address)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "minimumCredit(uint128)": FunctionFragment;
    "name(uint128)": FunctionFragment;
    "reportedDebt(uint128)": FunctionFragment;
    "setPerpsMarketName(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "utilizationRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createMarket"
      | "initializeFactory"
      | "interestRate"
      | "minimumCredit"
      | "name"
      | "reportedDebt"
      | "setPerpsMarketName"
      | "supportsInterface"
      | "utilizationRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createMarket",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reportedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpsMarketName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpsMarketName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationRate",
    data: BytesLike
  ): Result;

  events: {
    "FactoryInitialized(uint128)": EventFragment;
    "MarketCreated(uint128,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FactoryInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
}

export interface FactoryInitializedEventObject {
  globalPerpsMarketId: BigNumber;
}
export type FactoryInitializedEvent = TypedEvent<
  [BigNumber],
  FactoryInitializedEventObject
>;

export type FactoryInitializedEventFilter =
  TypedEventFilter<FactoryInitializedEvent>;

export interface MarketCreatedEventObject {
  perpsMarketId: BigNumber;
  marketName: string;
  marketSymbol: string;
}
export type MarketCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface PerpsMarketFactoryModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpsMarketFactoryModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarket(
      requestedMarketId: BigNumberish,
      marketName: string,
      marketSymbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeFactory(
      synthetix: string,
      spotMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    interestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumCredit(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reportedDebt(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setPerpsMarketName(
      marketName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    utilizationRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        delegatedCollateral: BigNumber;
        lockedCredit: BigNumber;
      }
    >;
  };

  createMarket(
    requestedMarketId: BigNumberish,
    marketName: string,
    marketSymbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeFactory(
    synthetix: string,
    spotMarket: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  minimumCredit(
    perpsMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(perpsMarketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reportedDebt(
    perpsMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setPerpsMarketName(
    marketName: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  utilizationRate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      delegatedCollateral: BigNumber;
      lockedCredit: BigNumber;
    }
  >;

  callStatic: {
    createMarket(
      requestedMarketId: BigNumberish,
      marketName: string,
      marketSymbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeFactory(
      synthetix: string,
      spotMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    minimumCredit(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reportedDebt(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPerpsMarketName(
      marketName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    utilizationRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        delegatedCollateral: BigNumber;
        lockedCredit: BigNumber;
      }
    >;
  };

  filters: {
    "FactoryInitialized(uint128)"(
      globalPerpsMarketId?: null
    ): FactoryInitializedEventFilter;
    FactoryInitialized(
      globalPerpsMarketId?: null
    ): FactoryInitializedEventFilter;

    "MarketCreated(uint128,string,string)"(
      perpsMarketId?: BigNumberish | null,
      marketName?: null,
      marketSymbol?: null
    ): MarketCreatedEventFilter;
    MarketCreated(
      perpsMarketId?: BigNumberish | null,
      marketName?: null,
      marketSymbol?: null
    ): MarketCreatedEventFilter;
  };

  estimateGas: {
    createMarket(
      requestedMarketId: BigNumberish,
      marketName: string,
      marketSymbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeFactory(
      synthetix: string,
      spotMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    minimumCredit(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportedDebt(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPerpsMarketName(
      marketName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    utilizationRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarket(
      requestedMarketId: BigNumberish,
      marketName: string,
      marketSymbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeFactory(
      synthetix: string,
      spotMarket: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumCredit(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reportedDebt(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPerpsMarketName(
      marketName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilizationRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
