/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace AsyncOrder {
  export type OrderCommitmentRequestStruct = {
    marketId: BigNumberish;
    accountId: BigNumberish;
    sizeDelta: BigNumberish;
    settlementStrategyId: BigNumberish;
    acceptablePrice: BigNumberish;
    trackingCode: BytesLike;
    referrer: string;
  };

  export type OrderCommitmentRequestStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    marketId: BigNumber;
    accountId: BigNumber;
    sizeDelta: BigNumber;
    settlementStrategyId: BigNumber;
    acceptablePrice: BigNumber;
    trackingCode: string;
    referrer: string;
  };

  export type DataStruct = {
    commitmentTime: BigNumberish;
    request: AsyncOrder.OrderCommitmentRequestStruct;
  };

  export type DataStructOutput = [
    BigNumber,
    AsyncOrder.OrderCommitmentRequestStructOutput
  ] & {
    commitmentTime: BigNumber;
    request: AsyncOrder.OrderCommitmentRequestStructOutput;
  };
}

export interface AsyncOrderModuleInterface extends utils.Interface {
  functions: {
    "commitOrder((uint128,uint128,int128,uint128,uint256,bytes32,address))": FunctionFragment;
    "computeOrderFees(uint128,int128)": FunctionFragment;
    "computeOrderFeesWithPrice(uint128,int128,uint256)": FunctionFragment;
    "getOrder(uint128)": FunctionFragment;
    "getSettlementRewardCost(uint128,uint128)": FunctionFragment;
    "requiredMarginForOrder(uint128,uint128,int128)": FunctionFragment;
    "requiredMarginForOrderWithPrice(uint128,uint128,int128,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commitOrder"
      | "computeOrderFees"
      | "computeOrderFeesWithPrice"
      | "getOrder"
      | "getSettlementRewardCost"
      | "requiredMarginForOrder"
      | "requiredMarginForOrderWithPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commitOrder",
    values: [AsyncOrder.OrderCommitmentRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "computeOrderFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeOrderFeesWithPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementRewardCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredMarginForOrder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredMarginForOrderWithPrice",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeOrderFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeOrderFeesWithPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementRewardCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredMarginForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredMarginForOrderWithPrice",
    data: BytesLike
  ): Result;

  events: {
    "OrderCommitted(uint128,uint128,uint8,int128,uint256,uint256,uint256,uint256,uint256,bytes32,address)": EventFragment;
    "PreviousOrderExpired(uint128,uint128,int128,uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreviousOrderExpired"): EventFragment;
}

export interface OrderCommittedEventObject {
  marketId: BigNumber;
  accountId: BigNumber;
  orderType: number;
  sizeDelta: BigNumber;
  acceptablePrice: BigNumber;
  commitmentTime: BigNumber;
  expectedPriceTime: BigNumber;
  settlementTime: BigNumber;
  expirationTime: BigNumber;
  trackingCode: string;
  sender: string;
}
export type OrderCommittedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  OrderCommittedEventObject
>;

export type OrderCommittedEventFilter = TypedEventFilter<OrderCommittedEvent>;

export interface PreviousOrderExpiredEventObject {
  marketId: BigNumber;
  accountId: BigNumber;
  sizeDelta: BigNumber;
  acceptablePrice: BigNumber;
  commitmentTime: BigNumber;
  trackingCode: string;
}
export type PreviousOrderExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  PreviousOrderExpiredEventObject
>;

export type PreviousOrderExpiredEventFilter =
  TypedEventFilter<PreviousOrderExpiredEvent>;

export interface AsyncOrderModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AsyncOrderModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commitOrder(
      commitment: AsyncOrder.OrderCommitmentRequestStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    computeOrderFees(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { orderFees: BigNumber; fillPrice: BigNumber }
    >;

    computeOrderFeesWithPrice(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { orderFees: BigNumber; fillPrice: BigNumber }
    >;

    getOrder(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [AsyncOrder.DataStructOutput] & { order: AsyncOrder.DataStructOutput }
    >;

    getSettlementRewardCost(
      marketId: BigNumberish,
      settlementStrategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requiredMarginForOrder(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredMargin: BigNumber }>;

    requiredMarginForOrderWithPrice(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredMargin: BigNumber }>;
  };

  commitOrder(
    commitment: AsyncOrder.OrderCommitmentRequestStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  computeOrderFees(
    marketId: BigNumberish,
    sizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { orderFees: BigNumber; fillPrice: BigNumber }
  >;

  computeOrderFeesWithPrice(
    marketId: BigNumberish,
    sizeDelta: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { orderFees: BigNumber; fillPrice: BigNumber }
  >;

  getOrder(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AsyncOrder.DataStructOutput>;

  getSettlementRewardCost(
    marketId: BigNumberish,
    settlementStrategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requiredMarginForOrder(
    accountId: BigNumberish,
    marketId: BigNumberish,
    sizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requiredMarginForOrderWithPrice(
    accountId: BigNumberish,
    marketId: BigNumberish,
    sizeDelta: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    commitOrder(
      commitment: AsyncOrder.OrderCommitmentRequestStruct,
      overrides?: CallOverrides
    ): Promise<
      [AsyncOrder.DataStructOutput, BigNumber] & {
        retOrder: AsyncOrder.DataStructOutput;
        fees: BigNumber;
      }
    >;

    computeOrderFees(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { orderFees: BigNumber; fillPrice: BigNumber }
    >;

    computeOrderFeesWithPrice(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { orderFees: BigNumber; fillPrice: BigNumber }
    >;

    getOrder(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AsyncOrder.DataStructOutput>;

    getSettlementRewardCost(
      marketId: BigNumberish,
      settlementStrategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredMarginForOrder(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredMarginForOrderWithPrice(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OrderCommitted(uint128,uint128,uint8,int128,uint256,uint256,uint256,uint256,uint256,bytes32,address)"(
      marketId?: BigNumberish | null,
      accountId?: BigNumberish | null,
      orderType?: null,
      sizeDelta?: null,
      acceptablePrice?: null,
      commitmentTime?: null,
      expectedPriceTime?: null,
      settlementTime?: null,
      expirationTime?: null,
      trackingCode?: BytesLike | null,
      sender?: null
    ): OrderCommittedEventFilter;
    OrderCommitted(
      marketId?: BigNumberish | null,
      accountId?: BigNumberish | null,
      orderType?: null,
      sizeDelta?: null,
      acceptablePrice?: null,
      commitmentTime?: null,
      expectedPriceTime?: null,
      settlementTime?: null,
      expirationTime?: null,
      trackingCode?: BytesLike | null,
      sender?: null
    ): OrderCommittedEventFilter;

    "PreviousOrderExpired(uint128,uint128,int128,uint256,uint256,bytes32)"(
      marketId?: BigNumberish | null,
      accountId?: BigNumberish | null,
      sizeDelta?: null,
      acceptablePrice?: null,
      commitmentTime?: null,
      trackingCode?: BytesLike | null
    ): PreviousOrderExpiredEventFilter;
    PreviousOrderExpired(
      marketId?: BigNumberish | null,
      accountId?: BigNumberish | null,
      sizeDelta?: null,
      acceptablePrice?: null,
      commitmentTime?: null,
      trackingCode?: BytesLike | null
    ): PreviousOrderExpiredEventFilter;
  };

  estimateGas: {
    commitOrder(
      commitment: AsyncOrder.OrderCommitmentRequestStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    computeOrderFees(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeOrderFeesWithPrice(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementRewardCost(
      marketId: BigNumberish,
      settlementStrategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredMarginForOrder(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredMarginForOrderWithPrice(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitOrder(
      commitment: AsyncOrder.OrderCommitmentRequestStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    computeOrderFees(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeOrderFeesWithPrice(
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementRewardCost(
      marketId: BigNumberish,
      settlementStrategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredMarginForOrder(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredMarginForOrderWithPrice(
      accountId: BigNumberish,
      marketId: BigNumberish,
      sizeDelta: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
