/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace SettlementStrategy {
  export type DataStruct = {
    strategyType: BigNumberish;
    settlementDelay: BigNumberish;
    settlementWindowDuration: BigNumberish;
    priceVerificationContract: string;
    feedId: BytesLike;
    settlementReward: BigNumberish;
    disabled: boolean;
    commitmentPriceDelay: BigNumberish;
  };

  export type DataStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    strategyType: number;
    settlementDelay: BigNumber;
    settlementWindowDuration: BigNumber;
    priceVerificationContract: string;
    feedId: string;
    settlementReward: BigNumber;
    disabled: boolean;
    commitmentPriceDelay: BigNumber;
  };
}

export interface MarketConfigurationModuleInterface extends utils.Interface {
  functions: {
    "addSettlementStrategy(uint128,(uint8,uint256,uint256,address,bytes32,uint256,bool,uint256))": FunctionFragment;
    "getFundingParameters(uint128)": FunctionFragment;
    "getLiquidationParameters(uint128)": FunctionFragment;
    "getLockedOiRatio(uint128)": FunctionFragment;
    "getMaxLiquidationParameters(uint128)": FunctionFragment;
    "getMaxMarketSize(uint128)": FunctionFragment;
    "getMaxMarketValue(uint128)": FunctionFragment;
    "getOrderFees(uint128)": FunctionFragment;
    "getPriceData(uint128)": FunctionFragment;
    "getSettlementStrategy(uint128,uint256)": FunctionFragment;
    "setFundingParameters(uint128,uint256,uint256)": FunctionFragment;
    "setLiquidationParameters(uint128,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setLockedOiRatio(uint128,uint256)": FunctionFragment;
    "setMaxLiquidationParameters(uint128,uint256,uint256,uint256,address)": FunctionFragment;
    "setMaxMarketSize(uint128,uint256)": FunctionFragment;
    "setMaxMarketValue(uint128,uint256)": FunctionFragment;
    "setOrderFees(uint128,uint256,uint256)": FunctionFragment;
    "setSettlementStrategy(uint128,uint256,(uint8,uint256,uint256,address,bytes32,uint256,bool,uint256))": FunctionFragment;
    "setSettlementStrategyEnabled(uint128,uint256,bool)": FunctionFragment;
    "updatePriceData(uint128,bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSettlementStrategy"
      | "getFundingParameters"
      | "getLiquidationParameters"
      | "getLockedOiRatio"
      | "getMaxLiquidationParameters"
      | "getMaxMarketSize"
      | "getMaxMarketValue"
      | "getOrderFees"
      | "getPriceData"
      | "getSettlementStrategy"
      | "setFundingParameters"
      | "setLiquidationParameters"
      | "setLockedOiRatio"
      | "setMaxLiquidationParameters"
      | "setMaxMarketSize"
      | "setMaxMarketValue"
      | "setOrderFees"
      | "setSettlementStrategy"
      | "setSettlementStrategyEnabled"
      | "updatePriceData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSettlementStrategy",
    values: [BigNumberish, SettlementStrategy.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingParameters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationParameters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedOiRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLiquidationParameters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMarketSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMarketValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementStrategy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedOiRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidationParameters",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMarketSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMarketValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementStrategy",
    values: [BigNumberish, BigNumberish, SettlementStrategy.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementStrategyEnabled",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceData",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSettlementStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedOiRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLiquidationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMarketSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMarketValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedOiRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMarketSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMarketValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementStrategyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceData",
    data: BytesLike
  ): Result;

  events: {
    "FundingParametersSet(uint128,uint256,uint256)": EventFragment;
    "LiquidationParametersSet(uint128,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LockedOiRatioSet(uint128,uint256)": EventFragment;
    "MarketPriceDataUpdated(uint128,bytes32,uint256)": EventFragment;
    "MaxLiquidationParametersSet(uint128,uint256,uint256,uint256,address)": EventFragment;
    "MaxMarketSizeSet(uint128,uint256)": EventFragment;
    "MaxMarketValueSet(uint128,uint256)": EventFragment;
    "OrderFeesSet(uint128,uint256,uint256)": EventFragment;
    "SettlementStrategyAdded(uint128,(uint8,uint256,uint256,address,bytes32,uint256,bool,uint256),uint256)": EventFragment;
    "SettlementStrategySet(uint128,uint256,(uint8,uint256,uint256,address,bytes32,uint256,bool,uint256))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundingParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedOiRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPriceDataUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxLiquidationParametersSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxMarketSizeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxMarketValueSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFeesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementStrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementStrategySet"): EventFragment;
}

export interface FundingParametersSetEventObject {
  marketId: BigNumber;
  skewScale: BigNumber;
  maxFundingVelocity: BigNumber;
}
export type FundingParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FundingParametersSetEventObject
>;

export type FundingParametersSetEventFilter =
  TypedEventFilter<FundingParametersSetEvent>;

export interface LiquidationParametersSetEventObject {
  marketId: BigNumber;
  initialMarginRatioD18: BigNumber;
  maintenanceMarginRatioD18: BigNumber;
  minimumInitialMarginRatioD18: BigNumber;
  flagRewardRatioD18: BigNumber;
  minimumPositionMargin: BigNumber;
}
export type LiquidationParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidationParametersSetEventObject
>;

export type LiquidationParametersSetEventFilter =
  TypedEventFilter<LiquidationParametersSetEvent>;

export interface LockedOiRatioSetEventObject {
  marketId: BigNumber;
  lockedOiRatioD18: BigNumber;
}
export type LockedOiRatioSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  LockedOiRatioSetEventObject
>;

export type LockedOiRatioSetEventFilter =
  TypedEventFilter<LockedOiRatioSetEvent>;

export interface MarketPriceDataUpdatedEventObject {
  marketId: BigNumber;
  feedId: string;
  strictStalenessTolerance: BigNumber;
}
export type MarketPriceDataUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  MarketPriceDataUpdatedEventObject
>;

export type MarketPriceDataUpdatedEventFilter =
  TypedEventFilter<MarketPriceDataUpdatedEvent>;

export interface MaxLiquidationParametersSetEventObject {
  marketId: BigNumber;
  maxLiquidationLimitAccumulationMultiplier: BigNumber;
  maxSecondsInLiquidationWindow: BigNumber;
  maxLiquidationPd: BigNumber;
  endorsedLiquidator: string;
}
export type MaxLiquidationParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  MaxLiquidationParametersSetEventObject
>;

export type MaxLiquidationParametersSetEventFilter =
  TypedEventFilter<MaxLiquidationParametersSetEvent>;

export interface MaxMarketSizeSetEventObject {
  marketId: BigNumber;
  maxMarketSize: BigNumber;
}
export type MaxMarketSizeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxMarketSizeSetEventObject
>;

export type MaxMarketSizeSetEventFilter =
  TypedEventFilter<MaxMarketSizeSetEvent>;

export interface MaxMarketValueSetEventObject {
  marketId: BigNumber;
  maxMarketValue: BigNumber;
}
export type MaxMarketValueSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxMarketValueSetEventObject
>;

export type MaxMarketValueSetEventFilter =
  TypedEventFilter<MaxMarketValueSetEvent>;

export interface OrderFeesSetEventObject {
  marketId: BigNumber;
  makerFeeRatio: BigNumber;
  takerFeeRatio: BigNumber;
}
export type OrderFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  OrderFeesSetEventObject
>;

export type OrderFeesSetEventFilter = TypedEventFilter<OrderFeesSetEvent>;

export interface SettlementStrategyAddedEventObject {
  marketId: BigNumber;
  strategy: SettlementStrategy.DataStructOutput;
  strategyId: BigNumber;
}
export type SettlementStrategyAddedEvent = TypedEvent<
  [BigNumber, SettlementStrategy.DataStructOutput, BigNumber],
  SettlementStrategyAddedEventObject
>;

export type SettlementStrategyAddedEventFilter =
  TypedEventFilter<SettlementStrategyAddedEvent>;

export interface SettlementStrategySetEventObject {
  marketId: BigNumber;
  strategyId: BigNumber;
  strategy: SettlementStrategy.DataStructOutput;
}
export type SettlementStrategySetEvent = TypedEvent<
  [BigNumber, BigNumber, SettlementStrategy.DataStructOutput],
  SettlementStrategySetEventObject
>;

export type SettlementStrategySetEventFilter =
  TypedEventFilter<SettlementStrategySetEvent>;

export interface MarketConfigurationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketConfigurationModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSettlementStrategy(
      marketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getFundingParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        skewScale: BigNumber;
        maxFundingVelocity: BigNumber;
      }
    >;

    getLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialMarginRatioD18: BigNumber;
        minimumInitialMarginRatioD18: BigNumber;
        maintenanceMarginScalarD18: BigNumber;
        flagRewardRatioD18: BigNumber;
        minimumPositionMargin: BigNumber;
      }
    >;

    getLockedOiRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        maxLiquidationLimitAccumulationMultiplier: BigNumber;
        maxSecondsInLiquidationWindow: BigNumber;
        maxLiquidationPd: BigNumber;
        endorsedLiquidator: string;
      }
    >;

    getMaxMarketSize(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxMarketSize: BigNumber }>;

    getMaxMarketValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxMarketValue: BigNumber }>;

    getOrderFees(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { makerFee: BigNumber; takerFee: BigNumber }
    >;

    getPriceData(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        feedId: string;
        strictStalenessTolerance: BigNumber;
      }
    >;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SettlementStrategy.DataStructOutput] & {
        settlementStrategy: SettlementStrategy.DataStructOutput;
      }
    >;

    setFundingParameters(
      marketId: BigNumberish,
      skewScale: BigNumberish,
      maxFundingVelocity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLiquidationParameters(
      marketId: BigNumberish,
      initialMarginRatioD18: BigNumberish,
      minimumInitialMarginRatioD18: BigNumberish,
      maintenanceMarginScalarD18: BigNumberish,
      flagRewardRatioD18: BigNumberish,
      minimumPositionMargin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLockedOiRatio(
      marketId: BigNumberish,
      lockedOiRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxLiquidationParameters(
      marketId: BigNumberish,
      maxLiquidationLimitAccumulationMultiplier: BigNumberish,
      maxSecondsInLiquidationWindow: BigNumberish,
      maxLiquidationPd: BigNumberish,
      endorsedLiquidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxMarketSize(
      marketId: BigNumberish,
      maxMarketSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxMarketValue(
      marketId: BigNumberish,
      maxMarketValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOrderFees(
      marketId: BigNumberish,
      makerFeeRatio: BigNumberish,
      takerFeeRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSettlementStrategyEnabled(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePriceData(
      perpsMarketId: BigNumberish,
      feedId: BytesLike,
      strictStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addSettlementStrategy(
    marketId: BigNumberish,
    strategy: SettlementStrategy.DataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getFundingParameters(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      skewScale: BigNumber;
      maxFundingVelocity: BigNumber;
    }
  >;

  getLiquidationParameters(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialMarginRatioD18: BigNumber;
      minimumInitialMarginRatioD18: BigNumber;
      maintenanceMarginScalarD18: BigNumber;
      flagRewardRatioD18: BigNumber;
      minimumPositionMargin: BigNumber;
    }
  >;

  getLockedOiRatio(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxLiquidationParameters(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      maxLiquidationLimitAccumulationMultiplier: BigNumber;
      maxSecondsInLiquidationWindow: BigNumber;
      maxLiquidationPd: BigNumber;
      endorsedLiquidator: string;
    }
  >;

  getMaxMarketSize(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxMarketValue(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderFees(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { makerFee: BigNumber; takerFee: BigNumber }
  >;

  getPriceData(
    perpsMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      feedId: string;
      strictStalenessTolerance: BigNumber;
    }
  >;

  getSettlementStrategy(
    marketId: BigNumberish,
    strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SettlementStrategy.DataStructOutput>;

  setFundingParameters(
    marketId: BigNumberish,
    skewScale: BigNumberish,
    maxFundingVelocity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLiquidationParameters(
    marketId: BigNumberish,
    initialMarginRatioD18: BigNumberish,
    minimumInitialMarginRatioD18: BigNumberish,
    maintenanceMarginScalarD18: BigNumberish,
    flagRewardRatioD18: BigNumberish,
    minimumPositionMargin: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLockedOiRatio(
    marketId: BigNumberish,
    lockedOiRatioD18: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxLiquidationParameters(
    marketId: BigNumberish,
    maxLiquidationLimitAccumulationMultiplier: BigNumberish,
    maxSecondsInLiquidationWindow: BigNumberish,
    maxLiquidationPd: BigNumberish,
    endorsedLiquidator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxMarketSize(
    marketId: BigNumberish,
    maxMarketSize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxMarketValue(
    marketId: BigNumberish,
    maxMarketValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOrderFees(
    marketId: BigNumberish,
    makerFeeRatio: BigNumberish,
    takerFeeRatio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSettlementStrategy(
    marketId: BigNumberish,
    strategyId: BigNumberish,
    strategy: SettlementStrategy.DataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSettlementStrategyEnabled(
    marketId: BigNumberish,
    strategyId: BigNumberish,
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePriceData(
    perpsMarketId: BigNumberish,
    feedId: BytesLike,
    strictStalenessTolerance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSettlementStrategy(
      marketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        skewScale: BigNumber;
        maxFundingVelocity: BigNumber;
      }
    >;

    getLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialMarginRatioD18: BigNumber;
        minimumInitialMarginRatioD18: BigNumber;
        maintenanceMarginScalarD18: BigNumber;
        flagRewardRatioD18: BigNumber;
        minimumPositionMargin: BigNumber;
      }
    >;

    getLockedOiRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        maxLiquidationLimitAccumulationMultiplier: BigNumber;
        maxSecondsInLiquidationWindow: BigNumber;
        maxLiquidationPd: BigNumber;
        endorsedLiquidator: string;
      }
    >;

    getMaxMarketSize(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxMarketValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderFees(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { makerFee: BigNumber; takerFee: BigNumber }
    >;

    getPriceData(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        feedId: string;
        strictStalenessTolerance: BigNumber;
      }
    >;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SettlementStrategy.DataStructOutput>;

    setFundingParameters(
      marketId: BigNumberish,
      skewScale: BigNumberish,
      maxFundingVelocity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationParameters(
      marketId: BigNumberish,
      initialMarginRatioD18: BigNumberish,
      minimumInitialMarginRatioD18: BigNumberish,
      maintenanceMarginScalarD18: BigNumberish,
      flagRewardRatioD18: BigNumberish,
      minimumPositionMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockedOiRatio(
      marketId: BigNumberish,
      lockedOiRatioD18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidationParameters(
      marketId: BigNumberish,
      maxLiquidationLimitAccumulationMultiplier: BigNumberish,
      maxSecondsInLiquidationWindow: BigNumberish,
      maxLiquidationPd: BigNumberish,
      endorsedLiquidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMarketSize(
      marketId: BigNumberish,
      maxMarketSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMarketValue(
      marketId: BigNumberish,
      maxMarketValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderFees(
      marketId: BigNumberish,
      makerFeeRatio: BigNumberish,
      takerFeeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementStrategyEnabled(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceData(
      perpsMarketId: BigNumberish,
      feedId: BytesLike,
      strictStalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundingParametersSet(uint128,uint256,uint256)"(
      marketId?: BigNumberish | null,
      skewScale?: null,
      maxFundingVelocity?: null
    ): FundingParametersSetEventFilter;
    FundingParametersSet(
      marketId?: BigNumberish | null,
      skewScale?: null,
      maxFundingVelocity?: null
    ): FundingParametersSetEventFilter;

    "LiquidationParametersSet(uint128,uint256,uint256,uint256,uint256,uint256)"(
      marketId?: BigNumberish | null,
      initialMarginRatioD18?: null,
      maintenanceMarginRatioD18?: null,
      minimumInitialMarginRatioD18?: null,
      flagRewardRatioD18?: null,
      minimumPositionMargin?: null
    ): LiquidationParametersSetEventFilter;
    LiquidationParametersSet(
      marketId?: BigNumberish | null,
      initialMarginRatioD18?: null,
      maintenanceMarginRatioD18?: null,
      minimumInitialMarginRatioD18?: null,
      flagRewardRatioD18?: null,
      minimumPositionMargin?: null
    ): LiquidationParametersSetEventFilter;

    "LockedOiRatioSet(uint128,uint256)"(
      marketId?: BigNumberish | null,
      lockedOiRatioD18?: null
    ): LockedOiRatioSetEventFilter;
    LockedOiRatioSet(
      marketId?: BigNumberish | null,
      lockedOiRatioD18?: null
    ): LockedOiRatioSetEventFilter;

    "MarketPriceDataUpdated(uint128,bytes32,uint256)"(
      marketId?: BigNumberish | null,
      feedId?: null,
      strictStalenessTolerance?: null
    ): MarketPriceDataUpdatedEventFilter;
    MarketPriceDataUpdated(
      marketId?: BigNumberish | null,
      feedId?: null,
      strictStalenessTolerance?: null
    ): MarketPriceDataUpdatedEventFilter;

    "MaxLiquidationParametersSet(uint128,uint256,uint256,uint256,address)"(
      marketId?: BigNumberish | null,
      maxLiquidationLimitAccumulationMultiplier?: null,
      maxSecondsInLiquidationWindow?: null,
      maxLiquidationPd?: null,
      endorsedLiquidator?: null
    ): MaxLiquidationParametersSetEventFilter;
    MaxLiquidationParametersSet(
      marketId?: BigNumberish | null,
      maxLiquidationLimitAccumulationMultiplier?: null,
      maxSecondsInLiquidationWindow?: null,
      maxLiquidationPd?: null,
      endorsedLiquidator?: null
    ): MaxLiquidationParametersSetEventFilter;

    "MaxMarketSizeSet(uint128,uint256)"(
      marketId?: BigNumberish | null,
      maxMarketSize?: null
    ): MaxMarketSizeSetEventFilter;
    MaxMarketSizeSet(
      marketId?: BigNumberish | null,
      maxMarketSize?: null
    ): MaxMarketSizeSetEventFilter;

    "MaxMarketValueSet(uint128,uint256)"(
      marketId?: BigNumberish | null,
      maxMarketValue?: null
    ): MaxMarketValueSetEventFilter;
    MaxMarketValueSet(
      marketId?: BigNumberish | null,
      maxMarketValue?: null
    ): MaxMarketValueSetEventFilter;

    "OrderFeesSet(uint128,uint256,uint256)"(
      marketId?: BigNumberish | null,
      makerFeeRatio?: null,
      takerFeeRatio?: null
    ): OrderFeesSetEventFilter;
    OrderFeesSet(
      marketId?: BigNumberish | null,
      makerFeeRatio?: null,
      takerFeeRatio?: null
    ): OrderFeesSetEventFilter;

    "SettlementStrategyAdded(uint128,(uint8,uint256,uint256,address,bytes32,uint256,bool,uint256),uint256)"(
      marketId?: BigNumberish | null,
      strategy?: null,
      strategyId?: BigNumberish | null
    ): SettlementStrategyAddedEventFilter;
    SettlementStrategyAdded(
      marketId?: BigNumberish | null,
      strategy?: null,
      strategyId?: BigNumberish | null
    ): SettlementStrategyAddedEventFilter;

    "SettlementStrategySet(uint128,uint256,(uint8,uint256,uint256,address,bytes32,uint256,bool,uint256))"(
      marketId?: BigNumberish | null,
      strategyId?: BigNumberish | null,
      strategy?: null
    ): SettlementStrategySetEventFilter;
    SettlementStrategySet(
      marketId?: BigNumberish | null,
      strategyId?: BigNumberish | null,
      strategy?: null
    ): SettlementStrategySetEventFilter;
  };

  estimateGas: {
    addSettlementStrategy(
      marketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getFundingParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedOiRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxMarketSize(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxMarketValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderFees(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFundingParameters(
      marketId: BigNumberish,
      skewScale: BigNumberish,
      maxFundingVelocity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLiquidationParameters(
      marketId: BigNumberish,
      initialMarginRatioD18: BigNumberish,
      minimumInitialMarginRatioD18: BigNumberish,
      maintenanceMarginScalarD18: BigNumberish,
      flagRewardRatioD18: BigNumberish,
      minimumPositionMargin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLockedOiRatio(
      marketId: BigNumberish,
      lockedOiRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxLiquidationParameters(
      marketId: BigNumberish,
      maxLiquidationLimitAccumulationMultiplier: BigNumberish,
      maxSecondsInLiquidationWindow: BigNumberish,
      maxLiquidationPd: BigNumberish,
      endorsedLiquidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxMarketSize(
      marketId: BigNumberish,
      maxMarketSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxMarketValue(
      marketId: BigNumberish,
      maxMarketValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOrderFees(
      marketId: BigNumberish,
      makerFeeRatio: BigNumberish,
      takerFeeRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSettlementStrategyEnabled(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePriceData(
      perpsMarketId: BigNumberish,
      feedId: BytesLike,
      strictStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSettlementStrategy(
      marketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getFundingParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedOiRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxLiquidationParameters(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxMarketSize(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxMarketValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderFees(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceData(
      perpsMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFundingParameters(
      marketId: BigNumberish,
      skewScale: BigNumberish,
      maxFundingVelocity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLiquidationParameters(
      marketId: BigNumberish,
      initialMarginRatioD18: BigNumberish,
      minimumInitialMarginRatioD18: BigNumberish,
      maintenanceMarginScalarD18: BigNumberish,
      flagRewardRatioD18: BigNumberish,
      minimumPositionMargin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLockedOiRatio(
      marketId: BigNumberish,
      lockedOiRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxLiquidationParameters(
      marketId: BigNumberish,
      maxLiquidationLimitAccumulationMultiplier: BigNumberish,
      maxSecondsInLiquidationWindow: BigNumberish,
      maxLiquidationPd: BigNumberish,
      endorsedLiquidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxMarketSize(
      marketId: BigNumberish,
      maxMarketSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxMarketValue(
      marketId: BigNumberish,
      maxMarketValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOrderFees(
      marketId: BigNumberish,
      makerFeeRatio: BigNumberish,
      takerFeeRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSettlementStrategyEnabled(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePriceData(
      perpsMarketId: BigNumberish,
      feedId: BytesLike,
      strictStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
