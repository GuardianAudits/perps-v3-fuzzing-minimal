/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICollateralConfigurationModule,
  ICollateralConfigurationModuleInterface,
} from "../../../../../@synthetixio/main/contracts/interfaces/ICollateralConfigurationModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "depositingEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "issuanceRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRewardD18",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "oracleNodeId",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minDelegationD18",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct CollateralConfiguration.Data",
        name: "config",
        type: "tuple",
      },
    ],
    name: "CollateralConfigured",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "depositingEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "issuanceRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRewardD18",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "oracleNodeId",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minDelegationD18",
            type: "uint256",
          },
        ],
        internalType: "struct CollateralConfiguration.Data",
        name: "config",
        type: "tuple",
      },
    ],
    name: "configureCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
    ],
    name: "getCollateralConfiguration",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "depositingEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "issuanceRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRewardD18",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "oracleNodeId",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minDelegationD18",
            type: "uint256",
          },
        ],
        internalType: "struct CollateralConfiguration.Data",
        name: "collateral",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "hideDisabled",
        type: "bool",
      },
    ],
    name: "getCollateralConfigurations",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "depositingEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "issuanceRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRatioD18",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationRewardD18",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "oracleNodeId",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minDelegationD18",
            type: "uint256",
          },
        ],
        internalType: "struct CollateralConfiguration.Data[]",
        name: "collaterals",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
    ],
    name: "getCollateralPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "priceD18",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ICollateralConfigurationModule__factory {
  static readonly abi = _abi;
  static createInterface(): ICollateralConfigurationModuleInterface {
    return new utils.Interface(_abi) as ICollateralConfigurationModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICollateralConfigurationModule {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ICollateralConfigurationModule;
  }
}
