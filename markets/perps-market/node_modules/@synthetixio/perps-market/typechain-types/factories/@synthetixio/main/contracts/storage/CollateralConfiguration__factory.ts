/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CollateralConfiguration,
  CollateralConfigurationInterface,
} from "../../../../../@synthetixio/main/contracts/storage/CollateralConfiguration";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
    ],
    name: "CollateralDepositDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "CollateralNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ratio",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minRatio",
        type: "uint256",
      },
    ],
    name: "InsufficientCollateralRatio",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minDelegation",
        type: "uint256",
      },
    ],
    name: "InsufficientDelegation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    name: "PrecisionLost",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122067f9b177540f4c4a3a5fd722a4b5d0aaaf2d67fe00036f6fa51f8e16f04f511864736f6c63430008160033";

type CollateralConfigurationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CollateralConfigurationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CollateralConfiguration__factory extends ContractFactory {
  constructor(...args: CollateralConfigurationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CollateralConfiguration> {
    return super.deploy(overrides || {}) as Promise<CollateralConfiguration>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CollateralConfiguration {
    return super.attach(address) as CollateralConfiguration;
  }
  override connect(signer: Signer): CollateralConfiguration__factory {
    return super.connect(signer) as CollateralConfiguration__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CollateralConfigurationInterface {
    return new utils.Interface(_abi) as CollateralConfigurationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CollateralConfiguration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CollateralConfiguration;
  }
}
