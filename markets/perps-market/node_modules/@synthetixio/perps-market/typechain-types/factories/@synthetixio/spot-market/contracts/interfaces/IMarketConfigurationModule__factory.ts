/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMarketConfigurationModule,
  IMarketConfigurationModuleInterface,
} from "../../../../../@synthetixio/spot-market/contracts/interfaces/IMarketConfigurationModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "invalidFeeCollector",
        type: "address",
      },
    ],
    name: "InvalidFeeCollectorInterface",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidWrapperFees",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "asyncFixedFee",
        type: "uint256",
      },
    ],
    name: "AsyncFixedFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "atomicFixedFee",
        type: "uint256",
      },
    ],
    name: "AtomicFixedFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collateralLeverage",
        type: "uint256",
      },
    ],
    name: "CollateralLeverageSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeCollector",
        type: "address",
      },
    ],
    name: "FeeCollectorSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "skewScale",
        type: "uint256",
      },
    ],
    name: "MarketSkewScaleSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "utilizationFeeRate",
        type: "uint256",
      },
    ],
    name: "MarketUtilizationFeesSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "address",
        name: "referrer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sharePercentage",
        type: "uint256",
      },
    ],
    name: "ReferrerShareUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "transactor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fixedFeeAmount",
        type: "uint256",
      },
    ],
    name: "TransactorFixedFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "wrapFee",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "unwrapFee",
        type: "int256",
      },
    ],
    name: "WrapperFeesSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
    ],
    name: "getCollateralLeverage",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralLeverage",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "transactor",
        type: "address",
      },
    ],
    name: "getCustomTransactorFees",
    outputs: [
      {
        internalType: "uint256",
        name: "fixedFeeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
    ],
    name: "getFeeCollector",
    outputs: [
      {
        internalType: "address",
        name: "feeCollector",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
    ],
    name: "getMarketFees",
    outputs: [
      {
        internalType: "uint256",
        name: "atomicFixedFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "asyncFixedFee",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "wrapFee",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "unwrapFee",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
    ],
    name: "getMarketSkewScale",
    outputs: [
      {
        internalType: "uint256",
        name: "skewScale",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
    ],
    name: "getMarketUtilizationFees",
    outputs: [
      {
        internalType: "uint256",
        name: "utilizationFeeRate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "getReferrerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "sharePercentage",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "asyncFixedFee",
        type: "uint256",
      },
    ],
    name: "setAsyncFixedFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "atomicFixedFee",
        type: "uint256",
      },
    ],
    name: "setAtomicFixedFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "collateralLeverage",
        type: "uint256",
      },
    ],
    name: "setCollateralLeverage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "transactor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fixedFeeAmount",
        type: "uint256",
      },
    ],
    name: "setCustomTransactorFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "feeCollector",
        type: "address",
      },
    ],
    name: "setFeeCollector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "skewScale",
        type: "uint256",
      },
    ],
    name: "setMarketSkewScale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "utilizationFeeRate",
        type: "uint256",
      },
    ],
    name: "setMarketUtilizationFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        internalType: "int256",
        name: "wrapFee",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "unwrapFee",
        type: "int256",
      },
    ],
    name: "setWrapperFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sharePercentage",
        type: "uint256",
      },
    ],
    name: "updateReferrerShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMarketConfigurationModule__factory {
  static readonly abi = _abi;
  static createInterface(): IMarketConfigurationModuleInterface {
    return new utils.Interface(_abi) as IMarketConfigurationModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMarketConfigurationModule {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IMarketConfigurationModule;
  }
}
