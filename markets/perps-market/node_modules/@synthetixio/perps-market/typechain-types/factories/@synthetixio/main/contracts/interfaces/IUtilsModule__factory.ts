/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IUtilsModule,
  IUtilsModuleInterface,
} from "../../../../../@synthetixio/main/contracts/interfaces/IUtilsModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "newChainId",
        type: "uint64",
      },
    ],
    name: "NewSupportedCrossChainNetwork",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ccipRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "ccipTokenPool",
        type: "address",
      },
    ],
    name: "configureChainlinkCrossChain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleManagerAddress",
        type: "address",
      },
    ],
    name: "configureOracleManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "k",
        type: "bytes32",
      },
    ],
    name: "getConfig",
    outputs: [
      {
        internalType: "bytes32",
        name: "v",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "k",
        type: "bytes32",
      },
    ],
    name: "getConfigAddress",
    outputs: [
      {
        internalType: "address",
        name: "v",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "k",
        type: "bytes32",
      },
    ],
    name: "getConfigUint",
    outputs: [
      {
        internalType: "uint256",
        name: "v",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "k",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "v",
        type: "bytes32",
      },
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64[]",
        name: "supportedNetworks",
        type: "uint64[]",
      },
      {
        internalType: "uint64[]",
        name: "ccipSelectors",
        type: "uint64[]",
      },
    ],
    name: "setSupportedCrossChainNetworks",
    outputs: [
      {
        internalType: "uint256",
        name: "numRegistered",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IUtilsModule__factory {
  static readonly abi = _abi;
  static createInterface(): IUtilsModuleInterface {
    return new utils.Interface(_abi) as IUtilsModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUtilsModule {
    return new Contract(address, _abi, signerOrProvider) as IUtilsModule;
  }
}
