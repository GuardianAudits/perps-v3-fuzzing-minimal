/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Pool,
  PoolInterface,
} from "../../../../../@synthetixio/main/contracts/storage/Pool";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "poolId",
        type: "uint128",
      },
      {
        internalType: "uint32",
        name: "timeRemaining",
        type: "uint32",
      },
    ],
    name: "MinDelegationTimeoutPending",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "poolId",
        type: "uint128",
      },
    ],
    name: "PoolAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "poolId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "collateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "currentCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxCollateral",
        type: "uint256",
      },
    ],
    name: "PoolCollateralLimitExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "poolId",
        type: "uint128",
      },
    ],
    name: "PoolNotFound",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fda1ee28f950c2c22207da52875637f1c6527e6e70ac11678f447c9604556c6564736f6c63430008160033";

type PoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Pool__factory extends ContractFactory {
  constructor(...args: PoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Pool> {
    return super.deploy(overrides || {}) as Promise<Pool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Pool {
    return super.attach(address) as Pool;
  }
  override connect(signer: Signer): Pool__factory {
    return super.connect(signer) as Pool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolInterface {
    return new utils.Interface(_abi) as PoolInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Pool {
    return new Contract(address, _abi, signerOrProvider) as Pool;
  }
}
