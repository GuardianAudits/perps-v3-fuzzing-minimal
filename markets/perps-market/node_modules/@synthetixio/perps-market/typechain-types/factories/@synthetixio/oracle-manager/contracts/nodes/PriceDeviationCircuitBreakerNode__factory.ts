/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PriceDeviationCircuitBreakerNode,
  PriceDeviationCircuitBreakerNodeInterface,
} from "../../../../../@synthetixio/oracle-manager/contracts/nodes/PriceDeviationCircuitBreakerNode";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "deviation",
        type: "int256",
      },
    ],
    name: "DeviationToleranceExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputPrice",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c660f2c92f3d8b806d4d88ee89458fcf7ed39885a98af7fe0e5afae1035fcc364736f6c63430008160033";

type PriceDeviationCircuitBreakerNodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceDeviationCircuitBreakerNodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceDeviationCircuitBreakerNode__factory extends ContractFactory {
  constructor(...args: PriceDeviationCircuitBreakerNodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<PriceDeviationCircuitBreakerNode> {
    return super.deploy(
      overrides || {}
    ) as Promise<PriceDeviationCircuitBreakerNode>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceDeviationCircuitBreakerNode {
    return super.attach(address) as PriceDeviationCircuitBreakerNode;
  }
  override connect(signer: Signer): PriceDeviationCircuitBreakerNode__factory {
    return super.connect(signer) as PriceDeviationCircuitBreakerNode__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceDeviationCircuitBreakerNodeInterface {
    return new utils.Interface(
      _abi
    ) as PriceDeviationCircuitBreakerNodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceDeviationCircuitBreakerNode {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PriceDeviationCircuitBreakerNode;
  }
}
