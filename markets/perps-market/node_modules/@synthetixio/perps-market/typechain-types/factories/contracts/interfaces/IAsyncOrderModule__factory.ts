/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAsyncOrderModule,
  IAsyncOrderModuleInterface,
} from "../../../contracts/interfaces/IAsyncOrderModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "enum SettlementStrategy.Type",
        name: "orderType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "int128",
        name: "sizeDelta",
        type: "int128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "acceptablePrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "commitmentTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expectedPriceTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "settlementTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "trackingCode",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "OrderCommitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "int128",
        name: "sizeDelta",
        type: "int128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "acceptablePrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "commitmentTime",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "trackingCode",
        type: "bytes32",
      },
    ],
    name: "PreviousOrderExpired",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "marketId",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "accountId",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "sizeDelta",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "settlementStrategyId",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "acceptablePrice",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "trackingCode",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
        ],
        internalType: "struct AsyncOrder.OrderCommitmentRequest",
        name: "commitment",
        type: "tuple",
      },
    ],
    name: "commitOrder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "commitmentTime",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "marketId",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "accountId",
                type: "uint128",
              },
              {
                internalType: "int128",
                name: "sizeDelta",
                type: "int128",
              },
              {
                internalType: "uint128",
                name: "settlementStrategyId",
                type: "uint128",
              },
              {
                internalType: "uint256",
                name: "acceptablePrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "trackingCode",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "referrer",
                type: "address",
              },
            ],
            internalType: "struct AsyncOrder.OrderCommitmentRequest",
            name: "request",
            type: "tuple",
          },
        ],
        internalType: "struct AsyncOrder.Data",
        name: "retOrder",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "sizeDelta",
        type: "int128",
      },
    ],
    name: "computeOrderFees",
    outputs: [
      {
        internalType: "uint256",
        name: "orderFees",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fillPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "sizeDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "computeOrderFeesWithPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "orderFees",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fillPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "commitmentTime",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "marketId",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "accountId",
                type: "uint128",
              },
              {
                internalType: "int128",
                name: "sizeDelta",
                type: "int128",
              },
              {
                internalType: "uint128",
                name: "settlementStrategyId",
                type: "uint128",
              },
              {
                internalType: "uint256",
                name: "acceptablePrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "trackingCode",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "referrer",
                type: "address",
              },
            ],
            internalType: "struct AsyncOrder.OrderCommitmentRequest",
            name: "request",
            type: "tuple",
          },
        ],
        internalType: "struct AsyncOrder.Data",
        name: "order",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "settlementStrategyId",
        type: "uint128",
      },
    ],
    name: "getSettlementRewardCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "sizeDelta",
        type: "int128",
      },
    ],
    name: "requiredMarginForOrder",
    outputs: [
      {
        internalType: "uint256",
        name: "requiredMargin",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "sizeDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "requiredMarginForOrderWithPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "requiredMargin",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IAsyncOrderModule__factory {
  static readonly abi = _abi;
  static createInterface(): IAsyncOrderModuleInterface {
    return new utils.Interface(_abi) as IAsyncOrderModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAsyncOrderModule {
    return new Contract(address, _abi, signerOrProvider) as IAsyncOrderModule;
  }
}
