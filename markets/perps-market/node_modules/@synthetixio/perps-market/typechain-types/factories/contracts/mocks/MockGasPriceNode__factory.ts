/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockGasPriceNode,
  MockGasPriceNodeInterface,
} from "../../../contracts/mocks/MockGasPriceNode";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "KIND_FLAG",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "KIND_LIQUIDATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "KIND_SETTLEMENT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "flagCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum NodeDefinition.NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "parameters",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "parents",
            type: "bytes32[]",
          },
        ],
        internalType: "struct NodeDefinition.Data",
        name: "nodeDefinition",
        type: "tuple",
      },
    ],
    name: "isValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidateCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse2",
            type: "uint256",
          },
        ],
        internalType: "struct NodeOutput.Data[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "runtimeKeys",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "runtimeValues",
        type: "bytes32[]",
      },
    ],
    name: "process",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse2",
            type: "uint256",
          },
        ],
        internalType: "struct NodeOutput.Data",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_settlementCost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_flagCost",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidateCost",
        type: "uint256",
      },
    ],
    name: "setCosts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "settlementCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107a9806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638b1cb4cb116100665780638b1cb4cb146100fc578063edc296fc1461011a578063efd9783e1461012d578063f24b1bcd14610136578063f65d3e181461013e57600080fd5b806301ffc9a7146100a35780630854ee2d146100cc57806324ab5a33146100e35780635ec6ecd4146100eb5780635f3fbe20146100f3575b600080fd5b6100b76100b1366004610347565b50600190565b60405190151581526020015b60405180910390f35b6100d560045481565b6040519081526020016100c3565b6100d5600281565b6100d5600181565b6100d560055481565b61011861010a366004610378565b600492909255600555600655565b005b6100b761012836600461053a565b610184565b6100d560065481565b6100d5600081565b61015161014c3660046105e2565b6101a2565b6040516100c391908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b600060028251600981111561019b5761019b61071c565b1492915050565b6101cd6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160808101825260008054825260015460208301526002549282019290925260035460608201529080805b86518110156102b75786818151811061021657610216610732565b60200260200101516c195e1958dd5d1a5bdb92da5b99609a1b036102585785818151811061024657610246610732565b602002602001015160001c92506102af565b86818151811061026a5761026a610732565b6020026020010151736e756d6265724f6655706461746564466565647360601b036102af578581815181106102a1576102a1610732565b602002602001015160001c91505b6001016101fb565b50816102c757600454835261033b565b600182036102e457806005546102dd9190610748565b835261033b565b600282036102f657600654835261033b565b60405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a5908195e1958dd5d1a5bdb881ada5b9960521b604482015260640160405180910390fd5b50909695505050505050565b60006020828403121561035957600080fd5b81356001600160e01b03198116811461037157600080fd5b9392505050565b60008060006060848603121561038d57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103dd576103dd6103a4565b60405290565b6040516080810167ffffffffffffffff811182821017156103dd576103dd6103a4565b604051601f8201601f1916810167ffffffffffffffff8111828210171561042f5761042f6103a4565b604052919050565b600082601f83011261044857600080fd5b813567ffffffffffffffff811115610462576104626103a4565b610475601f8201601f1916602001610406565b81815284602083860101111561048a57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156104c1576104c16103a4565b5060051b60200190565b600082601f8301126104dc57600080fd5b813560206104f16104ec836104a7565b610406565b8083825260208201915060208460051b87010193508684111561051357600080fd5b602086015b8481101561052f5780358352918301918301610518565b509695505050505050565b60006020828403121561054c57600080fd5b813567ffffffffffffffff8082111561056457600080fd5b908301906060828603121561057857600080fd5b6105806103ba565b8235600a811061058f57600080fd5b81526020830135828111156105a357600080fd5b6105af87828601610437565b6020830152506040830135828111156105c757600080fd5b6105d3878286016104cb565b60408301525095945050505050565b60008060008060808086880312156105f957600080fd5b853567ffffffffffffffff8082111561061157600080fd5b818801915088601f83011261062557600080fd5b813560206106356104ec836104a7565b82815260079290921b8401810191818101908c84111561065457600080fd5b948201945b838610156106a85786868e0312156106715760008081fd5b6106796103e3565b863581528387013584820152604080880135908201526060808801359082015282529486019490820190610659565b995050890135935050808311156106be57600080fd5b6106ca89848a01610437565b955060408801359250808311156106e057600080fd5b6106ec89848a016104cb565b9450606088013592508083111561070257600080fd5b5050610710878288016104cb565b91505092959194509250565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761076d57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220bc2bfed433e705686ef1a313d2387ba3937aace9b3b631cc57316792dd36ade764736f6c63430008160033";

type MockGasPriceNodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGasPriceNodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGasPriceNode__factory extends ContractFactory {
  constructor(...args: MockGasPriceNodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockGasPriceNode> {
    return super.deploy(overrides || {}) as Promise<MockGasPriceNode>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockGasPriceNode {
    return super.attach(address) as MockGasPriceNode;
  }
  override connect(signer: Signer): MockGasPriceNode__factory {
    return super.connect(signer) as MockGasPriceNode__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGasPriceNodeInterface {
    return new utils.Interface(_abi) as MockGasPriceNodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockGasPriceNode {
    return new Contract(address, _abi, signerOrProvider) as MockGasPriceNode;
  }
}
