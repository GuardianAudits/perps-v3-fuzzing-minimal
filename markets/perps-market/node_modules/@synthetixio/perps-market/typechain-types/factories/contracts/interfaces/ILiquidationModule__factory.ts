/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILiquidationModule,
  ILiquidationModuleInterface,
} from "../../../contracts/interfaces/ILiquidationModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "AccountHasOpenPositions",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "NotEligibleForLiquidation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "NotEligibleForMarginLiquidation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "availableMargin",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requiredMaintenanceMargin",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidationReward",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "flagReward",
        type: "uint256",
      },
    ],
    name: "AccountFlaggedForLiquidation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "fullLiquidation",
        type: "bool",
      },
    ],
    name: "AccountLiquidationAttempt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "seizedMarginValue",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidationReward",
        type: "uint256",
      },
    ],
    name: "AccountMarginLiquidation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountLiquidated",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int128",
        name: "currentPositionSize",
        type: "int128",
      },
    ],
    name: "PositionLiquidated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "canLiquidate",
    outputs: [
      {
        internalType: "bool",
        name: "isEligible",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "canLiquidateMarginOnly",
    outputs: [
      {
        internalType: "bool",
        name: "isEligible",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "flaggedAccounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "accountIds",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "liquidate",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidationReward",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxNumberOfAccounts",
        type: "uint256",
      },
    ],
    name: "liquidateFlagged",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidationReward",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128[]",
        name: "accountIds",
        type: "uint128[]",
      },
    ],
    name: "liquidateFlaggedAccounts",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidationReward",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "liquidateMarginOnly",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidationReward",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
    ],
    name: "liquidationCapacity",
    outputs: [
      {
        internalType: "uint256",
        name: "capacity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxLiquidationInWindow",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "latestLiquidationTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ILiquidationModule__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidationModuleInterface {
    return new utils.Interface(_abi) as ILiquidationModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILiquidationModule {
    return new Contract(address, _abi, signerOrProvider) as ILiquidationModule;
  }
}
