/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Flags, FlagsInterface } from "../../../contracts/utils/Flags";

const _abi = [
  {
    inputs: [],
    name: "CREATE_MARKET",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERPS_SYSTEM",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60b3610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063b644257f146042578063b9198ae7146069575b600080fd5b60576b18dc99585d1953585c9ad95d60a21b81565b60405190815260200160405180910390f35b60576a706572707353797374656d60a81b8156fea2646970667358221220893abacd1e8977e32bd563bc2a7e5a5e6fc25cd889ee3ddb6e73a413f5887e3f64736f6c63430008160033";

type FlagsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FlagsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Flags__factory extends ContractFactory {
  constructor(...args: FlagsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Flags> {
    return super.deploy(overrides || {}) as Promise<Flags>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Flags {
    return super.attach(address) as Flags;
  }
  override connect(signer: Signer): Flags__factory {
    return super.connect(signer) as Flags__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlagsInterface {
    return new utils.Interface(_abi) as FlagsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Flags {
    return new Contract(address, _abi, signerOrProvider) as Flags;
  }
}
