/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FeeCollectorMock,
  FeeCollectorMockInterface,
} from "../../../contracts/mocks/FeeCollectorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_feeRatio",
        type: "uint256",
      },
    ],
    name: "mockSetFeeRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "quoteFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610230806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063ba624acb1461006e578063bf5b74a014610083575b600080fd5b610059610054366004610106565b6100a4565b60405190151581526020015b60405180910390f35b61008161007c366004610137565b600055565b005b610096610091366004610150565b6100db565b604051908152602001610065565b60006001600160e01b031982166305fadba560e51b14806100d557506001600160e01b031982166301ffc9a760e01b145b92915050565b6000670de0b6b3a7640000600054846100f491906101b3565b6100fe91906101d8565b949350505050565b60006020828403121561011857600080fd5b81356001600160e01b03198116811461013057600080fd5b9392505050565b60006020828403121561014957600080fd5b5035919050565b60008060006060848603121561016557600080fd5b83356fffffffffffffffffffffffffffffffff8116811461018557600080fd5b92506020840135915060408401356001600160a01b03811681146101a857600080fd5b809150509250925092565b80820281158282048414176100d557634e487b7160e01b600052601160045260246000fd5b6000826101f557634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c9897a31689a3d9f539a0e65fa2882140d254d79ddefa8472204e8cfcfb56b2264736f6c63430008160033";

type FeeCollectorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeCollectorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeCollectorMock__factory extends ContractFactory {
  constructor(...args: FeeCollectorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<FeeCollectorMock> {
    return super.deploy(overrides || {}) as Promise<FeeCollectorMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeCollectorMock {
    return super.attach(address) as FeeCollectorMock;
  }
  override connect(signer: Signer): FeeCollectorMock__factory {
    return super.connect(signer) as FeeCollectorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeCollectorMockInterface {
    return new utils.Interface(_abi) as FeeCollectorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeCollectorMock {
    return new Contract(address, _abi, signerOrProvider) as FeeCollectorMock;
  }
}
