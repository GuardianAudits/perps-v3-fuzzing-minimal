/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PerpsAccount,
  PerpsAccountInterface,
} from "../../../contracts/storage/PerpsAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "AccountLiquidatable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "AccountMarginLiquidatable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "leftover",
        type: "uint256",
      },
    ],
    name: "InsufficientAccountMargin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "withdrawableMarginUsd",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "requestedMarginUsd",
        type: "uint256",
      },
    ],
    name: "InsufficientCollateralAvailableForWithdraw",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "collateralId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256",
      },
    ],
    name: "InsufficientSynthCollateral",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "maxCollateralsPerAccount",
        type: "uint128",
      },
    ],
    name: "MaxCollateralsPerAccountReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "maxPositionsPerAccount",
        type: "uint128",
      },
    ],
    name: "MaxPositionsPerAccountReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "accountId",
        type: "uint128",
      },
    ],
    name: "NonexistentDebt",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c1abc304994c89d4a9209773f78618f4e05c2b6f0ae6e8cb70b28b96adca0b5a64736f6c63430008160033";

type PerpsAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PerpsAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PerpsAccount__factory extends ContractFactory {
  constructor(...args: PerpsAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<PerpsAccount> {
    return super.deploy(overrides || {}) as Promise<PerpsAccount>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PerpsAccount {
    return super.attach(address) as PerpsAccount;
  }
  override connect(signer: Signer): PerpsAccount__factory {
    return super.connect(signer) as PerpsAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PerpsAccountInterface {
    return new utils.Interface(_abi) as PerpsAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PerpsAccount {
    return new Contract(address, _abi, signerOrProvider) as PerpsAccount;
  }
}
