/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace NodeDefinition {
  export type DataStruct = {
    nodeType: BigNumberish;
    parameters: BytesLike;
    parents: BytesLike[];
  };

  export type DataStructOutput = [number, string, string[]] & {
    nodeType: number;
    parameters: string;
    parents: string[];
  };
}

export declare namespace NodeOutput {
  export type DataStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    __slotAvailableForFutureUse1: BigNumberish;
    __slotAvailableForFutureUse2: BigNumberish;
  };

  export type DataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    price: BigNumber;
    timestamp: BigNumber;
    __slotAvailableForFutureUse1: BigNumber;
    __slotAvailableForFutureUse2: BigNumber;
  };
}

export interface MockPythExternalNodeInterface extends utils.Interface {
  functions: {
    "getCurrentPrice()": FunctionFragment;
    "isValid((uint8,bytes,bytes32[]))": FunctionFragment;
    "mockSetCurrentPrice(uint256)": FunctionFragment;
    "mockSetMonthlyTolerancePrice(uint256)": FunctionFragment;
    "process((int256,uint256,uint256,uint256)[],bytes,bytes32[],bytes32[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentPrice"
      | "isValid"
      | "mockSetCurrentPrice"
      | "mockSetMonthlyTolerancePrice"
      | "process"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValid",
    values: [NodeDefinition.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetCurrentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetMonthlyTolerancePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [NodeOutput.DataStruct[], BytesLike, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSetCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetMonthlyTolerancePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockPythExternalNode extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockPythExternalNodeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isValid(
      arg0: NodeDefinition.DataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mockSetCurrentPrice(
      currentPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mockSetMonthlyTolerancePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    process(
      arg0: NodeOutput.DataStruct[],
      arg1: BytesLike,
      arg2: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[NodeOutput.DataStructOutput]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isValid(
    arg0: NodeDefinition.DataStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mockSetCurrentPrice(
    currentPrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mockSetMonthlyTolerancePrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  process(
    arg0: NodeOutput.DataStruct[],
    arg1: BytesLike,
    arg2: BytesLike[],
    runtimeValues: BytesLike[],
    overrides?: CallOverrides
  ): Promise<NodeOutput.DataStructOutput>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isValid(
      arg0: NodeDefinition.DataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mockSetCurrentPrice(
      currentPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetMonthlyTolerancePrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    process(
      arg0: NodeOutput.DataStruct[],
      arg1: BytesLike,
      arg2: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<NodeOutput.DataStructOutput>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isValid(
      arg0: NodeDefinition.DataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockSetCurrentPrice(
      currentPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mockSetMonthlyTolerancePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    process(
      arg0: NodeOutput.DataStruct[],
      arg1: BytesLike,
      arg2: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValid(
      arg0: NodeDefinition.DataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockSetCurrentPrice(
      currentPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mockSetMonthlyTolerancePrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    process(
      arg0: NodeOutput.DataStruct[],
      arg1: BytesLike,
      arg2: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
