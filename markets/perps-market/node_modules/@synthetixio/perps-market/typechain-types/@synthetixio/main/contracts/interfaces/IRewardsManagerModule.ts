/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IRewardsManagerModuleInterface extends utils.Interface {
  functions: {
    "claimRewards(uint128,uint128,address,address)": FunctionFragment;
    "distributeRewards(uint128,address,uint256,uint64,uint32)": FunctionFragment;
    "distributeRewardsByOwner(uint128,address,address,uint256,uint64,uint32)": FunctionFragment;
    "getAvailableRewards(uint128,uint128,address,address)": FunctionFragment;
    "getRewardRate(uint128,address,address)": FunctionFragment;
    "registerRewardsDistributor(uint128,address,address)": FunctionFragment;
    "removeRewardsDistributor(uint128,address,address)": FunctionFragment;
    "updateRewards(uint128,address,uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "distributeRewards"
      | "distributeRewardsByOwner"
      | "getAvailableRewards"
      | "getRewardRate"
      | "registerRewardsDistributor"
      | "removeRewardsDistributor"
      | "updateRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewardsByOwner",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableRewards",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardRate",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRewardsDistributor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardsDistributor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewardsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;

  events: {
    "RewardsClaimed(uint128,uint128,address,address,uint256)": EventFragment;
    "RewardsDistributed(uint128,address,address,uint256,uint256,uint256)": EventFragment;
    "RewardsDistributorRegistered(uint128,address,address)": EventFragment;
    "RewardsDistributorRemoved(uint128,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardsDistributorRegistered"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributorRemoved"): EventFragment;
}

export interface RewardsClaimedEventObject {
  accountId: BigNumber;
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsDistributedEventObject {
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
  amount: BigNumber;
  start: BigNumber;
  duration: BigNumber;
}
export type RewardsDistributedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface RewardsDistributorRegisteredEventObject {
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
}
export type RewardsDistributorRegisteredEvent = TypedEvent<
  [BigNumber, string, string],
  RewardsDistributorRegisteredEventObject
>;

export type RewardsDistributorRegisteredEventFilter =
  TypedEventFilter<RewardsDistributorRegisteredEvent>;

export interface RewardsDistributorRemovedEventObject {
  poolId: BigNumber;
  collateralType: string;
  distributor: string;
}
export type RewardsDistributorRemovedEvent = TypedEvent<
  [BigNumber, string, string],
  RewardsDistributorRemovedEventObject
>;

export type RewardsDistributorRemovedEventFilter =
  TypedEventFilter<RewardsDistributorRemovedEvent>;

export interface IRewardsManagerModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsManagerModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeRewardsByOwner(
      poolId: BigNumberish,
      collateralType: string,
      rewardsDistributor: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAvailableRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardAmount: BigNumber }>;

    getRewardRate(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rateD18: BigNumber }>;

    registerRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRewards(
      poolId: BigNumberish,
      collateralType: string,
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeRewards(
    poolId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    start: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeRewardsByOwner(
    poolId: BigNumberish,
    collateralType: string,
    rewardsDistributor: string,
    amount: BigNumberish,
    start: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAvailableRewards(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    distributor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardRate(
    poolId: BigNumberish,
    collateralType: string,
    distributor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerRewardsDistributor(
    poolId: BigNumberish,
    collateralType: string,
    distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeRewardsDistributor(
    poolId: BigNumberish,
    collateralType: string,
    distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRewards(
    poolId: BigNumberish,
    collateralType: string,
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeRewardsByOwner(
      poolId: BigNumberish,
      collateralType: string,
      rewardsDistributor: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardRate(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(
      poolId: BigNumberish,
      collateralType: string,
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & {
        claimableD18: BigNumber[];
        distributors: string[];
      }
    >;
  };

  filters: {
    "RewardsClaimed(uint128,uint128,address,address,uint256)"(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "RewardsDistributed(uint128,address,address,uint256,uint256,uint256)"(
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: null,
      amount?: null,
      start?: null,
      duration?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: null,
      amount?: null,
      start?: null,
      duration?: null
    ): RewardsDistributedEventFilter;

    "RewardsDistributorRegistered(uint128,address,address)"(
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: string | null
    ): RewardsDistributorRegisteredEventFilter;
    RewardsDistributorRegistered(
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: string | null
    ): RewardsDistributorRegisteredEventFilter;

    "RewardsDistributorRemoved(uint128,address,address)"(
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: string | null
    ): RewardsDistributorRemovedEventFilter;
    RewardsDistributorRemoved(
      poolId?: BigNumberish | null,
      collateralType?: string | null,
      distributor?: string | null
    ): RewardsDistributorRemovedEventFilter;
  };

  estimateGas: {
    claimRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeRewardsByOwner(
      poolId: BigNumberish,
      collateralType: string,
      rewardsDistributor: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAvailableRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardRate(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRewards(
      poolId: BigNumberish,
      collateralType: string,
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeRewardsByOwner(
      poolId: BigNumberish,
      collateralType: string,
      rewardsDistributor: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAvailableRewards(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardRate(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeRewardsDistributor(
      poolId: BigNumberish,
      collateralType: string,
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRewards(
      poolId: BigNumberish,
      collateralType: string,
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
