/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IVaultModuleInterface extends utils.Interface {
  functions: {
    "delegateCollateral(uint128,uint128,address,uint256,uint256)": FunctionFragment;
    "getPosition(uint128,uint128,address)": FunctionFragment;
    "getPositionCollateral(uint128,uint128,address)": FunctionFragment;
    "getPositionCollateralRatio(uint128,uint128,address)": FunctionFragment;
    "getPositionDebt(uint128,uint128,address)": FunctionFragment;
    "getVaultCollateral(uint128,address)": FunctionFragment;
    "getVaultCollateralRatio(uint128,address)": FunctionFragment;
    "getVaultDebt(uint128,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "delegateCollateral"
      | "getPosition"
      | "getPositionCollateral"
      | "getPositionCollateralRatio"
      | "getPositionDebt"
      | "getVaultCollateral"
      | "getVaultCollateralRatio"
      | "getVaultDebt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "delegateCollateral",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionCollateral",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionCollateralRatio",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDebt",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateralRatio",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDebt",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "delegateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDebt",
    data: BytesLike
  ): Result;

  events: {
    "DelegationUpdated(uint128,uint128,address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegationUpdated"): EventFragment;
}

export interface DelegationUpdatedEventObject {
  accountId: BigNumber;
  poolId: BigNumber;
  collateralType: string;
  amount: BigNumber;
  leverage: BigNumber;
  sender: string;
}
export type DelegationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string],
  DelegationUpdatedEventObject
>;

export type DelegationUpdatedEventFilter =
  TypedEventFilter<DelegationUpdatedEvent>;

export interface IVaultModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralAmountD18: BigNumber }>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountD18: BigNumber;
        collateralValueD18: BigNumber;
      }
    >;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  delegateCollateral(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPosition(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPositionCollateral(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionCollateralRatio(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPositionDebt(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVaultCollateral(
    poolId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralAmountD18: BigNumber;
      collateralValueD18: BigNumber;
    }
  >;

  getVaultCollateralRatio(
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVaultDebt(
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralAmountD18: BigNumber;
        collateralValueD18: BigNumber;
        debtD18: BigNumber;
        collateralizationRatioD18: BigNumber;
      }
    >;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountD18: BigNumber;
        collateralValueD18: BigNumber;
      }
    >;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DelegationUpdated(uint128,uint128,address,uint256,uint256,address)"(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      collateralType?: null,
      amount?: null,
      leverage?: null,
      sender?: string | null
    ): DelegationUpdatedEventFilter;
    DelegationUpdated(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      collateralType?: null,
      amount?: null,
      leverage?: null,
      sender?: string | null
    ): DelegationUpdatedEventFilter;
  };

  estimateGas: {
    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
