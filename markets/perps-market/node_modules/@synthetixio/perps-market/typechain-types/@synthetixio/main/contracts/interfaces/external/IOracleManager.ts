/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export declare namespace NodeDefinition {
  export type DataStruct = {
    nodeType: BigNumberish;
    parameters: BytesLike;
    parents: BytesLike[];
  };

  export type DataStructOutput = [number, string, string[]] & {
    nodeType: number;
    parameters: string;
    parents: string[];
  };
}

export declare namespace NodeOutput {
  export type DataStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    __slotAvailableForFutureUse1: BigNumberish;
    __slotAvailableForFutureUse2: BigNumberish;
  };

  export type DataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    price: BigNumber;
    timestamp: BigNumber;
    __slotAvailableForFutureUse1: BigNumber;
    __slotAvailableForFutureUse2: BigNumber;
  };
}

export interface IOracleManagerInterface extends utils.Interface {
  functions: {
    "getNode(bytes32)": FunctionFragment;
    "getNodeId(uint8,bytes,bytes32[])": FunctionFragment;
    "process(bytes32)": FunctionFragment;
    "processWithRuntime(bytes32,bytes32[],bytes32[])": FunctionFragment;
    "registerNode(uint8,bytes,bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getNode"
      | "getNodeId"
      | "process"
      | "processWithRuntime"
      | "registerNode"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getNode", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getNodeId",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "process", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "processWithRuntime",
    values: [BytesLike, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNodeId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processWithRuntime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;

  events: {
    "NodeRegistered(bytes32,uint8,bytes,bytes32[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
}

export interface NodeRegisteredEventObject {
  nodeId: string;
  nodeType: number;
  parameters: string;
  parents: string[];
}
export type NodeRegisteredEvent = TypedEvent<
  [string, number, string, string[]],
  NodeRegisteredEventObject
>;

export type NodeRegisteredEventFilter = TypedEventFilter<NodeRegisteredEvent>;

export interface IOracleManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOracleManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getNode(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [NodeDefinition.DataStructOutput] & {
        node: NodeDefinition.DataStructOutput;
      }
    >;

    getNodeId(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { nodeId: string }>;

    process(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [NodeOutput.DataStructOutput] & { node: NodeOutput.DataStructOutput }
    >;

    processWithRuntime(
      nodeId: BytesLike,
      runtimeKeys: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [NodeOutput.DataStructOutput] & { node: NodeOutput.DataStructOutput }
    >;

    registerNode(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getNode(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<NodeDefinition.DataStructOutput>;

  getNodeId(
    nodeType: BigNumberish,
    parameters: BytesLike,
    parents: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  process(
    nodeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<NodeOutput.DataStructOutput>;

  processWithRuntime(
    nodeId: BytesLike,
    runtimeKeys: BytesLike[],
    runtimeValues: BytesLike[],
    overrides?: CallOverrides
  ): Promise<NodeOutput.DataStructOutput>;

  registerNode(
    nodeType: BigNumberish,
    parameters: BytesLike,
    parents: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getNode(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<NodeDefinition.DataStructOutput>;

    getNodeId(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    process(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<NodeOutput.DataStructOutput>;

    processWithRuntime(
      nodeId: BytesLike,
      runtimeKeys: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<NodeOutput.DataStructOutput>;

    registerNode(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NodeRegistered(bytes32,uint8,bytes,bytes32[])"(
      nodeId?: null,
      nodeType?: null,
      parameters?: null,
      parents?: null
    ): NodeRegisteredEventFilter;
    NodeRegistered(
      nodeId?: null,
      nodeType?: null,
      parameters?: null,
      parents?: null
    ): NodeRegisteredEventFilter;
  };

  estimateGas: {
    getNode(nodeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getNodeId(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    process(nodeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    processWithRuntime(
      nodeId: BytesLike,
      runtimeKeys: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerNode(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNode(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeId(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    process(
      nodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processWithRuntime(
      nodeId: BytesLike,
      runtimeKeys: BytesLike[],
      runtimeValues: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNode(
      nodeType: BigNumberish,
      parameters: BytesLike,
      parents: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
