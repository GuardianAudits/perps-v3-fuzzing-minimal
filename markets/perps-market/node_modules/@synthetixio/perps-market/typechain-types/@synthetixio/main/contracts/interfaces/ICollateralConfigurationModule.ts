/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace CollateralConfiguration {
  export type DataStruct = {
    depositingEnabled: boolean;
    issuanceRatioD18: BigNumberish;
    liquidationRatioD18: BigNumberish;
    liquidationRewardD18: BigNumberish;
    oracleNodeId: BytesLike;
    tokenAddress: string;
    minDelegationD18: BigNumberish;
  };

  export type DataStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    depositingEnabled: boolean;
    issuanceRatioD18: BigNumber;
    liquidationRatioD18: BigNumber;
    liquidationRewardD18: BigNumber;
    oracleNodeId: string;
    tokenAddress: string;
    minDelegationD18: BigNumber;
  };
}

export interface ICollateralConfigurationModuleInterface
  extends utils.Interface {
  functions: {
    "configureCollateral((bool,uint256,uint256,uint256,bytes32,address,uint256))": FunctionFragment;
    "getCollateralConfiguration(address)": FunctionFragment;
    "getCollateralConfigurations(bool)": FunctionFragment;
    "getCollateralPrice(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configureCollateral"
      | "getCollateralConfiguration"
      | "getCollateralConfigurations"
      | "getCollateralPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configureCollateral",
    values: [CollateralConfiguration.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralConfigurations",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPrice",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPrice",
    data: BytesLike
  ): Result;

  events: {
    "CollateralConfigured(address,(bool,uint256,uint256,uint256,bytes32,address,uint256))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralConfigured"): EventFragment;
}

export interface CollateralConfiguredEventObject {
  collateralType: string;
  config: CollateralConfiguration.DataStructOutput;
}
export type CollateralConfiguredEvent = TypedEvent<
  [string, CollateralConfiguration.DataStructOutput],
  CollateralConfiguredEventObject
>;

export type CollateralConfiguredEventFilter =
  TypedEventFilter<CollateralConfiguredEvent>;

export interface ICollateralConfigurationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICollateralConfigurationModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [CollateralConfiguration.DataStructOutput] & {
        collateral: CollateralConfiguration.DataStructOutput;
      }
    >;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<
      [CollateralConfiguration.DataStructOutput[]] & {
        collaterals: CollateralConfiguration.DataStructOutput[];
      }
    >;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceD18: BigNumber }>;
  };

  configureCollateral(
    config: CollateralConfiguration.DataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCollateralConfiguration(
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<CollateralConfiguration.DataStructOutput>;

  getCollateralConfigurations(
    hideDisabled: boolean,
    overrides?: CallOverrides
  ): Promise<CollateralConfiguration.DataStructOutput[]>;

  getCollateralPrice(
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<CollateralConfiguration.DataStructOutput>;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<CollateralConfiguration.DataStructOutput[]>;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CollateralConfigured(address,(bool,uint256,uint256,uint256,bytes32,address,uint256))"(
      collateralType?: string | null,
      config?: null
    ): CollateralConfiguredEventFilter;
    CollateralConfigured(
      collateralType?: string | null,
      config?: null
    ): CollateralConfiguredEventFilter;
  };

  estimateGas: {
    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
