/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export declare namespace CollateralLock {
  export type DataStruct = {
    amountD18: BigNumberish;
    lockExpirationTime: BigNumberish;
  };

  export type DataStructOutput = [BigNumber, BigNumber] & {
    amountD18: BigNumber;
    lockExpirationTime: BigNumber;
  };
}

export interface ICollateralModuleInterface extends utils.Interface {
  functions: {
    "cleanExpiredLocks(uint128,address,uint256,uint256)": FunctionFragment;
    "createLock(uint128,address,uint256,uint64)": FunctionFragment;
    "deposit(uint128,address,uint256)": FunctionFragment;
    "getAccountAvailableCollateral(uint128,address)": FunctionFragment;
    "getAccountCollateral(uint128,address)": FunctionFragment;
    "getLocks(uint128,address,uint256,uint256)": FunctionFragment;
    "withdraw(uint128,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cleanExpiredLocks"
      | "createLock"
      | "deposit"
      | "getAccountAvailableCollateral"
      | "getAccountCollateral"
      | "getLocks"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cleanExpiredLocks",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountAvailableCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocks",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cleanExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAvailableCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CollateralLockCreated(uint128,address,uint256,uint64)": EventFragment;
    "CollateralLockExpired(uint128,address,uint256,uint64)": EventFragment;
    "Deposited(uint128,address,uint256,address)": EventFragment;
    "Withdrawn(uint128,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralLockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLockExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface CollateralLockCreatedEventObject {
  accountId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  expireTimestamp: BigNumber;
}
export type CollateralLockCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  CollateralLockCreatedEventObject
>;

export type CollateralLockCreatedEventFilter =
  TypedEventFilter<CollateralLockCreatedEvent>;

export interface CollateralLockExpiredEventObject {
  accountId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  expireTimestamp: BigNumber;
}
export type CollateralLockExpiredEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  CollateralLockExpiredEventObject
>;

export type CollateralLockExpiredEventFilter =
  TypedEventFilter<CollateralLockExpiredEvent>;

export interface DepositedEventObject {
  accountId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
}
export type DepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface WithdrawnEventObject {
  accountId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
}
export type WithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface ICollateralModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICollateralModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cleanExpiredLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createLock(
      accountId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccountAvailableCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountD18: BigNumber }>;

    getAccountCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalDeposited: BigNumber;
        totalAssigned: BigNumber;
        totalLocked: BigNumber;
      }
    >;

    getLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CollateralLock.DataStructOutput[]] & {
        locks: CollateralLock.DataStructOutput[];
      }
    >;

    withdraw(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cleanExpiredLocks(
    accountId: BigNumberish,
    collateralType: string,
    offset: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createLock(
    accountId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    expireTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    accountId: BigNumberish,
    collateralType: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccountAvailableCollateral(
    accountId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountCollateral(
    accountId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalDeposited: BigNumber;
      totalAssigned: BigNumber;
      totalLocked: BigNumber;
    }
  >;

  getLocks(
    accountId: BigNumberish,
    collateralType: string,
    offset: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CollateralLock.DataStructOutput[]>;

  withdraw(
    accountId: BigNumberish,
    collateralType: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cleanExpiredLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLock(
      accountId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountAvailableCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalDeposited: BigNumber;
        totalAssigned: BigNumber;
        totalLocked: BigNumber;
      }
    >;

    getLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CollateralLock.DataStructOutput[]>;

    withdraw(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralLockCreated(uint128,address,uint256,uint64)"(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      expireTimestamp?: null
    ): CollateralLockCreatedEventFilter;
    CollateralLockCreated(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      expireTimestamp?: null
    ): CollateralLockCreatedEventFilter;

    "CollateralLockExpired(uint128,address,uint256,uint64)"(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      expireTimestamp?: null
    ): CollateralLockExpiredEventFilter;
    CollateralLockExpired(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      expireTimestamp?: null
    ): CollateralLockExpiredEventFilter;

    "Deposited(uint128,address,uint256,address)"(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null
    ): DepositedEventFilter;
    Deposited(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null
    ): DepositedEventFilter;

    "Withdrawn(uint128,address,uint256,address)"(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null
    ): WithdrawnEventFilter;
    Withdrawn(
      accountId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    cleanExpiredLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createLock(
      accountId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAccountAvailableCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cleanExpiredLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createLock(
      accountId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccountAvailableCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountCollateral(
      accountId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocks(
      accountId: BigNumberish,
      collateralType: string,
      offset: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      accountId: BigNumberish,
      collateralType: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
