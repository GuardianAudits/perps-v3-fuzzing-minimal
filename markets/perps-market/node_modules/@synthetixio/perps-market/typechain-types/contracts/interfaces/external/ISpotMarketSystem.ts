/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace OrderFees {
  export type DataStruct = {
    fixedFees: BigNumberish;
    utilizationFees: BigNumberish;
    skewFees: BigNumberish;
    wrapperFees: BigNumberish;
  };

  export type DataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fixedFees: BigNumber;
    utilizationFees: BigNumber;
    skewFees: BigNumber;
    wrapperFees: BigNumber;
  };
}

export interface ISpotMarketSystemInterface extends utils.Interface {
  functions: {
    "acceptMarketOwnership(uint128)": FunctionFragment;
    "buy(uint128,uint256,uint256,address)": FunctionFragment;
    "buyExactIn(uint128,uint256,uint256,address)": FunctionFragment;
    "buyExactOut(uint128,uint256,uint256,address)": FunctionFragment;
    "createSynth(string,string,address)": FunctionFragment;
    "getCollateralLeverage(uint128)": FunctionFragment;
    "getCustomTransactorFees(uint128,address)": FunctionFragment;
    "getFeeCollector(uint128)": FunctionFragment;
    "getMarketFees(uint128)": FunctionFragment;
    "getMarketOwner(uint128)": FunctionFragment;
    "getMarketSkew(uint128)": FunctionFragment;
    "getMarketSkewScale(uint128)": FunctionFragment;
    "getMarketUtilizationFees(uint128)": FunctionFragment;
    "getNominatedMarketOwner(uint128)": FunctionFragment;
    "getPriceData(uint128)": FunctionFragment;
    "getReferrerShare(uint128,address)": FunctionFragment;
    "getSynth(uint128)": FunctionFragment;
    "getSynthImpl(uint128)": FunctionFragment;
    "indexPrice(uint128,uint128,uint8)": FunctionFragment;
    "minimumCredit(uint128)": FunctionFragment;
    "name(uint128)": FunctionFragment;
    "nominateMarketOwner(uint128,address)": FunctionFragment;
    "quoteBuyExactIn(uint128,uint256,uint8)": FunctionFragment;
    "quoteBuyExactOut(uint128,uint256,uint8)": FunctionFragment;
    "quoteSellExactIn(uint128,uint256,uint8)": FunctionFragment;
    "quoteSellExactOut(uint128,uint256,uint8)": FunctionFragment;
    "renounceMarketNomination(uint128)": FunctionFragment;
    "renounceMarketOwnership(uint128)": FunctionFragment;
    "reportedDebt(uint128)": FunctionFragment;
    "sell(uint128,uint256,uint256,address)": FunctionFragment;
    "sellExactIn(uint128,uint256,uint256,address)": FunctionFragment;
    "sellExactOut(uint128,uint256,uint256,address)": FunctionFragment;
    "setAsyncFixedFee(uint128,uint256)": FunctionFragment;
    "setAtomicFixedFee(uint128,uint256)": FunctionFragment;
    "setCollateralLeverage(uint128,uint256)": FunctionFragment;
    "setCustomTransactorFees(uint128,address,uint256)": FunctionFragment;
    "setDecayRate(uint128,uint256)": FunctionFragment;
    "setFeeCollector(uint128,address)": FunctionFragment;
    "setMarketSkewScale(uint128,uint256)": FunctionFragment;
    "setMarketUtilizationFees(uint128,uint256)": FunctionFragment;
    "setSynthImplementation(address)": FunctionFragment;
    "setSynthetix(address)": FunctionFragment;
    "setWrapperFees(uint128,int256,int256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePriceData(uint128,bytes32,bytes32,uint256)": FunctionFragment;
    "updateReferrerShare(uint128,address,uint256)": FunctionFragment;
    "upgradeSynthImpl(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptMarketOwnership"
      | "buy"
      | "buyExactIn"
      | "buyExactOut"
      | "createSynth"
      | "getCollateralLeverage"
      | "getCustomTransactorFees"
      | "getFeeCollector"
      | "getMarketFees"
      | "getMarketOwner"
      | "getMarketSkew"
      | "getMarketSkewScale"
      | "getMarketUtilizationFees"
      | "getNominatedMarketOwner"
      | "getPriceData"
      | "getReferrerShare"
      | "getSynth"
      | "getSynthImpl"
      | "indexPrice"
      | "minimumCredit"
      | "name"
      | "nominateMarketOwner"
      | "quoteBuyExactIn"
      | "quoteBuyExactOut"
      | "quoteSellExactIn"
      | "quoteSellExactOut"
      | "renounceMarketNomination"
      | "renounceMarketOwnership"
      | "reportedDebt"
      | "sell"
      | "sellExactIn"
      | "sellExactOut"
      | "setAsyncFixedFee"
      | "setAtomicFixedFee"
      | "setCollateralLeverage"
      | "setCustomTransactorFees"
      | "setDecayRate"
      | "setFeeCollector"
      | "setMarketSkewScale"
      | "setMarketUtilizationFees"
      | "setSynthImplementation"
      | "setSynthetix"
      | "setWrapperFees"
      | "supportsInterface"
      | "updatePriceData"
      | "updateReferrerShare"
      | "upgradeSynthImpl"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptMarketOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSynth",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomTransactorFees",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSkewScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketUtilizationFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNominatedMarketOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerShare",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynthImpl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nominateMarketOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBuyExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBuyExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSellExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSellExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMarketNomination",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMarketOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsyncFixedFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAtomicFixedFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralLeverage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomTransactorFees",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecayRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketSkewScale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketUtilizationFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynthImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynthetix",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrapperFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceData",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferrerShare",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSynthImpl",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptMarketOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyExactIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomTransactorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSkewScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketUtilizationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNominatedMarketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSynth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSynthImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateMarketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBuyExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBuyExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSellExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSellExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMarketNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMarketOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAsyncFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAtomicFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomTransactorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketSkewScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketUtilizationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynthImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynthetix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrapperFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferrerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSynthImpl",
    data: BytesLike
  ): Result;

  events: {
    "AsyncFixedFeeSet(uint256,uint256)": EventFragment;
    "AtomicFixedFeeSet(uint256,uint256)": EventFragment;
    "CollateralLeverageSet(uint256,uint256)": EventFragment;
    "DecayRateUpdated(uint128,uint256)": EventFragment;
    "FeeCollectorSet(uint256,address)": EventFragment;
    "MarketNominationRenounced(uint128,address)": EventFragment;
    "MarketOwnerChanged(uint128,address,address)": EventFragment;
    "MarketOwnerNominated(uint128,address)": EventFragment;
    "MarketSkewScaleSet(uint256,uint256)": EventFragment;
    "MarketUtilizationFeesSet(uint256,uint256)": EventFragment;
    "ReferrerShareUpdated(uint128,address,uint256)": EventFragment;
    "SynthBought(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)": EventFragment;
    "SynthImplementationSet(address)": EventFragment;
    "SynthImplementationUpgraded(uint256,address,address)": EventFragment;
    "SynthPriceDataUpdated(uint256,bytes32,bytes32,uint256)": EventFragment;
    "SynthRegistered(uint256,address)": EventFragment;
    "SynthSold(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)": EventFragment;
    "SynthetixSystemSet(address,address,address)": EventFragment;
    "TransactorFixedFeeSet(uint256,address,uint256)": EventFragment;
    "WrapperFeesSet(uint256,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AsyncFixedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AtomicFixedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLeverageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecayRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketNominationRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketSkewScaleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUtilizationFeesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthImplementationSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SynthImplementationUpgraded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthPriceDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthetixSystemSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactorFixedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperFeesSet"): EventFragment;
}

export interface AsyncFixedFeeSetEventObject {
  synthMarketId: BigNumber;
  asyncFixedFee: BigNumber;
}
export type AsyncFixedFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  AsyncFixedFeeSetEventObject
>;

export type AsyncFixedFeeSetEventFilter =
  TypedEventFilter<AsyncFixedFeeSetEvent>;

export interface AtomicFixedFeeSetEventObject {
  synthMarketId: BigNumber;
  atomicFixedFee: BigNumber;
}
export type AtomicFixedFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  AtomicFixedFeeSetEventObject
>;

export type AtomicFixedFeeSetEventFilter =
  TypedEventFilter<AtomicFixedFeeSetEvent>;

export interface CollateralLeverageSetEventObject {
  synthMarketId: BigNumber;
  collateralLeverage: BigNumber;
}
export type CollateralLeverageSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  CollateralLeverageSetEventObject
>;

export type CollateralLeverageSetEventFilter =
  TypedEventFilter<CollateralLeverageSetEvent>;

export interface DecayRateUpdatedEventObject {
  marketId: BigNumber;
  rate: BigNumber;
}
export type DecayRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DecayRateUpdatedEventObject
>;

export type DecayRateUpdatedEventFilter =
  TypedEventFilter<DecayRateUpdatedEvent>;

export interface FeeCollectorSetEventObject {
  synthMarketId: BigNumber;
  feeCollector: string;
}
export type FeeCollectorSetEvent = TypedEvent<
  [BigNumber, string],
  FeeCollectorSetEventObject
>;

export type FeeCollectorSetEventFilter = TypedEventFilter<FeeCollectorSetEvent>;

export interface MarketNominationRenouncedEventObject {
  marketId: BigNumber;
  nominee: string;
}
export type MarketNominationRenouncedEvent = TypedEvent<
  [BigNumber, string],
  MarketNominationRenouncedEventObject
>;

export type MarketNominationRenouncedEventFilter =
  TypedEventFilter<MarketNominationRenouncedEvent>;

export interface MarketOwnerChangedEventObject {
  marketId: BigNumber;
  oldOwner: string;
  newOwner: string;
}
export type MarketOwnerChangedEvent = TypedEvent<
  [BigNumber, string, string],
  MarketOwnerChangedEventObject
>;

export type MarketOwnerChangedEventFilter =
  TypedEventFilter<MarketOwnerChangedEvent>;

export interface MarketOwnerNominatedEventObject {
  marketId: BigNumber;
  newOwner: string;
}
export type MarketOwnerNominatedEvent = TypedEvent<
  [BigNumber, string],
  MarketOwnerNominatedEventObject
>;

export type MarketOwnerNominatedEventFilter =
  TypedEventFilter<MarketOwnerNominatedEvent>;

export interface MarketSkewScaleSetEventObject {
  synthMarketId: BigNumber;
  skewScale: BigNumber;
}
export type MarketSkewScaleSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketSkewScaleSetEventObject
>;

export type MarketSkewScaleSetEventFilter =
  TypedEventFilter<MarketSkewScaleSetEvent>;

export interface MarketUtilizationFeesSetEventObject {
  synthMarketId: BigNumber;
  utilizationFeeRate: BigNumber;
}
export type MarketUtilizationFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketUtilizationFeesSetEventObject
>;

export type MarketUtilizationFeesSetEventFilter =
  TypedEventFilter<MarketUtilizationFeesSetEvent>;

export interface ReferrerShareUpdatedEventObject {
  marketId: BigNumber;
  referrer: string;
  sharePercentage: BigNumber;
}
export type ReferrerShareUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ReferrerShareUpdatedEventObject
>;

export type ReferrerShareUpdatedEventFilter =
  TypedEventFilter<ReferrerShareUpdatedEvent>;

export interface SynthBoughtEventObject {
  synthMarketId: BigNumber;
  synthReturned: BigNumber;
  fees: OrderFees.DataStructOutput;
  collectedFees: BigNumber;
  referrer: string;
  price: BigNumber;
}
export type SynthBoughtEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    OrderFees.DataStructOutput,
    BigNumber,
    string,
    BigNumber
  ],
  SynthBoughtEventObject
>;

export type SynthBoughtEventFilter = TypedEventFilter<SynthBoughtEvent>;

export interface SynthImplementationSetEventObject {
  synthImplementation: string;
}
export type SynthImplementationSetEvent = TypedEvent<
  [string],
  SynthImplementationSetEventObject
>;

export type SynthImplementationSetEventFilter =
  TypedEventFilter<SynthImplementationSetEvent>;

export interface SynthImplementationUpgradedEventObject {
  synthMarketId: BigNumber;
  proxy: string;
  implementation: string;
}
export type SynthImplementationUpgradedEvent = TypedEvent<
  [BigNumber, string, string],
  SynthImplementationUpgradedEventObject
>;

export type SynthImplementationUpgradedEventFilter =
  TypedEventFilter<SynthImplementationUpgradedEvent>;

export interface SynthPriceDataUpdatedEventObject {
  synthMarketId: BigNumber;
  buyFeedId: string;
  sellFeedId: string;
  strictStalenessTolerance: BigNumber;
}
export type SynthPriceDataUpdatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  SynthPriceDataUpdatedEventObject
>;

export type SynthPriceDataUpdatedEventFilter =
  TypedEventFilter<SynthPriceDataUpdatedEvent>;

export interface SynthRegisteredEventObject {
  synthMarketId: BigNumber;
  synthTokenAddress: string;
}
export type SynthRegisteredEvent = TypedEvent<
  [BigNumber, string],
  SynthRegisteredEventObject
>;

export type SynthRegisteredEventFilter = TypedEventFilter<SynthRegisteredEvent>;

export interface SynthSoldEventObject {
  synthMarketId: BigNumber;
  amountReturned: BigNumber;
  fees: OrderFees.DataStructOutput;
  collectedFees: BigNumber;
  referrer: string;
  price: BigNumber;
}
export type SynthSoldEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    OrderFees.DataStructOutput,
    BigNumber,
    string,
    BigNumber
  ],
  SynthSoldEventObject
>;

export type SynthSoldEventFilter = TypedEventFilter<SynthSoldEvent>;

export interface SynthetixSystemSetEventObject {
  synthetix: string;
  usdTokenAddress: string;
  oracleManager: string;
}
export type SynthetixSystemSetEvent = TypedEvent<
  [string, string, string],
  SynthetixSystemSetEventObject
>;

export type SynthetixSystemSetEventFilter =
  TypedEventFilter<SynthetixSystemSetEvent>;

export interface TransactorFixedFeeSetEventObject {
  synthMarketId: BigNumber;
  transactor: string;
  fixedFeeAmount: BigNumber;
}
export type TransactorFixedFeeSetEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TransactorFixedFeeSetEventObject
>;

export type TransactorFixedFeeSetEventFilter =
  TypedEventFilter<TransactorFixedFeeSetEvent>;

export interface WrapperFeesSetEventObject {
  synthMarketId: BigNumber;
  wrapFee: BigNumber;
  unwrapFee: BigNumber;
}
export type WrapperFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  WrapperFeesSetEventObject
>;

export type WrapperFeesSetEventFilter = TypedEventFilter<WrapperFeesSetEvent>;

export interface ISpotMarketSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISpotMarketSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyExactIn(
      synthMarketId: BigNumberish,
      amountUsd: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralLeverage: BigNumber }>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fixedFeeAmount: BigNumber }>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { feeCollector: string }>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketSkew: BigNumber }>;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skewScale: BigNumber }>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { utilizationFeeRate: BigNumber }>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        buyFeedId: string;
        sellFeedId: string;
        strictPriceStalenessTolerance: BigNumber;
      }
    >;

    getReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sharePercentage: BigNumber }>;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { synthAddress: string }>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { implAddress: string }>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(marketId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    quoteBuyExactIn(
      synthMarketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteBuyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & { usdAmountCharged: BigNumber }
    >;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthToBurn: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellExactIn(
      synthMarketId: BigNumberish,
      sellAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSynthetix(
      synthetix: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptMarketOwnership(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buy(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyExactIn(
    synthMarketId: BigNumberish,
    amountUsd: BigNumberish,
    minAmountReceived: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyExactOut(
    synthMarketId: BigNumberish,
    synthAmount: BigNumberish,
    maxUsdAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createSynth(
    tokenName: string,
    tokenSymbol: string,
    synthOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCollateralLeverage(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCustomTransactorFees(
    synthMarketId: BigNumberish,
    transactor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeCollector(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketFees(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketOwner(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketSkew(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketSkewScale(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketUtilizationFees(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNominatedMarketOwner(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPriceData(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      buyFeedId: string;
      sellFeedId: string;
      strictPriceStalenessTolerance: BigNumber;
    }
  >;

  getReferrerShare(
    marketId: BigNumberish,
    referrer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSynth(marketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getSynthImpl(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  indexPrice(
    marketId: BigNumberish,
    transactionType: BigNumberish,
    priceTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumCredit(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(marketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  nominateMarketOwner(
    synthMarketId: BigNumberish,
    newNominatedOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  quoteBuyExactIn(
    synthMarketId: BigNumberish,
    usdAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      synthAmount: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  quoteBuyExactOut(
    synthMarketId: BigNumberish,
    synthAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & { usdAmountCharged: BigNumber }
  >;

  quoteSellExactIn(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      returnAmount: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  quoteSellExactOut(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      synthToBurn: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  renounceMarketNomination(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceMarketOwnership(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reportedDebt(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sell(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    minUsdAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellExactIn(
    synthMarketId: BigNumberish,
    sellAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellExactOut(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    maxSynthAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAsyncFixedFee(
    synthMarketId: BigNumberish,
    asyncFixedFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAtomicFixedFee(
    synthMarketId: BigNumberish,
    atomicFixedFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCollateralLeverage(
    synthMarketId: BigNumberish,
    collateralLeverage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCustomTransactorFees(
    synthMarketId: BigNumberish,
    transactor: string,
    fixedFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDecayRate(
    marketId: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    synthMarketId: BigNumberish,
    feeCollector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketSkewScale(
    synthMarketId: BigNumberish,
    skewScale: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketUtilizationFees(
    synthMarketId: BigNumberish,
    utilizationFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSynthImplementation(
    synthImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSynthetix(
    synthetix: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWrapperFees(
    synthMarketId: BigNumberish,
    wrapFee: BigNumberish,
    unwrapFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePriceData(
    marketId: BigNumberish,
    buyFeedId: BytesLike,
    sellFeedId: BytesLike,
    strictPriceStalenessTolerance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReferrerShare(
    marketId: BigNumberish,
    referrer: string,
    sharePercentage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeSynthImpl(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    buyExactIn(
      synthMarketId: BigNumberish,
      amountUsd: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    buyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        usdAmountCharged: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        atomicFixedFee: BigNumber;
        asyncFixedFee: BigNumber;
        wrapFee: BigNumber;
        unwrapFee: BigNumber;
      }
    >;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        buyFeedId: string;
        sellFeedId: string;
        strictPriceStalenessTolerance: BigNumber;
      }
    >;

    getReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(marketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteBuyExactIn(
      synthMarketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteBuyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & { usdAmountCharged: BigNumber }
    >;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthToBurn: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        usdAmountReceived: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    sellExactIn(
      synthMarketId: BigNumberish,
      sellAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthToBurn: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSynthetix(synthetix: string, overrides?: CallOverrides): Promise<void>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AsyncFixedFeeSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      asyncFixedFee?: null
    ): AsyncFixedFeeSetEventFilter;
    AsyncFixedFeeSet(
      synthMarketId?: BigNumberish | null,
      asyncFixedFee?: null
    ): AsyncFixedFeeSetEventFilter;

    "AtomicFixedFeeSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      atomicFixedFee?: null
    ): AtomicFixedFeeSetEventFilter;
    AtomicFixedFeeSet(
      synthMarketId?: BigNumberish | null,
      atomicFixedFee?: null
    ): AtomicFixedFeeSetEventFilter;

    "CollateralLeverageSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      collateralLeverage?: null
    ): CollateralLeverageSetEventFilter;
    CollateralLeverageSet(
      synthMarketId?: BigNumberish | null,
      collateralLeverage?: null
    ): CollateralLeverageSetEventFilter;

    "DecayRateUpdated(uint128,uint256)"(
      marketId?: BigNumberish | null,
      rate?: null
    ): DecayRateUpdatedEventFilter;
    DecayRateUpdated(
      marketId?: BigNumberish | null,
      rate?: null
    ): DecayRateUpdatedEventFilter;

    "FeeCollectorSet(uint256,address)"(
      synthMarketId?: BigNumberish | null,
      feeCollector?: null
    ): FeeCollectorSetEventFilter;
    FeeCollectorSet(
      synthMarketId?: BigNumberish | null,
      feeCollector?: null
    ): FeeCollectorSetEventFilter;

    "MarketNominationRenounced(uint128,address)"(
      marketId?: BigNumberish | null,
      nominee?: null
    ): MarketNominationRenouncedEventFilter;
    MarketNominationRenounced(
      marketId?: BigNumberish | null,
      nominee?: null
    ): MarketNominationRenouncedEventFilter;

    "MarketOwnerChanged(uint128,address,address)"(
      marketId?: BigNumberish | null,
      oldOwner?: null,
      newOwner?: null
    ): MarketOwnerChangedEventFilter;
    MarketOwnerChanged(
      marketId?: BigNumberish | null,
      oldOwner?: null,
      newOwner?: null
    ): MarketOwnerChangedEventFilter;

    "MarketOwnerNominated(uint128,address)"(
      marketId?: BigNumberish | null,
      newOwner?: null
    ): MarketOwnerNominatedEventFilter;
    MarketOwnerNominated(
      marketId?: BigNumberish | null,
      newOwner?: null
    ): MarketOwnerNominatedEventFilter;

    "MarketSkewScaleSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      skewScale?: null
    ): MarketSkewScaleSetEventFilter;
    MarketSkewScaleSet(
      synthMarketId?: BigNumberish | null,
      skewScale?: null
    ): MarketSkewScaleSetEventFilter;

    "MarketUtilizationFeesSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      utilizationFeeRate?: null
    ): MarketUtilizationFeesSetEventFilter;
    MarketUtilizationFeesSet(
      synthMarketId?: BigNumberish | null,
      utilizationFeeRate?: null
    ): MarketUtilizationFeesSetEventFilter;

    "ReferrerShareUpdated(uint128,address,uint256)"(
      marketId?: BigNumberish | null,
      referrer?: null,
      sharePercentage?: null
    ): ReferrerShareUpdatedEventFilter;
    ReferrerShareUpdated(
      marketId?: BigNumberish | null,
      referrer?: null,
      sharePercentage?: null
    ): ReferrerShareUpdatedEventFilter;

    "SynthBought(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      synthReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthBoughtEventFilter;
    SynthBought(
      synthMarketId?: BigNumberish | null,
      synthReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthBoughtEventFilter;

    "SynthImplementationSet(address)"(
      synthImplementation?: null
    ): SynthImplementationSetEventFilter;
    SynthImplementationSet(
      synthImplementation?: null
    ): SynthImplementationSetEventFilter;

    "SynthImplementationUpgraded(uint256,address,address)"(
      synthMarketId?: BigNumberish | null,
      proxy?: string | null,
      implementation?: null
    ): SynthImplementationUpgradedEventFilter;
    SynthImplementationUpgraded(
      synthMarketId?: BigNumberish | null,
      proxy?: string | null,
      implementation?: null
    ): SynthImplementationUpgradedEventFilter;

    "SynthPriceDataUpdated(uint256,bytes32,bytes32,uint256)"(
      synthMarketId?: BigNumberish | null,
      buyFeedId?: BytesLike | null,
      sellFeedId?: BytesLike | null,
      strictStalenessTolerance?: null
    ): SynthPriceDataUpdatedEventFilter;
    SynthPriceDataUpdated(
      synthMarketId?: BigNumberish | null,
      buyFeedId?: BytesLike | null,
      sellFeedId?: BytesLike | null,
      strictStalenessTolerance?: null
    ): SynthPriceDataUpdatedEventFilter;

    "SynthRegistered(uint256,address)"(
      synthMarketId?: BigNumberish | null,
      synthTokenAddress?: null
    ): SynthRegisteredEventFilter;
    SynthRegistered(
      synthMarketId?: BigNumberish | null,
      synthTokenAddress?: null
    ): SynthRegisteredEventFilter;

    "SynthSold(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      amountReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthSoldEventFilter;
    SynthSold(
      synthMarketId?: BigNumberish | null,
      amountReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthSoldEventFilter;

    "SynthetixSystemSet(address,address,address)"(
      synthetix?: null,
      usdTokenAddress?: null,
      oracleManager?: null
    ): SynthetixSystemSetEventFilter;
    SynthetixSystemSet(
      synthetix?: null,
      usdTokenAddress?: null,
      oracleManager?: null
    ): SynthetixSystemSetEventFilter;

    "TransactorFixedFeeSet(uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      transactor?: null,
      fixedFeeAmount?: null
    ): TransactorFixedFeeSetEventFilter;
    TransactorFixedFeeSet(
      synthMarketId?: BigNumberish | null,
      transactor?: null,
      fixedFeeAmount?: null
    ): TransactorFixedFeeSetEventFilter;

    "WrapperFeesSet(uint256,int256,int256)"(
      synthMarketId?: BigNumberish | null,
      wrapFee?: null,
      unwrapFee?: null
    ): WrapperFeesSetEventFilter;
    WrapperFeesSet(
      synthMarketId?: BigNumberish | null,
      wrapFee?: null,
      unwrapFee?: null
    ): WrapperFeesSetEventFilter;
  };

  estimateGas: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyExactIn(
      synthMarketId: BigNumberish,
      amountUsd: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    quoteBuyExactIn(
      synthMarketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBuyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellExactIn(
      synthMarketId: BigNumberish,
      sellAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSynthetix(
      synthetix: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyExactIn(
      synthMarketId: BigNumberish,
      amountUsd: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    quoteBuyExactIn(
      synthMarketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBuyExactOut(
      synthMarketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellExactIn(
      synthMarketId: BigNumberish,
      sellAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSynthetix(
      synthetix: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReferrerShare(
      marketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
