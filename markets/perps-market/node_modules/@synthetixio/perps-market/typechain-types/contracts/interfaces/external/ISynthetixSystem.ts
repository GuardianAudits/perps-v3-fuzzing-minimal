/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace CollateralConfiguration {
  export type DataStruct = {
    depositingEnabled: boolean;
    issuanceRatioD18: BigNumberish;
    liquidationRatioD18: BigNumberish;
    liquidationRewardD18: BigNumberish;
    oracleNodeId: BytesLike;
    tokenAddress: string;
    minDelegationD18: BigNumberish;
  };

  export type DataStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    depositingEnabled: boolean;
    issuanceRatioD18: BigNumber;
    liquidationRatioD18: BigNumber;
    liquidationRewardD18: BigNumber;
    oracleNodeId: string;
    tokenAddress: string;
    minDelegationD18: BigNumber;
  };
}

export interface ISynthetixSystemInterface extends utils.Interface {
  functions: {
    "configureChainlinkCrossChain(address,address)": FunctionFragment;
    "configureCollateral((bool,uint256,uint256,uint256,bytes32,address,uint256))": FunctionFragment;
    "configureMaximumMarketCollateral(uint128,address,uint256)": FunctionFragment;
    "configureOracleManager(address)": FunctionFragment;
    "delegateCollateral(uint128,uint128,address,uint256,uint256)": FunctionFragment;
    "depositMarketCollateral(uint128,address,uint256)": FunctionFragment;
    "depositMarketUsd(uint128,address,uint256)": FunctionFragment;
    "distributeDebtToPools(uint128,uint256)": FunctionFragment;
    "getAssociatedSystem(bytes32)": FunctionFragment;
    "getCollateralConfiguration(address)": FunctionFragment;
    "getCollateralConfigurations(bool)": FunctionFragment;
    "getCollateralPrice(address)": FunctionFragment;
    "getConfig(bytes32)": FunctionFragment;
    "getConfigAddress(bytes32)": FunctionFragment;
    "getConfigUint(bytes32)": FunctionFragment;
    "getMarketAddress(uint128)": FunctionFragment;
    "getMarketCollateral(uint128)": FunctionFragment;
    "getMarketCollateralAmount(uint128,address)": FunctionFragment;
    "getMarketCollateralValue(uint128)": FunctionFragment;
    "getMarketDebtPerShare(uint128)": FunctionFragment;
    "getMarketFees(uint128,uint256)": FunctionFragment;
    "getMarketMinDelegateTime(uint128)": FunctionFragment;
    "getMarketNetIssuance(uint128)": FunctionFragment;
    "getMarketPoolDebtDistribution(uint128,uint128)": FunctionFragment;
    "getMarketPools(uint128)": FunctionFragment;
    "getMarketReportedDebt(uint128)": FunctionFragment;
    "getMarketTotalDebt(uint128)": FunctionFragment;
    "getMaximumMarketCollateral(uint128,address)": FunctionFragment;
    "getMinLiquidityRatio(uint128)": FunctionFragment;
    "getOracleManager()": FunctionFragment;
    "getPosition(uint128,uint128,address)": FunctionFragment;
    "getPositionCollateral(uint128,uint128,address)": FunctionFragment;
    "getPositionCollateralRatio(uint128,uint128,address)": FunctionFragment;
    "getPositionDebt(uint128,uint128,address)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "getUsdToken()": FunctionFragment;
    "getVaultCollateral(uint128,address)": FunctionFragment;
    "getVaultCollateralRatio(uint128,address)": FunctionFragment;
    "getVaultDebt(uint128,address)": FunctionFragment;
    "getWithdrawableMarketUsd(uint128)": FunctionFragment;
    "initOrUpgradeNft(bytes32,string,string,string,address)": FunctionFragment;
    "initOrUpgradeToken(bytes32,string,string,uint8,address)": FunctionFragment;
    "isMarketCapacityLocked(uint128)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "registerMarket(address)": FunctionFragment;
    "registerUnmanagedSystem(bytes32,address)": FunctionFragment;
    "setConfig(bytes32,bytes32)": FunctionFragment;
    "setMarketMinDelegateTime(uint128,uint32)": FunctionFragment;
    "setMinLiquidityRatio(uint128,uint256)": FunctionFragment;
    "setSupportedCrossChainNetworks(uint64[],uint64[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawMarketCollateral(uint128,address,uint256)": FunctionFragment;
    "withdrawMarketUsd(uint128,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configureChainlinkCrossChain"
      | "configureCollateral"
      | "configureMaximumMarketCollateral"
      | "configureOracleManager"
      | "delegateCollateral"
      | "depositMarketCollateral"
      | "depositMarketUsd"
      | "distributeDebtToPools"
      | "getAssociatedSystem"
      | "getCollateralConfiguration"
      | "getCollateralConfigurations"
      | "getCollateralPrice"
      | "getConfig"
      | "getConfigAddress"
      | "getConfigUint"
      | "getMarketAddress"
      | "getMarketCollateral"
      | "getMarketCollateralAmount"
      | "getMarketCollateralValue"
      | "getMarketDebtPerShare"
      | "getMarketFees"
      | "getMarketMinDelegateTime"
      | "getMarketNetIssuance"
      | "getMarketPoolDebtDistribution"
      | "getMarketPools"
      | "getMarketReportedDebt"
      | "getMarketTotalDebt"
      | "getMaximumMarketCollateral"
      | "getMinLiquidityRatio"
      | "getOracleManager"
      | "getPosition"
      | "getPositionCollateral"
      | "getPositionCollateralRatio"
      | "getPositionDebt"
      | "getTrustedForwarder"
      | "getUsdToken"
      | "getVaultCollateral"
      | "getVaultCollateralRatio"
      | "getVaultDebt"
      | "getWithdrawableMarketUsd"
      | "initOrUpgradeNft"
      | "initOrUpgradeToken"
      | "isMarketCapacityLocked"
      | "isTrustedForwarder"
      | "registerMarket"
      | "registerUnmanagedSystem"
      | "setConfig"
      | "setMarketMinDelegateTime"
      | "setMinLiquidityRatio"
      | "setSupportedCrossChainNetworks"
      | "supportsInterface"
      | "withdrawMarketCollateral"
      | "withdrawMarketUsd"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configureChainlinkCrossChain",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureCollateral",
    values: [CollateralConfiguration.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "configureMaximumMarketCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureOracleManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateCollateral",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMarketCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMarketUsd",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDebtToPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssociatedSystem",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralConfigurations",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigUint",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCollateralAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCollateralValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketDebtPerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMinDelegateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketNetIssuance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPoolDebtDistribution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketReportedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTotalDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumMarketCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinLiquidityRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionCollateral",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionCollateralRatio",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDebt",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateralRatio",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDebt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableMarketUsd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initOrUpgradeNft",
    values: [BytesLike, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initOrUpgradeToken",
    values: [BytesLike, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCapacityLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUnmanagedSystem",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketMinDelegateTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidityRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedCrossChainNetworks",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMarketCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMarketUsd",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureChainlinkCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureMaximumMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureOracleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMarketUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeDebtToPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssociatedSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfigAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketDebtPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMinDelegateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketNetIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPoolDebtDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketReportedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableMarketUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initOrUpgradeNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initOrUpgradeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCapacityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUnmanagedSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketMinDelegateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedCrossChainNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMarketUsd",
    data: BytesLike
  ): Result;

  events: {
    "AssociatedSystemSet(bytes32,bytes32,address,address)": EventFragment;
    "CollateralConfigured(address,(bool,uint256,uint256,uint256,bytes32,address,uint256))": EventFragment;
    "DelegationUpdated(uint128,uint128,address,uint256,uint256,address)": EventFragment;
    "MarketCollateralDeposited(uint128,address,uint256,address,int128,int128,uint256,uint256)": EventFragment;
    "MarketCollateralWithdrawn(uint128,address,uint256,address,int128,int128,uint256,uint256)": EventFragment;
    "MarketRegistered(address,uint128,address)": EventFragment;
    "MarketSystemFeePaid(uint128,uint256)": EventFragment;
    "MarketUsdDeposited(uint128,address,uint256,address,int128,int128,uint256)": EventFragment;
    "MarketUsdWithdrawn(uint128,address,uint256,address,int128,int128,uint256)": EventFragment;
    "MaximumMarketCollateralConfigured(uint128,address,uint256,address)": EventFragment;
    "NewSupportedCrossChainNetwork(uint64)": EventFragment;
    "SetMarketMinLiquidityRatio(uint128,uint256)": EventFragment;
    "SetMinDelegateTime(uint128,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssociatedSystemSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCollateralDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCollateralWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketSystemFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUsdDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUsdWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaximumMarketCollateralConfigured"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewSupportedCrossChainNetwork"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarketMinLiquidityRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinDelegateTime"): EventFragment;
}

export interface AssociatedSystemSetEventObject {
  kind: string;
  id: string;
  proxy: string;
  impl: string;
}
export type AssociatedSystemSetEvent = TypedEvent<
  [string, string, string, string],
  AssociatedSystemSetEventObject
>;

export type AssociatedSystemSetEventFilter =
  TypedEventFilter<AssociatedSystemSetEvent>;

export interface CollateralConfiguredEventObject {
  collateralType: string;
  config: CollateralConfiguration.DataStructOutput;
}
export type CollateralConfiguredEvent = TypedEvent<
  [string, CollateralConfiguration.DataStructOutput],
  CollateralConfiguredEventObject
>;

export type CollateralConfiguredEventFilter =
  TypedEventFilter<CollateralConfiguredEvent>;

export interface DelegationUpdatedEventObject {
  accountId: BigNumber;
  poolId: BigNumber;
  collateralType: string;
  amount: BigNumber;
  leverage: BigNumber;
  sender: string;
}
export type DelegationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, string],
  DelegationUpdatedEventObject
>;

export type DelegationUpdatedEventFilter =
  TypedEventFilter<DelegationUpdatedEvent>;

export interface MarketCollateralDepositedEventObject {
  marketId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
  reportedDebt: BigNumber;
}
export type MarketCollateralDepositedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketCollateralDepositedEventObject
>;

export type MarketCollateralDepositedEventFilter =
  TypedEventFilter<MarketCollateralDepositedEvent>;

export interface MarketCollateralWithdrawnEventObject {
  marketId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
  reportedDebt: BigNumber;
}
export type MarketCollateralWithdrawnEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketCollateralWithdrawnEventObject
>;

export type MarketCollateralWithdrawnEventFilter =
  TypedEventFilter<MarketCollateralWithdrawnEvent>;

export interface MarketRegisteredEventObject {
  market: string;
  marketId: BigNumber;
  sender: string;
}
export type MarketRegisteredEvent = TypedEvent<
  [string, BigNumber, string],
  MarketRegisteredEventObject
>;

export type MarketRegisteredEventFilter =
  TypedEventFilter<MarketRegisteredEvent>;

export interface MarketSystemFeePaidEventObject {
  marketId: BigNumber;
  feeAmount: BigNumber;
}
export type MarketSystemFeePaidEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketSystemFeePaidEventObject
>;

export type MarketSystemFeePaidEventFilter =
  TypedEventFilter<MarketSystemFeePaidEvent>;

export interface MarketUsdDepositedEventObject {
  marketId: BigNumber;
  target: string;
  amount: BigNumber;
  market: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
}
export type MarketUsdDepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  MarketUsdDepositedEventObject
>;

export type MarketUsdDepositedEventFilter =
  TypedEventFilter<MarketUsdDepositedEvent>;

export interface MarketUsdWithdrawnEventObject {
  marketId: BigNumber;
  target: string;
  amount: BigNumber;
  market: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
}
export type MarketUsdWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  MarketUsdWithdrawnEventObject
>;

export type MarketUsdWithdrawnEventFilter =
  TypedEventFilter<MarketUsdWithdrawnEvent>;

export interface MaximumMarketCollateralConfiguredEventObject {
  marketId: BigNumber;
  collateralType: string;
  systemAmount: BigNumber;
  owner: string;
}
export type MaximumMarketCollateralConfiguredEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  MaximumMarketCollateralConfiguredEventObject
>;

export type MaximumMarketCollateralConfiguredEventFilter =
  TypedEventFilter<MaximumMarketCollateralConfiguredEvent>;

export interface NewSupportedCrossChainNetworkEventObject {
  newChainId: BigNumber;
}
export type NewSupportedCrossChainNetworkEvent = TypedEvent<
  [BigNumber],
  NewSupportedCrossChainNetworkEventObject
>;

export type NewSupportedCrossChainNetworkEventFilter =
  TypedEventFilter<NewSupportedCrossChainNetworkEvent>;

export interface SetMarketMinLiquidityRatioEventObject {
  marketId: BigNumber;
  minLiquidityRatio: BigNumber;
}
export type SetMarketMinLiquidityRatioEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMarketMinLiquidityRatioEventObject
>;

export type SetMarketMinLiquidityRatioEventFilter =
  TypedEventFilter<SetMarketMinLiquidityRatioEvent>;

export interface SetMinDelegateTimeEventObject {
  marketId: BigNumber;
  minDelegateTime: number;
}
export type SetMinDelegateTimeEvent = TypedEvent<
  [BigNumber, number],
  SetMinDelegateTimeEventObject
>;

export type SetMinDelegateTimeEventFilter =
  TypedEventFilter<SetMinDelegateTimeEvent>;

export interface ISynthetixSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISynthetixSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAssociatedSystem(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; kind: string }>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [CollateralConfiguration.DataStructOutput] & {
        collateral: CollateralConfiguration.DataStructOutput;
      }
    >;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<
      [CollateralConfiguration.DataStructOutput[]] & {
        collaterals: CollateralConfiguration.DataStructOutput[];
      }
    >;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceD18: BigNumber }>;

    getConfig(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { v: string }>;

    getConfigAddress(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { v: string }>;

    getConfigUint(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { v: BigNumber }>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { marketAddress: string }>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { valueD18: BigNumber }>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountD18: BigNumber }>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { valueD18: BigNumber }>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositFeeAmount: BigNumber;
        withdrawFeeAmount: BigNumber;
      }
    >;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { issuanceD18: BigNumber }>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reportedDebtD18: BigNumber }>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDebtD18: BigNumber }>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountD18: BigNumber }>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minRatioD18: BigNumber }>;

    getOracleManager(overrides?: CallOverrides): Promise<[string]>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralAmountD18: BigNumber }>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    getUsdToken(overrides?: CallOverrides): Promise<[string]>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountD18: BigNumber;
        collateralValueD18: BigNumber;
      }
    >;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawableD18: BigNumber }>;

    initOrUpgradeNft(
      id: BytesLike,
      name: string,
      symbol: string,
      uri: string,
      impl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initOrUpgradeToken(
      id: BytesLike,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      impl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isLocked: boolean }>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerMarket(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerUnmanagedSystem(
      id: BytesLike,
      endpoint: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  configureChainlinkCrossChain(
    ccipRouter: string,
    ccipTokenPool: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  configureCollateral(
    config: CollateralConfiguration.DataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  configureMaximumMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  configureOracleManager(
    oracleManagerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegateCollateral(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositMarketUsd(
    marketId: BigNumberish,
    target: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeDebtToPools(
    marketId: BigNumberish,
    maxIter: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAssociatedSystem(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { addr: string; kind: string }>;

  getCollateralConfiguration(
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<CollateralConfiguration.DataStructOutput>;

  getCollateralConfigurations(
    hideDisabled: boolean,
    overrides?: CallOverrides
  ): Promise<CollateralConfiguration.DataStructOutput[]>;

  getCollateralPrice(
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfig(k: BytesLike, overrides?: CallOverrides): Promise<string>;

  getConfigAddress(k: BytesLike, overrides?: CallOverrides): Promise<string>;

  getConfigUint(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getMarketAddress(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketCollateral(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketCollateralAmount(
    marketId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketCollateralValue(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketDebtPerShare(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketFees(
    marketId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      depositFeeAmount: BigNumber;
      withdrawFeeAmount: BigNumber;
    }
  >;

  getMarketMinDelegateTime(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMarketNetIssuance(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketPoolDebtDistribution(
    marketId: BigNumberish,
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketPools(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketReportedDebt(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketTotalDebt(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaximumMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinLiquidityRatio(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleManager(overrides?: CallOverrides): Promise<string>;

  getPosition(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPositionCollateral(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionCollateralRatio(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPositionDebt(
    accountId: BigNumberish,
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  getUsdToken(overrides?: CallOverrides): Promise<string>;

  getVaultCollateral(
    poolId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralAmountD18: BigNumber;
      collateralValueD18: BigNumber;
    }
  >;

  getVaultCollateralRatio(
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVaultDebt(
    poolId: BigNumberish,
    collateralType: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getWithdrawableMarketUsd(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initOrUpgradeNft(
    id: BytesLike,
    name: string,
    symbol: string,
    uri: string,
    impl: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initOrUpgradeToken(
    id: BytesLike,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    impl: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isMarketCapacityLocked(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerMarket(
    market: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerUnmanagedSystem(
    id: BytesLike,
    endpoint: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfig(
    k: BytesLike,
    v: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketMinDelegateTime(
    marketId: BigNumberish,
    minDelegateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinLiquidityRatio(
    marketId: BigNumberish,
    minLiquidityRatio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSupportedCrossChainNetworks(
    supportedNetworks: BigNumberish[],
    ccipSelectors: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawMarketUsd(
    marketId: BigNumberish,
    target: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAssociatedSystem(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; kind: string }>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<CollateralConfiguration.DataStructOutput>;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<CollateralConfiguration.DataStructOutput[]>;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(k: BytesLike, overrides?: CallOverrides): Promise<string>;

    getConfigAddress(k: BytesLike, overrides?: CallOverrides): Promise<string>;

    getConfigUint(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositFeeAmount: BigNumber;
        withdrawFeeAmount: BigNumber;
      }
    >;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sharesD18: BigNumber;
        totalSharesD18: BigNumber;
        valuePerShareD27: BigNumber;
      }
    >;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        inRangePoolIds: BigNumber[];
        outRangePoolIds: BigNumber[];
      }
    >;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleManager(overrides?: CallOverrides): Promise<string>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralAmountD18: BigNumber;
        collateralValueD18: BigNumber;
        debtD18: BigNumber;
        collateralizationRatioD18: BigNumber;
      }
    >;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    getUsdToken(overrides?: CallOverrides): Promise<string>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountD18: BigNumber;
        collateralValueD18: BigNumber;
      }
    >;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initOrUpgradeNft(
      id: BytesLike,
      name: string,
      symbol: string,
      uri: string,
      impl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initOrUpgradeToken(
      id: BytesLike,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      impl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerUnmanagedSystem(
      id: BytesLike,
      endpoint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssociatedSystemSet(bytes32,bytes32,address,address)"(
      kind?: BytesLike | null,
      id?: BytesLike | null,
      proxy?: null,
      impl?: null
    ): AssociatedSystemSetEventFilter;
    AssociatedSystemSet(
      kind?: BytesLike | null,
      id?: BytesLike | null,
      proxy?: null,
      impl?: null
    ): AssociatedSystemSetEventFilter;

    "CollateralConfigured(address,(bool,uint256,uint256,uint256,bytes32,address,uint256))"(
      collateralType?: string | null,
      config?: null
    ): CollateralConfiguredEventFilter;
    CollateralConfigured(
      collateralType?: string | null,
      config?: null
    ): CollateralConfiguredEventFilter;

    "DelegationUpdated(uint128,uint128,address,uint256,uint256,address)"(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      collateralType?: null,
      amount?: null,
      leverage?: null,
      sender?: string | null
    ): DelegationUpdatedEventFilter;
    DelegationUpdated(
      accountId?: BigNumberish | null,
      poolId?: BigNumberish | null,
      collateralType?: null,
      amount?: null,
      leverage?: null,
      sender?: string | null
    ): DelegationUpdatedEventFilter;

    "MarketCollateralDeposited(uint128,address,uint256,address,int128,int128,uint256,uint256)"(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralDepositedEventFilter;
    MarketCollateralDeposited(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralDepositedEventFilter;

    "MarketCollateralWithdrawn(uint128,address,uint256,address,int128,int128,uint256,uint256)"(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralWithdrawnEventFilter;
    MarketCollateralWithdrawn(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralWithdrawnEventFilter;

    "MarketRegistered(address,uint128,address)"(
      market?: string | null,
      marketId?: BigNumberish | null,
      sender?: string | null
    ): MarketRegisteredEventFilter;
    MarketRegistered(
      market?: string | null,
      marketId?: BigNumberish | null,
      sender?: string | null
    ): MarketRegisteredEventFilter;

    "MarketSystemFeePaid(uint128,uint256)"(
      marketId?: BigNumberish | null,
      feeAmount?: null
    ): MarketSystemFeePaidEventFilter;
    MarketSystemFeePaid(
      marketId?: BigNumberish | null,
      feeAmount?: null
    ): MarketSystemFeePaidEventFilter;

    "MarketUsdDeposited(uint128,address,uint256,address,int128,int128,uint256)"(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdDepositedEventFilter;
    MarketUsdDeposited(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdDepositedEventFilter;

    "MarketUsdWithdrawn(uint128,address,uint256,address,int128,int128,uint256)"(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdWithdrawnEventFilter;
    MarketUsdWithdrawn(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdWithdrawnEventFilter;

    "MaximumMarketCollateralConfigured(uint128,address,uint256,address)"(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      systemAmount?: null,
      owner?: string | null
    ): MaximumMarketCollateralConfiguredEventFilter;
    MaximumMarketCollateralConfigured(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      systemAmount?: null,
      owner?: string | null
    ): MaximumMarketCollateralConfiguredEventFilter;

    "NewSupportedCrossChainNetwork(uint64)"(
      newChainId?: null
    ): NewSupportedCrossChainNetworkEventFilter;
    NewSupportedCrossChainNetwork(
      newChainId?: null
    ): NewSupportedCrossChainNetworkEventFilter;

    "SetMarketMinLiquidityRatio(uint128,uint256)"(
      marketId?: BigNumberish | null,
      minLiquidityRatio?: null
    ): SetMarketMinLiquidityRatioEventFilter;
    SetMarketMinLiquidityRatio(
      marketId?: BigNumberish | null,
      minLiquidityRatio?: null
    ): SetMarketMinLiquidityRatioEventFilter;

    "SetMinDelegateTime(uint128,uint32)"(
      marketId?: BigNumberish | null,
      minDelegateTime?: null
    ): SetMinDelegateTimeEventFilter;
    SetMinDelegateTime(
      marketId?: BigNumberish | null,
      minDelegateTime?: null
    ): SetMinDelegateTimeEventFilter;
  };

  estimateGas: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAssociatedSystem(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getConfigAddress(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigUint(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleManager(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdToken(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initOrUpgradeNft(
      id: BytesLike,
      name: string,
      symbol: string,
      uri: string,
      impl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initOrUpgradeToken(
      id: BytesLike,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      impl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMarket(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerUnmanagedSystem(
      id: BytesLike,
      endpoint: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    configureCollateral(
      config: CollateralConfiguration.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegateCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAssociatedSystem(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralConfiguration(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralConfigurations(
      hideDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralPrice(
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigAddress(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigUint(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPositionCollateral(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionCollateralRatio(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPositionDebt(
      accountId: BigNumberish,
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultCollateral(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateralRatio(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVaultDebt(
      poolId: BigNumberish,
      collateralType: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initOrUpgradeNft(
      id: BytesLike,
      name: string,
      symbol: string,
      uri: string,
      impl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initOrUpgradeToken(
      id: BytesLike,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      impl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMarket(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerUnmanagedSystem(
      id: BytesLike,
      endpoint: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
