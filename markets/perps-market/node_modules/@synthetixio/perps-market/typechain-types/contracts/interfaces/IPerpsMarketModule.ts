/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IPerpsMarketModule {
  export type MarketSummaryStruct = {
    skew: BigNumberish;
    size: BigNumberish;
    maxOpenInterest: BigNumberish;
    currentFundingRate: BigNumberish;
    currentFundingVelocity: BigNumberish;
    indexPrice: BigNumberish;
  };

  export type MarketSummaryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    skew: BigNumber;
    size: BigNumber;
    maxOpenInterest: BigNumber;
    currentFundingRate: BigNumber;
    currentFundingVelocity: BigNumber;
    indexPrice: BigNumber;
  };
}

export interface IPerpsMarketModuleInterface extends utils.Interface {
  functions: {
    "currentFundingRate(uint128)": FunctionFragment;
    "currentFundingVelocity(uint128)": FunctionFragment;
    "fillPrice(uint128,int128,uint256)": FunctionFragment;
    "getMarketSummary(uint128)": FunctionFragment;
    "indexPrice(uint128)": FunctionFragment;
    "maxOpenInterest(uint128)": FunctionFragment;
    "metadata(uint128)": FunctionFragment;
    "size(uint128)": FunctionFragment;
    "skew(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currentFundingRate"
      | "currentFundingVelocity"
      | "fillPrice"
      | "getMarketSummary"
      | "indexPrice"
      | "maxOpenInterest"
      | "metadata"
      | "size"
      | "skew"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currentFundingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFundingVelocity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSummary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxOpenInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "size", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "skew", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "currentFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentFundingVelocity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skew", data: BytesLike): Result;

  events: {};
}

export interface IPerpsMarketModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPerpsMarketModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentFundingRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentFundingVelocity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fillPrice(
      marketId: BigNumberish,
      orderSize: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketSummary(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IPerpsMarketModule.MarketSummaryStructOutput] & {
        summary: IPerpsMarketModule.MarketSummaryStructOutput;
      }
    >;

    indexPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxOpenInterest(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    metadata(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    size(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    skew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  currentFundingRate(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentFundingVelocity(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fillPrice(
    marketId: BigNumberish,
    orderSize: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketSummary(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IPerpsMarketModule.MarketSummaryStructOutput>;

  indexPrice(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxOpenInterest(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  metadata(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { name: string; symbol: string }>;

  size(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  skew(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    currentFundingRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentFundingVelocity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillPrice(
      marketId: BigNumberish,
      orderSize: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSummary(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IPerpsMarketModule.MarketSummaryStructOutput>;

    indexPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxOpenInterest(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    size(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    skew(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    currentFundingRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentFundingVelocity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillPrice(
      marketId: BigNumberish,
      orderSize: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSummary(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxOpenInterest(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    size(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    skew(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentFundingRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentFundingVelocity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillPrice(
      marketId: BigNumberish,
      orderSize: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSummary(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexPrice(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxOpenInterest(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadata(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    size(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    skew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
