/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IPerpsAccountModuleInterface extends utils.Interface {
  functions: {
    "debt(uint128)": FunctionFragment;
    "getAccountCollateralIds(uint128)": FunctionFragment;
    "getAccountOpenPositions(uint128)": FunctionFragment;
    "getAvailableMargin(uint128)": FunctionFragment;
    "getCollateralAmount(uint128,uint128)": FunctionFragment;
    "getOpenPosition(uint128,uint128)": FunctionFragment;
    "getOpenPositionSize(uint128,uint128)": FunctionFragment;
    "getRequiredMargins(uint128)": FunctionFragment;
    "getWithdrawableMargin(uint128)": FunctionFragment;
    "modifyCollateral(uint128,uint128,int256)": FunctionFragment;
    "payDebt(uint128,uint256)": FunctionFragment;
    "totalAccountOpenInterest(uint128)": FunctionFragment;
    "totalCollateralValue(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "debt"
      | "getAccountCollateralIds"
      | "getAccountOpenPositions"
      | "getAvailableMargin"
      | "getCollateralAmount"
      | "getOpenPosition"
      | "getOpenPositionSize"
      | "getRequiredMargins"
      | "getWithdrawableMargin"
      | "modifyCollateral"
      | "payDebt"
      | "totalAccountOpenInterest"
      | "totalCollateralValue"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "debt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAccountCollateralIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountOpenPositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenPositionSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredMargins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyCollateral",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccountOpenInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralValue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCollateralIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountOpenPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredMargins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAccountOpenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralValue",
    data: BytesLike
  ): Result;

  events: {
    "CollateralModified(uint128,uint128,int256,address)": EventFragment;
    "DebtPaid(uint128,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtPaid"): EventFragment;
}

export interface CollateralModifiedEventObject {
  accountId: BigNumber;
  collateralId: BigNumber;
  amountDelta: BigNumber;
  sender: string;
}
export type CollateralModifiedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  CollateralModifiedEventObject
>;

export type CollateralModifiedEventFilter =
  TypedEventFilter<CollateralModifiedEvent>;

export interface DebtPaidEventObject {
  accountId: BigNumber;
  amount: BigNumber;
  sender: string;
}
export type DebtPaidEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DebtPaidEventObject
>;

export type DebtPaidEventFilter = TypedEventFilter<DebtPaidEvent>;

export interface IPerpsAccountModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPerpsAccountModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    debt(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accountDebt: BigNumber }>;

    getAccountCollateralIds(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountOpenPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAvailableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableMargin: BigNumber }>;

    getCollateralAmount(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenPosition(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPnl: BigNumber;
        accruedFunding: BigNumber;
        positionSize: BigNumber;
        owedInterest: BigNumber;
      }
    >;

    getOpenPositionSize(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { positionSize: BigNumber }>;

    getRequiredMargins(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        requiredInitialMargin: BigNumber;
        requiredMaintenanceMargin: BigNumber;
        maxLiquidationReward: BigNumber;
      }
    >;

    getWithdrawableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawableMargin: BigNumber }>;

    modifyCollateral(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amountDelta: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payDebt(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalAccountOpenInterest(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalCollateralValue(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  debt(accountId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getAccountCollateralIds(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountOpenPositions(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAvailableMargin(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralAmount(
    accountId: BigNumberish,
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenPosition(
    accountId: BigNumberish,
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalPnl: BigNumber;
      accruedFunding: BigNumber;
      positionSize: BigNumber;
      owedInterest: BigNumber;
    }
  >;

  getOpenPositionSize(
    accountId: BigNumberish,
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequiredMargins(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      requiredInitialMargin: BigNumber;
      requiredMaintenanceMargin: BigNumber;
      maxLiquidationReward: BigNumber;
    }
  >;

  getWithdrawableMargin(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  modifyCollateral(
    accountId: BigNumberish,
    collateralId: BigNumberish,
    amountDelta: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payDebt(
    accountId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalAccountOpenInterest(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalCollateralValue(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    debt(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCollateralIds(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountOpenPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAvailableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmount(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenPosition(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPnl: BigNumber;
        accruedFunding: BigNumber;
        positionSize: BigNumber;
        owedInterest: BigNumber;
      }
    >;

    getOpenPositionSize(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredMargins(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        requiredInitialMargin: BigNumber;
        requiredMaintenanceMargin: BigNumber;
        maxLiquidationReward: BigNumber;
      }
    >;

    getWithdrawableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyCollateral(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amountDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payDebt(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAccountOpenInterest(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateralValue(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CollateralModified(uint128,uint128,int256,address)"(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amountDelta?: null,
      sender?: string | null
    ): CollateralModifiedEventFilter;
    CollateralModified(
      accountId?: BigNumberish | null,
      collateralId?: BigNumberish | null,
      amountDelta?: null,
      sender?: string | null
    ): CollateralModifiedEventFilter;

    "DebtPaid(uint128,uint256,address)"(
      accountId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): DebtPaidEventFilter;
    DebtPaid(
      accountId?: BigNumberish | null,
      amount?: null,
      sender?: string | null
    ): DebtPaidEventFilter;
  };

  estimateGas: {
    debt(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCollateralIds(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountOpenPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmount(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenPosition(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenPositionSize(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredMargins(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyCollateral(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amountDelta: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payDebt(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalAccountOpenInterest(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateralValue(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    debt(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountCollateralIds(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountOpenPositions(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralAmount(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenPosition(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenPositionSize(
      accountId: BigNumberish,
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredMargins(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableMargin(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyCollateral(
      accountId: BigNumberish,
      collateralId: BigNumberish,
      amountDelta: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payDebt(
      accountId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalAccountOpenInterest(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollateralValue(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
