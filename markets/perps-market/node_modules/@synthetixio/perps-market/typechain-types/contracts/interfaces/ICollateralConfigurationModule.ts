/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ICollateralConfigurationModuleInterface
  extends utils.Interface {
  functions: {
    "getCollateralConfiguration(uint128)": FunctionFragment;
    "getCollateralConfigurationFull(uint128)": FunctionFragment;
    "getCollateralLiquidateRewardRatio()": FunctionFragment;
    "getRegisteredDistributor(uint128)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "registerDistributor(address,address,uint128,address[])": FunctionFragment;
    "setCollateralConfiguration(uint128,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setCollateralLiquidateRewardRatio(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCollateralConfiguration"
      | "getCollateralConfigurationFull"
      | "getCollateralLiquidateRewardRatio"
      | "getRegisteredDistributor"
      | "isRegistered"
      | "registerDistributor"
      | "setCollateralConfiguration"
      | "setCollateralLiquidateRewardRatio"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCollateralConfiguration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralConfigurationFull",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralLiquidateRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredDistributor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDistributor",
    values: [string, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralConfiguration",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralLiquidateRewardRatio",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCollateralConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralConfigurationFull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralLiquidateRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralLiquidateRewardRatio",
    data: BytesLike
  ): Result;

  events: {
    "CollateralConfigurationSet(uint128,uint256,uint256,uint256,uint256)": EventFragment;
    "CollateralLiquidateRewardRatioSet(uint128)": EventFragment;
    "RewardDistributorRegistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralConfigurationSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollateralLiquidateRewardRatioSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RewardDistributorRegistered"
  ): EventFragment;
}

export interface CollateralConfigurationSetEventObject {
  collateralId: BigNumber;
  maxCollateralAmount: BigNumber;
  upperLimitDiscount: BigNumber;
  lowerLimitDiscount: BigNumber;
  discountScalar: BigNumber;
}
export type CollateralConfigurationSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CollateralConfigurationSetEventObject
>;

export type CollateralConfigurationSetEventFilter =
  TypedEventFilter<CollateralConfigurationSetEvent>;

export interface CollateralLiquidateRewardRatioSetEventObject {
  collateralLiquidateRewardRatioD18: BigNumber;
}
export type CollateralLiquidateRewardRatioSetEvent = TypedEvent<
  [BigNumber],
  CollateralLiquidateRewardRatioSetEventObject
>;

export type CollateralLiquidateRewardRatioSetEventFilter =
  TypedEventFilter<CollateralLiquidateRewardRatioSetEvent>;

export interface RewardDistributorRegisteredEventObject {
  distributor: string;
}
export type RewardDistributorRegisteredEvent = TypedEvent<
  [string],
  RewardDistributorRegisteredEventObject
>;

export type RewardDistributorRegisteredEventFilter =
  TypedEventFilter<RewardDistributorRegisteredEvent>;

export interface ICollateralConfigurationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICollateralConfigurationModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCollateralConfiguration(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxCollateralAmount: BigNumber }>;

    getCollateralConfigurationFull(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxCollateralAmount: BigNumber;
        upperLimitDiscount: BigNumber;
        lowerLimitDiscount: BigNumber;
        discountScalar: BigNumber;
      }
    >;

    getCollateralLiquidateRewardRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralLiquidateRewardRatioD18: BigNumber }>;

    getRegisteredDistributor(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[]] & {
        distributor: string;
        poolDelegatedCollateralTypes: string[];
      }
    >;

    isRegistered(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerDistributor(
      token: string,
      distributor: string,
      collateralId: BigNumberish,
      poolDelegatedCollateralTypes: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCollateralConfiguration(
      collateralId: BigNumberish,
      maxCollateralAmount: BigNumberish,
      upperLimitDiscount: BigNumberish,
      lowerLimitDiscount: BigNumberish,
      discountScalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCollateralLiquidateRewardRatio(
      collateralLiquidateRewardRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getCollateralConfiguration(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralConfigurationFull(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      maxCollateralAmount: BigNumber;
      upperLimitDiscount: BigNumber;
      lowerLimitDiscount: BigNumber;
      discountScalar: BigNumber;
    }
  >;

  getCollateralLiquidateRewardRatio(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegisteredDistributor(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string[]] & {
      distributor: string;
      poolDelegatedCollateralTypes: string[];
    }
  >;

  isRegistered(
    distributor: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerDistributor(
    token: string,
    distributor: string,
    collateralId: BigNumberish,
    poolDelegatedCollateralTypes: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCollateralConfiguration(
    collateralId: BigNumberish,
    maxCollateralAmount: BigNumberish,
    upperLimitDiscount: BigNumberish,
    lowerLimitDiscount: BigNumberish,
    discountScalar: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCollateralLiquidateRewardRatio(
    collateralLiquidateRewardRatioD18: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCollateralConfiguration(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralConfigurationFull(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxCollateralAmount: BigNumber;
        upperLimitDiscount: BigNumber;
        lowerLimitDiscount: BigNumber;
        discountScalar: BigNumber;
      }
    >;

    getCollateralLiquidateRewardRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredDistributor(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string[]] & {
        distributor: string;
        poolDelegatedCollateralTypes: string[];
      }
    >;

    isRegistered(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerDistributor(
      token: string,
      distributor: string,
      collateralId: BigNumberish,
      poolDelegatedCollateralTypes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralConfiguration(
      collateralId: BigNumberish,
      maxCollateralAmount: BigNumberish,
      upperLimitDiscount: BigNumberish,
      lowerLimitDiscount: BigNumberish,
      discountScalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralLiquidateRewardRatio(
      collateralLiquidateRewardRatioD18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralConfigurationSet(uint128,uint256,uint256,uint256,uint256)"(
      collateralId?: BigNumberish | null,
      maxCollateralAmount?: null,
      upperLimitDiscount?: null,
      lowerLimitDiscount?: null,
      discountScalar?: null
    ): CollateralConfigurationSetEventFilter;
    CollateralConfigurationSet(
      collateralId?: BigNumberish | null,
      maxCollateralAmount?: null,
      upperLimitDiscount?: null,
      lowerLimitDiscount?: null,
      discountScalar?: null
    ): CollateralConfigurationSetEventFilter;

    "CollateralLiquidateRewardRatioSet(uint128)"(
      collateralLiquidateRewardRatioD18?: null
    ): CollateralLiquidateRewardRatioSetEventFilter;
    CollateralLiquidateRewardRatioSet(
      collateralLiquidateRewardRatioD18?: null
    ): CollateralLiquidateRewardRatioSetEventFilter;

    "RewardDistributorRegistered(address)"(
      distributor?: null
    ): RewardDistributorRegisteredEventFilter;
    RewardDistributorRegistered(
      distributor?: null
    ): RewardDistributorRegisteredEventFilter;
  };

  estimateGas: {
    getCollateralConfiguration(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralConfigurationFull(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralLiquidateRewardRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredDistributor(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDistributor(
      token: string,
      distributor: string,
      collateralId: BigNumberish,
      poolDelegatedCollateralTypes: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCollateralConfiguration(
      collateralId: BigNumberish,
      maxCollateralAmount: BigNumberish,
      upperLimitDiscount: BigNumberish,
      lowerLimitDiscount: BigNumberish,
      discountScalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCollateralLiquidateRewardRatio(
      collateralLiquidateRewardRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCollateralConfiguration(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralConfigurationFull(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralLiquidateRewardRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredDistributor(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDistributor(
      token: string,
      distributor: string,
      collateralId: BigNumberish,
      poolDelegatedCollateralTypes: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCollateralConfiguration(
      collateralId: BigNumberish,
      maxCollateralAmount: BigNumberish,
      upperLimitDiscount: BigNumberish,
      lowerLimitDiscount: BigNumberish,
      discountScalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCollateralLiquidateRewardRatio(
      collateralLiquidateRewardRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
