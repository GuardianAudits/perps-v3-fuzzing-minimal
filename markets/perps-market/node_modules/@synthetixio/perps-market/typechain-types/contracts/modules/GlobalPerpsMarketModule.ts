/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface GlobalPerpsMarketModuleInterface extends utils.Interface {
  functions: {
    "getFeeCollector()": FunctionFragment;
    "getInterestRateParameters()": FunctionFragment;
    "getKeeperCostNodeId()": FunctionFragment;
    "getKeeperRewardGuards()": FunctionFragment;
    "getMarkets()": FunctionFragment;
    "getPerAccountCaps()": FunctionFragment;
    "getReferrerShare(address)": FunctionFragment;
    "getSupportedCollaterals()": FunctionFragment;
    "globalCollateralValue(uint128)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setInterestRateParameters(uint128,uint128,uint128)": FunctionFragment;
    "setKeeperRewardGuards(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPerAccountCaps(uint128,uint128)": FunctionFragment;
    "totalGlobalCollateralValue()": FunctionFragment;
    "updateInterestRate()": FunctionFragment;
    "updateKeeperCostNodeId(bytes32)": FunctionFragment;
    "updateReferrerShare(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFeeCollector"
      | "getInterestRateParameters"
      | "getKeeperCostNodeId"
      | "getKeeperRewardGuards"
      | "getMarkets"
      | "getPerAccountCaps"
      | "getReferrerShare"
      | "getSupportedCollaterals"
      | "globalCollateralValue"
      | "setFeeCollector"
      | "setInterestRateParameters"
      | "setKeeperRewardGuards"
      | "setPerAccountCaps"
      | "totalGlobalCollateralValue"
      | "updateInterestRate"
      | "updateKeeperCostNodeId"
      | "updateReferrerShare"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRateParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeeperCostNodeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeeperRewardGuards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerAccountCaps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCollaterals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalCollateralValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperRewardGuards",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerAccountCaps",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGlobalCollateralValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeeperCostNodeId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferrerShare",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRateParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeeperCostNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeeperRewardGuards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPerAccountCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperRewardGuards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerAccountCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGlobalCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeeperCostNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferrerShare",
    data: BytesLike
  ): Result;

  events: {
    "FeeCollectorSet(address)": EventFragment;
    "InterestRateParametersSet(uint256,uint256,uint256)": EventFragment;
    "InterestRateUpdated(uint128,uint128)": EventFragment;
    "KeeperCostNodeIdUpdated(bytes32)": EventFragment;
    "KeeperRewardGuardsSet(uint256,uint256,uint256,uint256)": EventFragment;
    "PerAccountCapsSet(uint128,uint128)": EventFragment;
    "ReferrerShareUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestRateParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperCostNodeIdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperRewardGuardsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerAccountCapsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerShareUpdated"): EventFragment;
}

export interface FeeCollectorSetEventObject {
  feeCollector: string;
}
export type FeeCollectorSetEvent = TypedEvent<
  [string],
  FeeCollectorSetEventObject
>;

export type FeeCollectorSetEventFilter = TypedEventFilter<FeeCollectorSetEvent>;

export interface InterestRateParametersSetEventObject {
  lowUtilizationInterestRateGradient: BigNumber;
  interestRateGradientBreakpoint: BigNumber;
  highUtilizationInterestRateGradient: BigNumber;
}
export type InterestRateParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  InterestRateParametersSetEventObject
>;

export type InterestRateParametersSetEventFilter =
  TypedEventFilter<InterestRateParametersSetEvent>;

export interface InterestRateUpdatedEventObject {
  superMarketId: BigNumber;
  interestRate: BigNumber;
}
export type InterestRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  InterestRateUpdatedEventObject
>;

export type InterestRateUpdatedEventFilter =
  TypedEventFilter<InterestRateUpdatedEvent>;

export interface KeeperCostNodeIdUpdatedEventObject {
  keeperCostNodeId: string;
}
export type KeeperCostNodeIdUpdatedEvent = TypedEvent<
  [string],
  KeeperCostNodeIdUpdatedEventObject
>;

export type KeeperCostNodeIdUpdatedEventFilter =
  TypedEventFilter<KeeperCostNodeIdUpdatedEvent>;

export interface KeeperRewardGuardsSetEventObject {
  minKeeperRewardUsd: BigNumber;
  minKeeperProfitRatioD18: BigNumber;
  maxKeeperRewardUsd: BigNumber;
  maxKeeperScalingRatioD18: BigNumber;
}
export type KeeperRewardGuardsSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  KeeperRewardGuardsSetEventObject
>;

export type KeeperRewardGuardsSetEventFilter =
  TypedEventFilter<KeeperRewardGuardsSetEvent>;

export interface PerAccountCapsSetEventObject {
  maxPositionsPerAccount: BigNumber;
  maxCollateralsPerAccount: BigNumber;
}
export type PerAccountCapsSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  PerAccountCapsSetEventObject
>;

export type PerAccountCapsSetEventFilter =
  TypedEventFilter<PerAccountCapsSetEvent>;

export interface ReferrerShareUpdatedEventObject {
  referrer: string;
  shareRatioD18: BigNumber;
}
export type ReferrerShareUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ReferrerShareUpdatedEventObject
>;

export type ReferrerShareUpdatedEventFilter =
  TypedEventFilter<ReferrerShareUpdatedEvent>;

export interface GlobalPerpsMarketModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlobalPerpsMarketModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFeeCollector(
      overrides?: CallOverrides
    ): Promise<[string] & { feeCollector: string }>;

    getInterestRateParameters(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lowUtilizationInterestRateGradient: BigNumber;
        interestRateGradientBreakpoint: BigNumber;
        highUtilizationInterestRateGradient: BigNumber;
      }
    >;

    getKeeperCostNodeId(
      overrides?: CallOverrides
    ): Promise<[string] & { keeperCostNodeId: string }>;

    getKeeperRewardGuards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        minKeeperRewardUsd: BigNumber;
        minKeeperProfitRatioD18: BigNumber;
        maxKeeperRewardUsd: BigNumber;
        maxKeeperScalingRatioD18: BigNumber;
      }
    >;

    getMarkets(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { marketIds: BigNumber[] }>;

    getPerAccountCaps(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxPositionsPerAccount: BigNumber;
        maxCollateralsPerAccount: BigNumber;
      }
    >;

    getReferrerShare(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shareRatioD18: BigNumber }>;

    getSupportedCollaterals(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { supportedCollaterals: BigNumber[] }>;

    globalCollateralValue(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralValue: BigNumber }>;

    setFeeCollector(
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setInterestRateParameters(
      lowUtilizationInterestRateGradient: BigNumberish,
      interestRateGradientBreakpoint: BigNumberish,
      highUtilizationInterestRateGradient: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setKeeperRewardGuards(
      minKeeperRewardUsd: BigNumberish,
      minKeeperProfitRatioD18: BigNumberish,
      maxKeeperRewardUsd: BigNumberish,
      maxKeeperScalingRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPerAccountCaps(
      maxPositionsPerAccount: BigNumberish,
      maxCollateralsPerAccount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalGlobalCollateralValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalCollateralValue: BigNumber }>;

    updateInterestRate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateKeeperCostNodeId(
      keeperCostNodeId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReferrerShare(
      referrer: string,
      shareRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  getInterestRateParameters(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lowUtilizationInterestRateGradient: BigNumber;
      interestRateGradientBreakpoint: BigNumber;
      highUtilizationInterestRateGradient: BigNumber;
    }
  >;

  getKeeperCostNodeId(overrides?: CallOverrides): Promise<string>;

  getKeeperRewardGuards(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      minKeeperRewardUsd: BigNumber;
      minKeeperProfitRatioD18: BigNumber;
      maxKeeperRewardUsd: BigNumber;
      maxKeeperScalingRatioD18: BigNumber;
    }
  >;

  getMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPerAccountCaps(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxPositionsPerAccount: BigNumber;
      maxCollateralsPerAccount: BigNumber;
    }
  >;

  getReferrerShare(
    referrer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSupportedCollaterals(overrides?: CallOverrides): Promise<BigNumber[]>;

  globalCollateralValue(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFeeCollector(
    feeCollector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setInterestRateParameters(
    lowUtilizationInterestRateGradient: BigNumberish,
    interestRateGradientBreakpoint: BigNumberish,
    highUtilizationInterestRateGradient: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setKeeperRewardGuards(
    minKeeperRewardUsd: BigNumberish,
    minKeeperProfitRatioD18: BigNumberish,
    maxKeeperRewardUsd: BigNumberish,
    maxKeeperScalingRatioD18: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPerAccountCaps(
    maxPositionsPerAccount: BigNumberish,
    maxCollateralsPerAccount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalGlobalCollateralValue(overrides?: CallOverrides): Promise<BigNumber>;

  updateInterestRate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateKeeperCostNodeId(
    keeperCostNodeId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReferrerShare(
    referrer: string,
    shareRatioD18: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    getInterestRateParameters(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lowUtilizationInterestRateGradient: BigNumber;
        interestRateGradientBreakpoint: BigNumber;
        highUtilizationInterestRateGradient: BigNumber;
      }
    >;

    getKeeperCostNodeId(overrides?: CallOverrides): Promise<string>;

    getKeeperRewardGuards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        minKeeperRewardUsd: BigNumber;
        minKeeperProfitRatioD18: BigNumber;
        maxKeeperRewardUsd: BigNumber;
        maxKeeperScalingRatioD18: BigNumber;
      }
    >;

    getMarkets(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPerAccountCaps(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxPositionsPerAccount: BigNumber;
        maxCollateralsPerAccount: BigNumber;
      }
    >;

    getReferrerShare(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedCollaterals(overrides?: CallOverrides): Promise<BigNumber[]>;

    globalCollateralValue(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeCollector(
      feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestRateParameters(
      lowUtilizationInterestRateGradient: BigNumberish,
      interestRateGradientBreakpoint: BigNumberish,
      highUtilizationInterestRateGradient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeperRewardGuards(
      minKeeperRewardUsd: BigNumberish,
      minKeeperProfitRatioD18: BigNumberish,
      maxKeeperRewardUsd: BigNumberish,
      maxKeeperScalingRatioD18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerAccountCaps(
      maxPositionsPerAccount: BigNumberish,
      maxCollateralsPerAccount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalGlobalCollateralValue(overrides?: CallOverrides): Promise<BigNumber>;

    updateInterestRate(overrides?: CallOverrides): Promise<void>;

    updateKeeperCostNodeId(
      keeperCostNodeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferrerShare(
      referrer: string,
      shareRatioD18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeCollectorSet(address)"(feeCollector?: null): FeeCollectorSetEventFilter;
    FeeCollectorSet(feeCollector?: null): FeeCollectorSetEventFilter;

    "InterestRateParametersSet(uint256,uint256,uint256)"(
      lowUtilizationInterestRateGradient?: null,
      interestRateGradientBreakpoint?: null,
      highUtilizationInterestRateGradient?: null
    ): InterestRateParametersSetEventFilter;
    InterestRateParametersSet(
      lowUtilizationInterestRateGradient?: null,
      interestRateGradientBreakpoint?: null,
      highUtilizationInterestRateGradient?: null
    ): InterestRateParametersSetEventFilter;

    "InterestRateUpdated(uint128,uint128)"(
      superMarketId?: BigNumberish | null,
      interestRate?: null
    ): InterestRateUpdatedEventFilter;
    InterestRateUpdated(
      superMarketId?: BigNumberish | null,
      interestRate?: null
    ): InterestRateUpdatedEventFilter;

    "KeeperCostNodeIdUpdated(bytes32)"(
      keeperCostNodeId?: null
    ): KeeperCostNodeIdUpdatedEventFilter;
    KeeperCostNodeIdUpdated(
      keeperCostNodeId?: null
    ): KeeperCostNodeIdUpdatedEventFilter;

    "KeeperRewardGuardsSet(uint256,uint256,uint256,uint256)"(
      minKeeperRewardUsd?: null,
      minKeeperProfitRatioD18?: null,
      maxKeeperRewardUsd?: null,
      maxKeeperScalingRatioD18?: null
    ): KeeperRewardGuardsSetEventFilter;
    KeeperRewardGuardsSet(
      minKeeperRewardUsd?: null,
      minKeeperProfitRatioD18?: null,
      maxKeeperRewardUsd?: null,
      maxKeeperScalingRatioD18?: null
    ): KeeperRewardGuardsSetEventFilter;

    "PerAccountCapsSet(uint128,uint128)"(
      maxPositionsPerAccount?: null,
      maxCollateralsPerAccount?: null
    ): PerAccountCapsSetEventFilter;
    PerAccountCapsSet(
      maxPositionsPerAccount?: null,
      maxCollateralsPerAccount?: null
    ): PerAccountCapsSetEventFilter;

    "ReferrerShareUpdated(address,uint256)"(
      referrer?: null,
      shareRatioD18?: null
    ): ReferrerShareUpdatedEventFilter;
    ReferrerShareUpdated(
      referrer?: null,
      shareRatioD18?: null
    ): ReferrerShareUpdatedEventFilter;
  };

  estimateGas: {
    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestRateParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getKeeperCostNodeId(overrides?: CallOverrides): Promise<BigNumber>;

    getKeeperRewardGuards(overrides?: CallOverrides): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getPerAccountCaps(overrides?: CallOverrides): Promise<BigNumber>;

    getReferrerShare(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedCollaterals(overrides?: CallOverrides): Promise<BigNumber>;

    globalCollateralValue(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeCollector(
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setInterestRateParameters(
      lowUtilizationInterestRateGradient: BigNumberish,
      interestRateGradientBreakpoint: BigNumberish,
      highUtilizationInterestRateGradient: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setKeeperRewardGuards(
      minKeeperRewardUsd: BigNumberish,
      minKeeperProfitRatioD18: BigNumberish,
      maxKeeperRewardUsd: BigNumberish,
      maxKeeperScalingRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPerAccountCaps(
      maxPositionsPerAccount: BigNumberish,
      maxCollateralsPerAccount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalGlobalCollateralValue(overrides?: CallOverrides): Promise<BigNumber>;

    updateInterestRate(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateKeeperCostNodeId(
      keeperCostNodeId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReferrerShare(
      referrer: string,
      shareRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestRateParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeeperCostNodeId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeeperRewardGuards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPerAccountCaps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReferrerShare(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedCollaterals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalCollateralValue(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setInterestRateParameters(
      lowUtilizationInterestRateGradient: BigNumberish,
      interestRateGradientBreakpoint: BigNumberish,
      highUtilizationInterestRateGradient: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setKeeperRewardGuards(
      minKeeperRewardUsd: BigNumberish,
      minKeeperProfitRatioD18: BigNumberish,
      maxKeeperRewardUsd: BigNumberish,
      maxKeeperScalingRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPerAccountCaps(
      maxPositionsPerAccount: BigNumberish,
      maxCollateralsPerAccount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalGlobalCollateralValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateInterestRate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateKeeperCostNodeId(
      keeperCostNodeId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReferrerShare(
      referrer: string,
      shareRatioD18: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
