/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AsyncOrderCancelModuleInterface extends utils.Interface {
  functions: {
    "cancelOrder(uint128)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "cancelOrder"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;

  events: {
    "AccountCharged(uint128,int256,uint256)": EventFragment;
    "MarketUpdated(uint128,uint256,int256,uint256,int256,int256,int256,uint128)": EventFragment;
    "OrderCancelled(uint128,uint128,uint256,uint256,int128,uint256,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
}

export interface AccountChargedEventObject {
  accountId: BigNumber;
  amount: BigNumber;
  accountDebt: BigNumber;
}
export type AccountChargedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AccountChargedEventObject
>;

export type AccountChargedEventFilter = TypedEventFilter<AccountChargedEvent>;

export interface MarketUpdatedEventObject {
  marketId: BigNumber;
  price: BigNumber;
  skew: BigNumber;
  size: BigNumber;
  sizeDelta: BigNumber;
  currentFundingRate: BigNumber;
  currentFundingVelocity: BigNumber;
  interestRate: BigNumber;
}
export type MarketUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketUpdatedEventObject
>;

export type MarketUpdatedEventFilter = TypedEventFilter<MarketUpdatedEvent>;

export interface OrderCancelledEventObject {
  marketId: BigNumber;
  accountId: BigNumber;
  desiredPrice: BigNumber;
  fillPrice: BigNumber;
  sizeDelta: BigNumber;
  settlementReward: BigNumber;
  trackingCode: string;
  settler: string;
}
export type OrderCancelledEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface AsyncOrderCancelModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AsyncOrderCancelModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOrder(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cancelOrder(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOrder(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountCharged(uint128,int256,uint256)"(
      accountId?: null,
      amount?: null,
      accountDebt?: null
    ): AccountChargedEventFilter;
    AccountCharged(
      accountId?: null,
      amount?: null,
      accountDebt?: null
    ): AccountChargedEventFilter;

    "MarketUpdated(uint128,uint256,int256,uint256,int256,int256,int256,uint128)"(
      marketId?: null,
      price?: null,
      skew?: null,
      size?: null,
      sizeDelta?: null,
      currentFundingRate?: null,
      currentFundingVelocity?: null,
      interestRate?: null
    ): MarketUpdatedEventFilter;
    MarketUpdated(
      marketId?: null,
      price?: null,
      skew?: null,
      size?: null,
      sizeDelta?: null,
      currentFundingRate?: null,
      currentFundingVelocity?: null,
      interestRate?: null
    ): MarketUpdatedEventFilter;

    "OrderCancelled(uint128,uint128,uint256,uint256,int128,uint256,bytes32,address)"(
      marketId?: BigNumberish | null,
      accountId?: BigNumberish | null,
      desiredPrice?: null,
      fillPrice?: null,
      sizeDelta?: null,
      settlementReward?: null,
      trackingCode?: BytesLike | null,
      settler?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      marketId?: BigNumberish | null,
      accountId?: BigNumberish | null,
      desiredPrice?: null,
      fillPrice?: null,
      sizeDelta?: null,
      settlementReward?: null,
      trackingCode?: BytesLike | null,
      settler?: null
    ): OrderCancelledEventFilter;
  };

  estimateGas: {
    cancelOrder(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOrder(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
