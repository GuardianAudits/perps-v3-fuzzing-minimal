/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface LiquidationModuleInterface extends utils.Interface {
  functions: {
    "canLiquidate(uint128)": FunctionFragment;
    "canLiquidateMarginOnly(uint128)": FunctionFragment;
    "flaggedAccounts()": FunctionFragment;
    "liquidate(uint128)": FunctionFragment;
    "liquidateFlagged(uint256)": FunctionFragment;
    "liquidateFlaggedAccounts(uint128[])": FunctionFragment;
    "liquidateMarginOnly(uint128)": FunctionFragment;
    "liquidationCapacity(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canLiquidate"
      | "canLiquidateMarginOnly"
      | "flaggedAccounts"
      | "liquidate"
      | "liquidateFlagged"
      | "liquidateFlaggedAccounts"
      | "liquidateMarginOnly"
      | "liquidationCapacity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canLiquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canLiquidateMarginOnly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flaggedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateFlagged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateFlaggedAccounts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateMarginOnly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCapacity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "canLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidateMarginOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flaggedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateFlaggedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateMarginOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCapacity",
    data: BytesLike
  ): Result;

  events: {
    "AccountFlaggedForLiquidation(uint128,int256,uint256,uint256,uint256)": EventFragment;
    "AccountLiquidationAttempt(uint128,uint256,bool)": EventFragment;
    "AccountMarginLiquidation(uint128,uint256,uint256)": EventFragment;
    "MarketUpdated(uint128,uint256,int256,uint256,int256,int256,int256,uint128)": EventFragment;
    "PositionLiquidated(uint128,uint128,uint256,int128)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AccountFlaggedForLiquidation"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountLiquidationAttempt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountMarginLiquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
}

export interface AccountFlaggedForLiquidationEventObject {
  accountId: BigNumber;
  availableMargin: BigNumber;
  requiredMaintenanceMargin: BigNumber;
  liquidationReward: BigNumber;
  flagReward: BigNumber;
}
export type AccountFlaggedForLiquidationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AccountFlaggedForLiquidationEventObject
>;

export type AccountFlaggedForLiquidationEventFilter =
  TypedEventFilter<AccountFlaggedForLiquidationEvent>;

export interface AccountLiquidationAttemptEventObject {
  accountId: BigNumber;
  reward: BigNumber;
  fullLiquidation: boolean;
}
export type AccountLiquidationAttemptEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  AccountLiquidationAttemptEventObject
>;

export type AccountLiquidationAttemptEventFilter =
  TypedEventFilter<AccountLiquidationAttemptEvent>;

export interface AccountMarginLiquidationEventObject {
  accountId: BigNumber;
  seizedMarginValue: BigNumber;
  liquidationReward: BigNumber;
}
export type AccountMarginLiquidationEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AccountMarginLiquidationEventObject
>;

export type AccountMarginLiquidationEventFilter =
  TypedEventFilter<AccountMarginLiquidationEvent>;

export interface MarketUpdatedEventObject {
  marketId: BigNumber;
  price: BigNumber;
  skew: BigNumber;
  size: BigNumber;
  sizeDelta: BigNumber;
  currentFundingRate: BigNumber;
  currentFundingVelocity: BigNumber;
  interestRate: BigNumber;
}
export type MarketUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketUpdatedEventObject
>;

export type MarketUpdatedEventFilter = TypedEventFilter<MarketUpdatedEvent>;

export interface PositionLiquidatedEventObject {
  accountId: BigNumber;
  marketId: BigNumber;
  amountLiquidated: BigNumber;
  currentPositionSize: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface LiquidationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidationModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canLiquidate(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isEligible: boolean }>;

    canLiquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isEligible: boolean }>;

    flaggedAccounts(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { accountIds: BigNumber[] }>;

    liquidate(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateFlagged(
      maxNumberOfAccounts: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateFlaggedAccounts(
      accountIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidationCapacity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        capacity: BigNumber;
        maxLiquidationInWindow: BigNumber;
        latestLiquidationTimestamp: BigNumber;
      }
    >;
  };

  canLiquidate(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canLiquidateMarginOnly(
    accountId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  flaggedAccounts(overrides?: CallOverrides): Promise<BigNumber[]>;

  liquidate(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateFlagged(
    maxNumberOfAccounts: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateFlaggedAccounts(
    accountIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateMarginOnly(
    accountId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidationCapacity(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      capacity: BigNumber;
      maxLiquidationInWindow: BigNumber;
      latestLiquidationTimestamp: BigNumber;
    }
  >;

  callStatic: {
    canLiquidate(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canLiquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    flaggedAccounts(overrides?: CallOverrides): Promise<BigNumber[]>;

    liquidate(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateFlagged(
      maxNumberOfAccounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateFlaggedAccounts(
      accountIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationCapacity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        capacity: BigNumber;
        maxLiquidationInWindow: BigNumber;
        latestLiquidationTimestamp: BigNumber;
      }
    >;
  };

  filters: {
    "AccountFlaggedForLiquidation(uint128,int256,uint256,uint256,uint256)"(
      accountId?: BigNumberish | null,
      availableMargin?: null,
      requiredMaintenanceMargin?: null,
      liquidationReward?: null,
      flagReward?: null
    ): AccountFlaggedForLiquidationEventFilter;
    AccountFlaggedForLiquidation(
      accountId?: BigNumberish | null,
      availableMargin?: null,
      requiredMaintenanceMargin?: null,
      liquidationReward?: null,
      flagReward?: null
    ): AccountFlaggedForLiquidationEventFilter;

    "AccountLiquidationAttempt(uint128,uint256,bool)"(
      accountId?: BigNumberish | null,
      reward?: null,
      fullLiquidation?: null
    ): AccountLiquidationAttemptEventFilter;
    AccountLiquidationAttempt(
      accountId?: BigNumberish | null,
      reward?: null,
      fullLiquidation?: null
    ): AccountLiquidationAttemptEventFilter;

    "AccountMarginLiquidation(uint128,uint256,uint256)"(
      accountId?: BigNumberish | null,
      seizedMarginValue?: null,
      liquidationReward?: null
    ): AccountMarginLiquidationEventFilter;
    AccountMarginLiquidation(
      accountId?: BigNumberish | null,
      seizedMarginValue?: null,
      liquidationReward?: null
    ): AccountMarginLiquidationEventFilter;

    "MarketUpdated(uint128,uint256,int256,uint256,int256,int256,int256,uint128)"(
      marketId?: null,
      price?: null,
      skew?: null,
      size?: null,
      sizeDelta?: null,
      currentFundingRate?: null,
      currentFundingVelocity?: null,
      interestRate?: null
    ): MarketUpdatedEventFilter;
    MarketUpdated(
      marketId?: null,
      price?: null,
      skew?: null,
      size?: null,
      sizeDelta?: null,
      currentFundingRate?: null,
      currentFundingVelocity?: null,
      interestRate?: null
    ): MarketUpdatedEventFilter;

    "PositionLiquidated(uint128,uint128,uint256,int128)"(
      accountId?: BigNumberish | null,
      marketId?: BigNumberish | null,
      amountLiquidated?: null,
      currentPositionSize?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      accountId?: BigNumberish | null,
      marketId?: BigNumberish | null,
      amountLiquidated?: null,
      currentPositionSize?: null
    ): PositionLiquidatedEventFilter;
  };

  estimateGas: {
    canLiquidate(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canLiquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flaggedAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateFlagged(
      maxNumberOfAccounts: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateFlaggedAccounts(
      accountIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidationCapacity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canLiquidate(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canLiquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flaggedAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateFlagged(
      maxNumberOfAccounts: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateFlaggedAccounts(
      accountIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateMarginOnly(
      accountId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidationCapacity(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
