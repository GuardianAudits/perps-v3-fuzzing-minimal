/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ConfigurableInterface extends utils.Interface {
  functions: {
    "acceptConfigurerRole()": FunctionFragment;
    "configurer()": FunctionFragment;
    "nominateNewConfigurer(address)": FunctionFragment;
    "nominatedConfigurer()": FunctionFragment;
    "renounceConfigurerNomination()": FunctionFragment;
    "setConfigurer(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptConfigurerRole"
      | "configurer"
      | "nominateNewConfigurer"
      | "nominatedConfigurer"
      | "renounceConfigurerNomination"
      | "setConfigurer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptConfigurerRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewConfigurer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedConfigurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceConfigurerNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigurer",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptConfigurerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configurer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewConfigurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedConfigurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceConfigurerNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfigurer",
    data: BytesLike
  ): Result;

  events: {
    "ConfigurerChanged(address,address)": EventFragment;
    "ConfigurerNominated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigurerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigurerNominated"): EventFragment;
}

export interface ConfigurerChangedEventObject {
  oldConfigurer: string;
  newConfigurer: string;
}
export type ConfigurerChangedEvent = TypedEvent<
  [string, string],
  ConfigurerChangedEventObject
>;

export type ConfigurerChangedEventFilter =
  TypedEventFilter<ConfigurerChangedEvent>;

export interface ConfigurerNominatedEventObject {
  newConfigurer: string;
}
export type ConfigurerNominatedEvent = TypedEvent<
  [string],
  ConfigurerNominatedEventObject
>;

export type ConfigurerNominatedEventFilter =
  TypedEventFilter<ConfigurerNominatedEvent>;

export interface Configurable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigurableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptConfigurerRole(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    configurer(overrides?: CallOverrides): Promise<[string]>;

    nominateNewConfigurer(
      newNominatedConfigurer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nominatedConfigurer(overrides?: CallOverrides): Promise<[string]>;

    renounceConfigurerNomination(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfigurer(
      newConfigurer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptConfigurerRole(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  configurer(overrides?: CallOverrides): Promise<string>;

  nominateNewConfigurer(
    newNominatedConfigurer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nominatedConfigurer(overrides?: CallOverrides): Promise<string>;

  renounceConfigurerNomination(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfigurer(
    newConfigurer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptConfigurerRole(overrides?: CallOverrides): Promise<void>;

    configurer(overrides?: CallOverrides): Promise<string>;

    nominateNewConfigurer(
      newNominatedConfigurer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedConfigurer(overrides?: CallOverrides): Promise<string>;

    renounceConfigurerNomination(overrides?: CallOverrides): Promise<void>;

    setConfigurer(
      newConfigurer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConfigurerChanged(address,address)"(
      oldConfigurer?: null,
      newConfigurer?: null
    ): ConfigurerChangedEventFilter;
    ConfigurerChanged(
      oldConfigurer?: null,
      newConfigurer?: null
    ): ConfigurerChangedEventFilter;

    "ConfigurerNominated(address)"(
      newConfigurer?: null
    ): ConfigurerNominatedEventFilter;
    ConfigurerNominated(newConfigurer?: null): ConfigurerNominatedEventFilter;
  };

  estimateGas: {
    acceptConfigurerRole(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    configurer(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewConfigurer(
      newNominatedConfigurer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nominatedConfigurer(overrides?: CallOverrides): Promise<BigNumber>;

    renounceConfigurerNomination(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setConfigurer(
      newConfigurer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptConfigurerRole(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    configurer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewConfigurer(
      newNominatedConfigurer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nominatedConfigurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceConfigurerNomination(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfigurer(
      newConfigurer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
