/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace HeapUtil {
  export type NodeStruct = { id: BigNumberish; priority: BigNumberish };

  export type NodeStructOutput = [BigNumber, BigNumber] & {
    id: BigNumber;
    priority: BigNumber;
  };
}

export interface HeapUtilMockInterface extends utils.Interface {
  functions: {
    "data()": FunctionFragment;
    "dump()": FunctionFragment;
    "extractById(uint128)": FunctionFragment;
    "extractMax()": FunctionFragment;
    "getById(uint128)": FunctionFragment;
    "getByIndex(uint256)": FunctionFragment;
    "getMax()": FunctionFragment;
    "idCount()": FunctionFragment;
    "indices(uint128)": FunctionFragment;
    "insert(uint128,int128)": FunctionFragment;
    "size()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "data"
      | "dump"
      | "extractById"
      | "extractMax"
      | "getById"
      | "getByIndex"
      | "getMax"
      | "idCount"
      | "indices"
      | "insert"
      | "size"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "dump", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extractById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extractMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMax", values?: undefined): string;
  encodeFunctionData(functionFragment: "idCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "indices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "size", values?: undefined): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dump", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extractMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getByIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;

  events: {};
}

export interface HeapUtilMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HeapUtilMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    data(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { idCount: BigNumber }>;

    dump(overrides?: CallOverrides): Promise<[HeapUtil.NodeStructOutput[]]>;

    extractById(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    extractMax(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[HeapUtil.NodeStructOutput]>;

    getByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[HeapUtil.NodeStructOutput]>;

    getMax(overrides?: CallOverrides): Promise<[HeapUtil.NodeStructOutput]>;

    idCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    indices(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    insert(
      id: BigNumberish,
      priority: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    size(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  data(overrides?: CallOverrides): Promise<BigNumber>;

  dump(overrides?: CallOverrides): Promise<HeapUtil.NodeStructOutput[]>;

  extractById(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  extractMax(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<HeapUtil.NodeStructOutput>;

  getByIndex(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<HeapUtil.NodeStructOutput>;

  getMax(overrides?: CallOverrides): Promise<HeapUtil.NodeStructOutput>;

  idCount(overrides?: CallOverrides): Promise<BigNumber>;

  indices(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  insert(
    id: BigNumberish,
    priority: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  size(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    dump(overrides?: CallOverrides): Promise<HeapUtil.NodeStructOutput[]>;

    extractById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HeapUtil.NodeStructOutput>;

    extractMax(overrides?: CallOverrides): Promise<HeapUtil.NodeStructOutput>;

    getById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HeapUtil.NodeStructOutput>;

    getByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HeapUtil.NodeStructOutput>;

    getMax(overrides?: CallOverrides): Promise<HeapUtil.NodeStructOutput>;

    idCount(overrides?: CallOverrides): Promise<BigNumber>;

    indices(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    insert(
      id: BigNumberish,
      priority: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HeapUtil.NodeStructOutput>;

    size(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    dump(overrides?: CallOverrides): Promise<BigNumber>;

    extractById(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    extractMax(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getById(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getByIndex(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getMax(overrides?: CallOverrides): Promise<BigNumber>;

    idCount(overrides?: CallOverrides): Promise<BigNumber>;

    indices(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    insert(
      id: BigNumberish,
      priority: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    size(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dump(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extractById(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    extractMax(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getByIndex(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indices(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insert(
      id: BigNumberish,
      priority: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    size(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
