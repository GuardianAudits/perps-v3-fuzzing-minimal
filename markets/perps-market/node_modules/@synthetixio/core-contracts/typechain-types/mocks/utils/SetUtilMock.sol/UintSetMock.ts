/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface UintSetMockInterface extends utils.Interface {
  functions: {
    "add(uint256)": FunctionFragment;
    "contains(uint256)": FunctionFragment;
    "length()": FunctionFragment;
    "positionOf(uint256)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "replace(uint256,uint256)": FunctionFragment;
    "valueAt(uint256)": FunctionFragment;
    "values()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "contains"
      | "length"
      | "positionOf"
      | "remove"
      | "replace"
      | "valueAt"
      | "values"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "add", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replace",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "values", values?: undefined): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positionOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "replace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "valueAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "values", data: BytesLike): Result;

  events: {};
}

export interface UintSetMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UintSetMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    contains(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    remove(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    replace(
      value: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    valueAt(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    values(overrides?: CallOverrides): Promise<[BigNumber[]]>;
  };

  add(
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  contains(value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  positionOf(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remove(
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  replace(
    value: BigNumberish,
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  valueAt(
    position: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  values(overrides?: CallOverrides): Promise<BigNumber[]>;

  callStatic: {
    add(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contains(value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    positionOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    replace(
      value: BigNumberish,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    valueAt(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    add(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    contains(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    positionOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    replace(
      value: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    valueAt(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    values(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contains(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    replace(
      value: BigNumberish,
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    valueAt(
      position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    values(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
