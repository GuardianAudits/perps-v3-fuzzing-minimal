/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SafeCastMockInterface extends utils.Interface {
  functions: {
    "addressToBytes32(address)": FunctionFragment;
    "bytes32toAddress(bytes32)": FunctionFragment;
    "bytes32toUint(bytes32)": FunctionFragment;
    "int128toInt256(int128)": FunctionFragment;
    "int128toInt32(int128)": FunctionFragment;
    "int128toUint128(int128)": FunctionFragment;
    "int24toInt256(int24)": FunctionFragment;
    "int256toInt128(int256)": FunctionFragment;
    "int256toInt24(int256)": FunctionFragment;
    "int256toUint256(int256)": FunctionFragment;
    "int32toUint32(int32)": FunctionFragment;
    "int56toInt24(int56)": FunctionFragment;
    "int64toUint64(int64)": FunctionFragment;
    "uint128toBytes32(uint128)": FunctionFragment;
    "uint128toInt128(uint128)": FunctionFragment;
    "uint128toUint256(uint128)": FunctionFragment;
    "uint160toUint256(uint160)": FunctionFragment;
    "uint256toBytes32(uint256)": FunctionFragment;
    "uint256toInt256(uint256)": FunctionFragment;
    "uint256toUint128(uint256)": FunctionFragment;
    "uint256toUint160(uint256)": FunctionFragment;
    "uint256toUint32(uint256)": FunctionFragment;
    "uint256toUint64(uint256)": FunctionFragment;
    "uint32toInt32(uint32)": FunctionFragment;
    "uint32toUint256(uint32)": FunctionFragment;
    "uint32toUint56(uint32)": FunctionFragment;
    "uint56toInt56(uint56)": FunctionFragment;
    "uint64toInt64(uint64)": FunctionFragment;
    "zeroI128()": FunctionFragment;
    "zeroI256()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressToBytes32"
      | "bytes32toAddress"
      | "bytes32toUint"
      | "int128toInt256"
      | "int128toInt32"
      | "int128toUint128"
      | "int24toInt256"
      | "int256toInt128"
      | "int256toInt24"
      | "int256toUint256"
      | "int32toUint32"
      | "int56toInt24"
      | "int64toUint64"
      | "uint128toBytes32"
      | "uint128toInt128"
      | "uint128toUint256"
      | "uint160toUint256"
      | "uint256toBytes32"
      | "uint256toInt256"
      | "uint256toUint128"
      | "uint256toUint160"
      | "uint256toUint32"
      | "uint256toUint64"
      | "uint32toInt32"
      | "uint32toUint256"
      | "uint32toUint56"
      | "uint56toInt56"
      | "uint64toInt64"
      | "zeroI128"
      | "zeroI256"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32toAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32toUint",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "int128toInt256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int128toInt32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int128toUint128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int24toInt256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int256toInt128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int256toInt24",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int256toUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int32toUint32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int56toInt24",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "int64toUint64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint128toBytes32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint128toInt128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint128toUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint160toUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256toBytes32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256toInt256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256toUint128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256toUint160",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256toUint32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256toUint64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint32toInt32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint32toUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint32toUint56",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint56toInt56",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uint64toInt64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zeroI128", values?: undefined): string;
  encodeFunctionData(functionFragment: "zeroI256", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addressToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32toAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32toUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int128toInt256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int128toInt32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int128toUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int24toInt256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int256toInt128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int256toInt24",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int256toUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int32toUint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int56toInt24",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "int64toUint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint128toBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint128toInt128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint128toUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint160toUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256toBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256toInt256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256toUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256toUint160",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256toUint32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256toUint64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint32toInt32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint32toUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint32toUint56",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint56toInt56",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint64toInt64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroI128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeroI256", data: BytesLike): Result;

  events: {};
}

export interface SafeCastMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeCastMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressToBytes32(x: string, overrides?: CallOverrides): Promise<[string]>;

    bytes32toAddress(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytes32toUint(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    int128toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    int128toInt32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    int128toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    int24toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    int256toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    int256toInt24(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    int256toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    int32toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    int56toInt24(x: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    int64toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint128toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uint128toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint128toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint160toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint256toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uint256toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint256toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint256toUint160(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint256toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    uint256toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint32toInt32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    uint32toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint32toUint56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint56toInt56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uint64toInt64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zeroI128(overrides?: CallOverrides): Promise<[BigNumber]>;

    zeroI256(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addressToBytes32(x: string, overrides?: CallOverrides): Promise<string>;

  bytes32toAddress(x: BytesLike, overrides?: CallOverrides): Promise<string>;

  bytes32toUint(x: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  int128toInt256(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  int128toInt32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  int128toUint128(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  int24toInt256(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  int256toInt128(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  int256toInt24(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  int256toUint256(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  int32toUint32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  int56toInt24(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  int64toUint64(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  uint128toBytes32(x: BigNumberish, overrides?: CallOverrides): Promise<string>;

  uint128toInt128(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint128toUint256(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint160toUint256(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint256toBytes32(x: BigNumberish, overrides?: CallOverrides): Promise<string>;

  uint256toInt256(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint256toUint128(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint256toUint160(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint256toUint32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  uint256toUint64(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint32toInt32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  uint32toUint256(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint32toUint56(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uint56toInt56(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  uint64toInt64(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  zeroI128(overrides?: CallOverrides): Promise<BigNumber>;

  zeroI256(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addressToBytes32(x: string, overrides?: CallOverrides): Promise<string>;

    bytes32toAddress(x: BytesLike, overrides?: CallOverrides): Promise<string>;

    bytes32toUint(x: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    int128toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int128toInt32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

    int128toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int24toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int256toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int256toInt24(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

    int256toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int32toUint32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

    int56toInt24(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

    int64toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint128toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uint128toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint128toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint160toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uint256toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint160(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    uint256toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint32toInt32(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

    uint32toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint32toUint56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint56toInt56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint64toInt64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroI128(overrides?: CallOverrides): Promise<BigNumber>;

    zeroI256(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addressToBytes32(x: string, overrides?: CallOverrides): Promise<BigNumber>;

    bytes32toAddress(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32toUint(x: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    int128toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int128toInt32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int128toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int24toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int256toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int256toInt24(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int256toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int32toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int56toInt24(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    int64toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint128toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint128toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint128toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint160toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint160(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint256toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint32toInt32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint32toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint32toUint56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint56toInt56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uint64toInt64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeroI128(overrides?: CallOverrides): Promise<BigNumber>;

    zeroI256(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToBytes32(
      x: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32toAddress(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32toUint(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int128toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int128toInt32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int128toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int24toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int256toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int256toInt24(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int256toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int32toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int56toInt24(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    int64toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint128toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint128toInt128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint128toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint160toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256toBytes32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256toInt256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256toUint128(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256toUint160(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256toUint32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256toUint64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint32toInt32(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint32toUint256(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint32toUint56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint56toInt56(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint64toInt64(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zeroI128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroI256(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
