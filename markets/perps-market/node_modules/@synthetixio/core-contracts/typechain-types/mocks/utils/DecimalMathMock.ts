/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface DecimalMathMockInterface extends utils.Interface {
  functions: {
    "divDecimal(int256,int256)": FunctionFragment;
    "divDecimal(uint256,uint256)": FunctionFragment;
    "divDecimalInt128(int128,int128)": FunctionFragment;
    "divDecimalUint128(uint128,uint128)": FunctionFragment;
    "downscale(uint256,uint256)": FunctionFragment;
    "downscale(int256,uint256)": FunctionFragment;
    "downscale(int128,uint256)": FunctionFragment;
    "downscaleUint128(uint128,uint256)": FunctionFragment;
    "mulDecimal(int256,int256)": FunctionFragment;
    "mulDecimal(uint256,uint256)": FunctionFragment;
    "mulDecimalInt128(int128,int128)": FunctionFragment;
    "mulDecimalUint128(uint128,uint128)": FunctionFragment;
    "upscale(uint256,uint256)": FunctionFragment;
    "upscale(int128,uint256)": FunctionFragment;
    "upscale(int256,uint256)": FunctionFragment;
    "upscaleUint128(uint128,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "divDecimal(int256,int256)"
      | "divDecimal(uint256,uint256)"
      | "divDecimalInt128"
      | "divDecimalUint128"
      | "downscale(uint256,uint256)"
      | "downscale(int256,uint256)"
      | "downscale(int128,uint256)"
      | "downscaleUint128"
      | "mulDecimal(int256,int256)"
      | "mulDecimal(uint256,uint256)"
      | "mulDecimalInt128"
      | "mulDecimalUint128"
      | "upscale(uint256,uint256)"
      | "upscale(int128,uint256)"
      | "upscale(int256,uint256)"
      | "upscaleUint128"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "divDecimal(int256,int256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divDecimal(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divDecimalInt128",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "divDecimalUint128",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "downscale(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "downscale(int256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "downscale(int128,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "downscaleUint128",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDecimal(int256,int256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDecimal(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDecimalInt128",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDecimalUint128",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upscale(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upscale(int128,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upscale(int256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upscaleUint128",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "divDecimal(int256,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divDecimal(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divDecimalInt128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divDecimalUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downscale(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downscale(int256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downscale(int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downscaleUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDecimal(int256,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDecimal(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDecimalInt128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDecimalUint128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upscale(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upscale(int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upscale(int256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upscaleUint128",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DecimalMathMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DecimalMathMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "divDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "divDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    divDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    divDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "downscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "downscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "downscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    downscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mulDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mulDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mulDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mulDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "upscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "upscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "upscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    upscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  "divDecimal(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "divDecimal(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  divDecimalInt128(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  divDecimalUint128(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "downscale(uint256,uint256)"(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "downscale(int256,uint256)"(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "downscale(int128,uint256)"(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  downscaleUint128(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mulDecimal(int256,int256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mulDecimal(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mulDecimalInt128(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mulDecimalUint128(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "upscale(uint256,uint256)"(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "upscale(int128,uint256)"(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "upscale(int256,uint256)"(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upscaleUint128(
    x: BigNumberish,
    factor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    "divDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "divDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "downscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "downscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "downscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    downscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    "divDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "divDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "downscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "downscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "downscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    downscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "divDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "divDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "downscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "downscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "downscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    downscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mulDecimal(int256,int256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mulDecimal(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDecimalInt128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDecimalUint128(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upscale(uint256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upscale(int128,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upscale(int256,uint256)"(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upscaleUint128(
      x: BigNumberish,
      factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
