/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IConfigurable,
  IConfigurableInterface,
} from "../../interfaces/IConfigurable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "NotNominatedAsConfigurer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldConfigurer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newConfigurer",
        type: "address",
      },
    ],
    name: "ConfigurerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newConfigurer",
        type: "address",
      },
    ],
    name: "ConfigurerNominated",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptConfigurerRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "configurer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newNominatedConfigurer",
        type: "address",
      },
    ],
    name: "nominateNewConfigurer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedConfigurer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceConfigurerNomination",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newConfigurer",
        type: "address",
      },
    ],
    name: "setConfigurer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IConfigurable__factory {
  static readonly abi = _abi;
  static createInterface(): IConfigurableInterface {
    return new utils.Interface(_abi) as IConfigurableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IConfigurable {
    return new Contract(address, _abi, signerOrProvider) as IConfigurable;
  }
}
