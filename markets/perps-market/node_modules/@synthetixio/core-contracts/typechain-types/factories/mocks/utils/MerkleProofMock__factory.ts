/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleProofMock,
  MerkleProofMockInterface,
} from "../../../mocks/utils/MerkleProofMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610209806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635a9a49c714610030575b600080fd5b61004361003e3660046100ef565b610057565b604051901515815260200160405180910390f35b600061006484848461006c565b949350505050565b600081815b85518110156100ce57600086828151811061008e5761008e6101bd565b602002602001015190508083116100b457600083815260208290526040902092506100c5565b600081815260208490526040902092505b50600101610071565b509092149392505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561010457600080fd5b833567ffffffffffffffff8082111561011c57600080fd5b818601915086601f83011261013057600080fd5b8135602082821115610144576101446100d9565b8160051b604051601f19603f83011681018181108682111715610169576101696100d9565b60405292835281830193508481018201928a84111561018757600080fd5b948201945b838610156101a55785358552948201949382019361018c565b9a918901359950506040909701359695505050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a1f755396ed16ef72886c54c5ce958e585f9a2b79ac7afafff74208629e3590164736f6c63430008160033";

type MerkleProofMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProofMock__factory extends ContractFactory {
  constructor(...args: MerkleProofMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MerkleProofMock> {
    return super.deploy(overrides || {}) as Promise<MerkleProofMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleProofMock {
    return super.attach(address) as MerkleProofMock;
  }
  override connect(signer: Signer): MerkleProofMock__factory {
    return super.connect(signer) as MerkleProofMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofMockInterface {
    return new utils.Interface(_abi) as MerkleProofMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleProofMock {
    return new Contract(address, _abi, signerOrProvider) as MerkleProofMock;
  }
}
