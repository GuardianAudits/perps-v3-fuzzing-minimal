/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AddressUtilMock,
  AddressUtilMockInterface,
} from "../../../mocks/utils/AddressUtilMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631627905514602d575b600080fd5b603e60383660046052565b3b151590565b604051901515815260200160405180910390f35b600060208284031215606357600080fd5b81356001600160a01b0381168114607957600080fd5b939250505056fea2646970667358221220a1ce22a788d83c7ce2e2e7b6089035b56c7c95d1b7e0135325f8300d893e23bc64736f6c63430008160033";

type AddressUtilMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressUtilMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressUtilMock__factory extends ContractFactory {
  constructor(...args: AddressUtilMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<AddressUtilMock> {
    return super.deploy(overrides || {}) as Promise<AddressUtilMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressUtilMock {
    return super.attach(address) as AddressUtilMock;
  }
  override connect(signer: Signer): AddressUtilMock__factory {
    return super.connect(signer) as AddressUtilMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressUtilMockInterface {
    return new utils.Interface(_abi) as AddressUtilMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressUtilMock {
    return new Contract(address, _abi, signerOrProvider) as AddressUtilMock;
  }
}
