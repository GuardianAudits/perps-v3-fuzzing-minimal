/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20Mock,
  ERC20MockInterface,
} from "../../../mocks/token/ERC20Mock";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "existing",
        type: "uint256",
      },
    ],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "existing",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "parameter",
        type: "string",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidParameter",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "tokenDecimals",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f05806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806342966c6811610097578063a457c2d711610066578063a457c2d714610205578063a9059cbb14610218578063da1919b31461022b578063dd62ed3e1461023e57600080fd5b806342966c68146101c457806370a08231146101d757806395d89b41146101ea578063a0712d68146101f257600080fd5b80631dd319cb116100d35780631dd319cb1461017157806323b872dd14610184578063313ce5671461019757806339509351146101b157600080fd5b806306fdde0314610105578063095ea7b3146101235780631624f6c61461014657806318160ddd1461015b575b600080fd5b61010d610251565b60405161011a9190610ae9565b60405180910390f35b610136610131366004610b54565b6102e9565b604051901515815260200161011a565b610159610154366004610c21565b610307565b005b610163610317565b60405190815260200161011a565b61015961017f366004610b54565b61032a565b610136610192366004610c9f565b610338565b61019f61034d565b60405160ff909116815260200161011a565b6101366101bf366004610b54565b610363565b6101596101d2366004610cdb565b6103cc565b6101636101e5366004610cf4565b6103e0565b61010d61040c565b610159610200366004610cdb565b610424565b610136610213366004610b54565b610435565b610136610226366004610b54565b61048f565b610159610239366004610b54565b6104a3565b61016361024c366004610d16565b6104ad565b606061025b6104e7565b805461026690610d49565b80601f016020809104026020016040519081016040528092919081815260200182805461029290610d49565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b5050505050905090565b60006102fd6102f6610553565b8484610590565b5060015b92915050565b61031283838361060b565b505050565b60006103216104e7565b60050154905090565b610334828261072f565b5050565b60006103458484846107f3565b949350505050565b60006103576104e7565b6002015460ff16919050565b60008061036e6104e7565b600401600061037b610553565b6001600160a01b039081168252602080830193909352604091820160009081209188168152925290205490506103c26103b2610553565b856103bd8685610d99565b610590565b5060019392505050565b6103dd6103d7610553565b8261072f565b50565b60006103ea6104e7565b6001600160a01b03909216600090815260039290920160205250604090205490565b60606104166104e7565b600101805461026690610d49565b6103dd61042f610553565b826108cf565b6000806104406104e7565b600401600061044d610553565b6001600160a01b039081168252602080830193909352604091820160009081209188168152925290205490506103c2610484610553565b856103bd8685610dac565b60006102fd61049c610553565b848461094d565b61033482826108cf565b60006104b76104e7565b6001600160a01b039384166000908152600491909101602090815260408083209490951682529290925250205490565b6000806040516020016105359060208082526021908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e455243326040820152600360fc1b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b600073e2c5658cc5c448b48141168f3e475df8f65a1e3e33148015610579575060143610155b1561058b575060131936013560601c90565b503390565b61059982610a1d565b806105a26104e7565b6001600160a01b038581166000818152600493909301602090815260408085209388168086529382529384902094909455915184815290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006106156104e7565b905083516000148061062657508251155b80610632575060ff8216155b156106be5760408051634bab873760e11b81526004810191909152602360448201527f746f6b656e4e616d657c746f6b656e53796d626f6c7c746f6b656e446563696d606482015262616c7360e81b608482015260a06024820152601460a4820152734174206c65617374206f6e65206973207a65726f60601b60c482015260e4015b60405180910390fd5b600281015460ff16158015906106de5750600281015460ff838116911614155b156106fb5760405162dc149f60e41b815260040160405180910390fd5b806107068582610e0f565b50600181016107158482610e0f565b50600201805460ff191660ff929092169190911790555050565b6107398282610a82565b60006107436104e7565b6001600160a01b03841660009081526003820160205260409020549091508281101561078c5760405163cf47918160e01b815260048101849052602481018290526044016106b5565b6001600160a01b03841660008181526003840160209081526040808320805488900390556005860180548890039055518681529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b6000806107fe6104e7565b6001600160a01b038616600090815260048201602052604081209192509081610825610553565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050838110156108735760405163054365bb60e31b815260048101859052602481018290526044016106b5565b6001600160a01b038616600090815260048301602052604081208591610897610553565b6001600160a01b03168152602081019190915260400160002080549190910390556108c386868661094d565b50600195945050505050565b6108d98282610a82565b60006108e36104e7565b9050818160050160008282546108f99190610d99565b90915550506001600160a01b03831660008181526003830160209081526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016105fe565b6109578282610a82565b60006109616104e7565b6001600160a01b0385166000908152600382016020526040902054909150828110156109aa5760405163cf47918160e01b815260048101849052602481018290526044016106b5565b6001600160a01b038086166000818152600385016020526040808220805488900390559287168082529083902080548701905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a0e9087815260200190565b60405180910390a35050505050565b6001600160a01b0381166103dd5760408051634bab873760e11b8152600481019190915260066044820152651d185c99d95d60d21b606482015260806024820152600c60848201526b5a65726f206164647265737360a01b60a482015260c4016106b5565b610a8b82610a1d565b806000036103345760408051634bab873760e11b815260048101919091526006604482015265185b5bdd5b9d60d21b606482015260806024820152600b60848201526a16995c9bc8185b5bdd5b9d60aa1b60a482015260c4016106b5565b60006020808352835180602085015260005b81811015610b1757858101830151858201604001528201610afb565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b4f57600080fd5b919050565b60008060408385031215610b6757600080fd5b610b7083610b38565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ba557600080fd5b813567ffffffffffffffff80821115610bc057610bc0610b7e565b604051601f8301601f19908116603f01168101908282118183101715610be857610be8610b7e565b81604052838152866020858801011115610c0157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610c3657600080fd5b833567ffffffffffffffff80821115610c4e57600080fd5b610c5a87838801610b94565b94506020860135915080821115610c7057600080fd5b50610c7d86828701610b94565b925050604084013560ff81168114610c9457600080fd5b809150509250925092565b600080600060608486031215610cb457600080fd5b610cbd84610b38565b9250610ccb60208501610b38565b9150604084013590509250925092565b600060208284031215610ced57600080fd5b5035919050565b600060208284031215610d0657600080fd5b610d0f82610b38565b9392505050565b60008060408385031215610d2957600080fd5b610d3283610b38565b9150610d4060208401610b38565b90509250929050565b600181811c90821680610d5d57607f821691505b602082108103610d7d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561030157610301610d83565b8181038181111561030157610301610d83565b601f821115610312576000816000526020600020601f850160051c81016020861015610de85750805b601f850160051c820191505b81811015610e0757828155600101610df4565b505050505050565b815167ffffffffffffffff811115610e2957610e29610b7e565b610e3d81610e378454610d49565b84610dbf565b602080601f831160018114610e725760008415610e5a5750858301515b600019600386901b1c1916600185901b178555610e07565b600085815260208120601f198616915b82811015610ea157888601518255948401946001909101908401610e82565b5085821015610ebf5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212203b90bbaeb0eb25c45aa7bad5ec7d93f83f33eb69ab7bab4a1a483a42985221d364736f6c63430008160033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ERC20Mock> {
    return super.deploy(overrides || {}) as Promise<ERC20Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  override connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
