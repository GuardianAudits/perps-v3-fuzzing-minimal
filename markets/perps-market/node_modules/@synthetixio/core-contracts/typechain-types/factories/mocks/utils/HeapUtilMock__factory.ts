/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HeapUtilMock,
  HeapUtilMockInterface,
} from "../../../mocks/utils/HeapUtilMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "uint128",
        name: "idCount",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dump",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "id",
        type: "uint128",
      },
    ],
    name: "extractById",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "extractMax",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "id",
        type: "uint128",
      },
    ],
    name: "getById",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "getByIndex",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMax",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "idCount",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "id",
        type: "uint128",
      },
    ],
    name: "indices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "id",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "priority",
        type: "int128",
      },
    ],
    name: "insert",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "id",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "priority",
            type: "int128",
          },
        ],
        internalType: "struct HeapUtil.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "size",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001b6000610020565b610077565b6001810154600003610074576040805180820190915260008082526020808301828152600180860180549182018155845291909220925191516001600160801b03908116600160801b029216919091179101555b50565b610be6806100866000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063949d225d11610071578063949d225d14610149578063d2f2b20b14610151578063d8bb9e9714610164578063e433054514610177578063e6e462381461018c578063ea31c56a1461019d57600080fd5b80632d883a73146100ae5780633075f552146100d75780634839063f146100df57806373d4a13a146101165780638860805a14610141575b600080fd5b6100c16100bc3660046109bd565b6101b0565b6040516100ce91906109d6565b60405180910390f35b6100c16101d5565b6101086100ed366004610a15565b6001600160801b031660009081526002602052604090205490565b6040519081526020016100ce565b600054610129906001600160801b031681565b6040516001600160801b0390911681526020016100ce565b6100c16101f8565b610108610216565b6100c161015f366004610a15565b610222565b6100c1610172366004610a30565b610241565b61017f610268565b6040516100ce9190610a6d565b6000546001600160801b0316610129565b6100c16101ab366004610a15565b610274565b60408051808201909152600080825260208201526101cf600083610293565b92915050565b60408051808201909152600080825260208201526101f3600061031c565b905090565b60408051808201909152600080825260208201526101f3600061033b565b60006101f3600061035a565b60408051808201909152600080825260208201526101cf60008361037d565b6040805180820190915260008082526020820152610261600084846103b7565b9392505050565b60606101f36000610483565b60408051808201909152600080825260208201526101cf6000836104fd565b6040805180820190915260008082526020820152600183015482106102cb576040805180820190915260008082526020820152610261565b8260010182815481106102e0576102e0610ad0565b6000918252602091829020604080518082019091529101546001600160801b0381168252600160801b9004600f0b918101919091529392505050565b60408051808201909152600080825260208201526101cf826001610293565b60408051808201909152600080825260208201526101cf826001610533565b600181015460009061036d5760006101cf565b6001828101546101cf9190610afc565b60408051808201909152600080825260208201526001600160801b0382166000908152600284016020526040902054610261908490610293565b604080518082019091526000808252602082015260018401546000036103e0576103e0846106cc565b60408051808201909152600080825260208201526103fe85856104fd565b5084546001600160801b031685600061041683610b0f565b82546101009290920a6001600160801b03818102199093169183160217909155600187810180548201808255600091909152604080518082019091529288168352600f87900b602084015291935061047b92508791849161047691610afc565b610723565b949350505050565b606081600101805480602002602001604051908101604052809291908181526020016000905b828210156104f257600084815260209081902060408051808201909152908401546001600160801b0381168252600160801b9004600f0b818301528252600190920191016104a9565b505050509050919050565b60408051808201909152600080825260208201526001600160801b03821660009081526002840160205260409020546102619084905b6040805180820190915260008082526020820152600183015482101580610558575081155b15610577575060408051808201909152600080825260208201526101cf565b600083600101838154811061058e5761058e610ad0565b6000918252602080832060408051808201825293909101546001600160801b038116808552600160801b909104600f0b84840152845260028801909152822082905560018087018054929450916105e59190610afc565b815481106105f5576105f5610ad0565b6000918252602091829020604080518082019091529101546001600160801b0381168252600160801b9004600f0b91810191909152600186018054919250908061064157610641610b35565b60008281526020812082016000199081019190915501905560018501548410156106c457610670858286610723565b6106c48586600101868154811061068957610689610ad0565b6000918252602091829020604080518082019091529101546001600160801b0381168252600160801b9004600f0b91810191909152866107f3565b509392505050565b6001810154600003610720576040805180820190915260008082526020808301828152600180860180549182018155845291909220925191516001600160801b03908116600160801b029216919091179101555b50565b600181148061077057506001830161073c600283610b4b565b8154811061074c5761074c610ad0565b6000918252602091829020015490830151600160801b909104600f90810b91900b13155b1561078557610780838383610962565b505050565b6107e38360018101610798600285610b4b565b815481106107a8576107a8610ad0565b6000918252602091829020604080518082019091529101546001600160801b0381168252600160801b9004600f0b9181019190915283610962565b6107808383610476600285610b4b565b60018301546000610805836002610b6d565b905080821161081e57610819858585610962565b61095b565b600085600101828154811061083557610835610ad0565b6000918252602091829020604080518082019091529101546001600160801b0381168252600160801b9004600f0b918101919091529050610877826001610b84565b831180156108c157508060200151600f0b866001018360016108999190610b84565b815481106108a9576108a9610ad0565b600091825260209091200154600160801b9004600f0b135b1561091e57600186016108d383610b97565b925082815481106108e6576108e6610ad0565b6000918252602091829020604080518082019091529101546001600160801b0381168252600160801b9004600f0b9181019190915290505b8460200151600f0b8160200151600f0b136109435761093e868686610962565b610959565b61094e868286610962565b6109598686846107f3565b505b5050505050565b8183600101828154811061097857610978610ad0565b600091825260208083208451948201516001600160801b03908116600160801b0295811695909517920191909155935190911681526002909301909152604090912055565b6000602082840312156109cf57600080fd5b5035919050565b81516001600160801b03168152602080830151600f0b90820152604081016101cf565b80356001600160801b0381168114610a1057600080fd5b919050565b600060208284031215610a2757600080fd5b610261826109f9565b60008060408385031215610a4357600080fd5b610a4c836109f9565b9150602083013580600f0b8114610a6257600080fd5b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015610ac357610ab384835180516001600160801b03168252602090810151600f0b910152565b9284019290850190600101610a8a565b5091979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156101cf576101cf610ae6565b60006001600160801b03808316818103610b2b57610b2b610ae6565b6001019392505050565b634e487b7160e01b600052603160045260246000fd5b600082610b6857634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176101cf576101cf610ae6565b808201808211156101cf576101cf610ae6565b600060018201610ba957610ba9610ae6565b506001019056fea26469706673582212204d656925322394cd9f8f0362b4869ad4ea9520bd6e38cde4126afeab3fded20d64736f6c63430008160033";

type HeapUtilMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HeapUtilMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HeapUtilMock__factory extends ContractFactory {
  constructor(...args: HeapUtilMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<HeapUtilMock> {
    return super.deploy(overrides || {}) as Promise<HeapUtilMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HeapUtilMock {
    return super.attach(address) as HeapUtilMock;
  }
  override connect(signer: Signer): HeapUtilMock__factory {
    return super.connect(signer) as HeapUtilMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HeapUtilMockInterface {
    return new utils.Interface(_abi) as HeapUtilMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HeapUtilMock {
    return new Contract(address, _abi, signerOrProvider) as HeapUtilMock;
  }
}
