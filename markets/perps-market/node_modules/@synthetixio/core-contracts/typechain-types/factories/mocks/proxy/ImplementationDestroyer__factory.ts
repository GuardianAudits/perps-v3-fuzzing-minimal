/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ImplementationDestroyer,
  ImplementationDestroyerInterface,
} from "../../../mocks/proxy/ImplementationDestroyer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a28061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633659cfe614602d575b600080fd5b603c6038366004603e565b6000ff5b005b600060208284031215604f57600080fd5b81356001600160a01b0381168114606557600080fd5b939250505056fea26469706673582212209d27a0640ab1e4bee2bc087fa6a6dee4303eba70478dec349d8d899a616b8ab264736f6c63430008160033";

type ImplementationDestroyerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImplementationDestroyerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImplementationDestroyer__factory extends ContractFactory {
  constructor(...args: ImplementationDestroyerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ImplementationDestroyer> {
    return super.deploy(overrides || {}) as Promise<ImplementationDestroyer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ImplementationDestroyer {
    return super.attach(address) as ImplementationDestroyer;
  }
  override connect(signer: Signer): ImplementationDestroyer__factory {
    return super.connect(signer) as ImplementationDestroyer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImplementationDestroyerInterface {
    return new utils.Interface(_abi) as ImplementationDestroyerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImplementationDestroyer {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ImplementationDestroyer;
  }
}
