/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  InitializableMock,
  InitializableMockInterface,
} from "../../../mocks/initializable/InitializableMock";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "doubleValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNonCriticalValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialValue",
        type: "uint256",
      },
    ],
    name: "initializeInitializableMock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isInitializableMockInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonCriticalValue",
        type: "uint256",
      },
    ],
    name: "setNonCriticalValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063209652551461006757806376d85cb414610082578063e377818414610097578063e50883141461009f578063f6aceff2146100a7578063f7bca910146100bd575b600080fd5b61006f6100d0565b6040519081526020015b60405180910390f35b61009561009036600461016f565b6100fb565b005b610095610132565b60025461006f565b60005460ff166040519015158152602001610079565b6100956100cb36600461016f565b600255565b6000805460ff166100f4576040516321c4e35760e21b815260040160405180910390fd5b5060015490565b60005460ff161561011e5760405162dc149f60e41b815260040160405180910390fd5b60019081556000805460ff19169091179055565b60005460ff16610155576040516321c4e35760e21b815260040160405180910390fd5b6002600160008282546101689190610188565b9091555050565b60006020828403121561018157600080fd5b5035919050565b80820281158282048414176101ad57634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122030fa9032ac4c5fb6cb7f2d2e89c2256186e980c94bf05c43d01428707ccd174464736f6c63430008160033";

type InitializableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitializableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InitializableMock__factory extends ContractFactory {
  constructor(...args: InitializableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<InitializableMock> {
    return super.deploy(overrides || {}) as Promise<InitializableMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InitializableMock {
    return super.attach(address) as InitializableMock;
  }
  override connect(signer: Signer): InitializableMock__factory {
    return super.connect(signer) as InitializableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitializableMockInterface {
    return new utils.Interface(_abi) as InitializableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InitializableMock {
    return new Contract(address, _abi, signerOrProvider) as InitializableMock;
  }
}
