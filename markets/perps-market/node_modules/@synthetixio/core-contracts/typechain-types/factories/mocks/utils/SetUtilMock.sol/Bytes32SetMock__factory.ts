/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Bytes32SetMock,
  Bytes32SetMockInterface,
} from "../../../../mocks/utils/SetUtilMock.sol/Bytes32SetMock";

const _abi = [
  {
    inputs: [],
    name: "PositionOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueAlreadyInSet",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueNotInSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "positionOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "value",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "newValue",
        type: "bytes32",
      },
    ],
    name: "replace",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "position",
        type: "uint256",
      },
    ],
    name: "valueAt",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "values",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063971217b71161005b578063971217b7146100ef5780639fedf61614610104578063efeb67ac14610117578063fe092b0e1461012a57600080fd5b80631d1a696d1461008d5780631f7b6d32146100b5578063446bffba146100c757806395bc2673146100dc575b600080fd5b6100a061009b3660046104c3565b61013d565b60405190151581526020015b60405180910390f35b6000545b6040519081526020016100ac565b6100da6100d53660046104c3565b61015a565b005b6100da6100ea3660046104c3565b610168565b6100f7610173565b6040516100ac91906104dc565b6100b96101123660046104c3565b61017f565b6100da610125366004610520565b61018b565b6100b96101383660046104c3565b61019b565b60008181526001602052604081205415155b92915050565b905090565b6101656000826101a7565b50565b610165600082610200565b606061015560006102ff565b600061014f818361035b565b610197600083836103a0565b5050565b600061014f818361045e565b6000818152600183016020526040902054156101d65760405163682ad32d60e01b815260040160405180910390fd5b81546001818101845560008481526020808220909301849055845493815293019052604090912055565b6000818152600183016020526040812054908190036102325760405163b3dbc29360e01b815260040160405180910390fd5b600061023f600183610542565b845490915060009061025390600190610542565b90508082146102b857600085600001828154811061027357610273610563565b906000526020600020015490508086600001848154811061029657610296610563565b6000918252602080832090910192909255918252600187019052604090208390555b84548590806102c9576102c9610579565b60019003818190600052602060002001600090559055846001016000858152602001908152602001600020600090555050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561034f57602002820191906000526020600020905b81548152602001906001019080831161033b575b50505050509050919050565b60008181526001830160205260408120546103895760405163b3dbc29360e01b815260040160405180910390fd5b506000908152600191909101602052604090205490565b60008281526001840160205260409020546103ce5760405163b3dbc29360e01b815260040160405180910390fd5b6000818152600184016020526040902054156103fd5760405163682ad32d60e01b815260040160405180910390fd5b600082815260018085016020526040822080549083905591906104209083610542565b90508285600001828154811061043857610438610563565b600091825260208083209091019290925593845260019095019094526040909120555050565b600081158061046d5750825482115b1561048b5760405163eb9bc44760e01b815260040160405180910390fd5b6000610498600184610542565b90508360000181815481106104af576104af610563565b906000526020600020015491505092915050565b6000602082840312156104d557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610514578351835292840192918401916001016104f8565b50909695505050505050565b6000806040838503121561053357600080fd5b50508035926020909101359150565b8181038181111561014f57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212203c093598546a10a6e5c32543cc65d517a6ce17d362fa19c73a9da8fd00d0a60664736f6c63430008160033";

type Bytes32SetMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bytes32SetMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes32SetMock__factory extends ContractFactory {
  constructor(...args: Bytes32SetMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Bytes32SetMock> {
    return super.deploy(overrides || {}) as Promise<Bytes32SetMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytes32SetMock {
    return super.attach(address) as Bytes32SetMock;
  }
  override connect(signer: Signer): Bytes32SetMock__factory {
    return super.connect(signer) as Bytes32SetMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bytes32SetMockInterface {
    return new utils.Interface(_abi) as Bytes32SetMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bytes32SetMock {
    return new Contract(address, _abi, signerOrProvider) as Bytes32SetMock;
  }
}
