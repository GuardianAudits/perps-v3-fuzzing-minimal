/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DecimalMathMock,
  DecimalMathMockInterface,
} from "../../../mocks/utils/DecimalMathMock";

const _abi = [
  {
    inputs: [],
    name: "OverflowInt256ToInt128",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowUint256ToInt256",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowUint256ToUint128",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "divDecimal",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "divDecimal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "x",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "y",
        type: "int128",
      },
    ],
    name: "divDecimalInt128",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "y",
        type: "uint128",
      },
    ],
    name: "divDecimalUint128",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "downscale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "downscale",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "x",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "downscale",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "downscaleUint128",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256",
      },
    ],
    name: "mulDecimal",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "mulDecimal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "x",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "y",
        type: "int128",
      },
    ],
    name: "mulDecimalInt128",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "y",
        type: "uint128",
      },
    ],
    name: "mulDecimalUint128",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "upscale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "x",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "upscale",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "upscale",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "x",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "factor",
        type: "uint256",
      },
    ],
    name: "upscaleUint128",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061090c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806359d2bda311610097578063d6de46ee11610066578063d6de46ee14610227578063e04ba98e1461023a578063f8fc60f31461024d578063ffe3063c1461026057600080fd5b806359d2bda3146101db5780635ee932b3146101ee5780638556fbbe14610201578063b42665f81461021457600080fd5b80632f17ff1e116100d35780632f17ff1e1461017757806347fec6da146101a257806349d91e3b146101b55780634e33ba4d146101c857600080fd5b806302d54c3e14610105578063087d49c01461013057806313c809d41461015157806323b94a5214610164575b600080fd5b61011861011336600461059f565b610273565b604051600f9190910b81526020015b60405180910390f35b61014361013e3660046105d2565b610288565b604051908152602001610127565b61014361015f3660046105d2565b610294565b6101436101723660046105d2565b6102a0565b61018a61018536600461060b565b6102ac565b6040516001600160801b039091168152602001610127565b6101436101b03660046105d2565b6102b8565b6101186101c3366004610635565b6102c4565b61018a6101d636600461065f565b6102d0565b61018a6101e936600461065f565b6102dc565b6101436101fc3660046105d2565b6102e8565b61014361020f3660046105d2565b6102f4565b6101436102223660046105d2565b610300565b6101436102353660046105d2565b61030c565b61018a61024836600461060b565b610318565b61011861025b366004610635565b610324565b61011861026e36600461059f565b610330565b600061027f838361033c565b90505b92915050565b600061027f838361035b565b600061027f838361037a565b600061027f8383610391565b600061027f83836103a8565b600061027f83836103c7565b600061027f83836103e6565b600061027f838361040d565b600061027f838361042c565b600061027f8383610446565b600061027f838361045b565b600061027f8383610475565b600061027f838361048f565b600061027f83836104a4565b600061027f83836104b9565b600061027f83836104d6565b6000670de0b6b3a76400006103518385610691565b61027f91906106ce565b6000670de0b6b3a7640000610370838561070c565b61027f919061073c565b600061038782600a61084e565b61027f908461085a565b600061039e82600a61084e565b61027f9084610871565b6000670de0b6b3a76400006103bd8385610885565b61027f91906108b0565b6000670de0b6b3a76400006103dc838561085a565b61027f9190610871565b60006104036103fe6103f984600a61084e565b6104eb565b610519565b61027f9084610691565b600061042261041d83600a61084e565b61055e565b61027f90846108b0565b600061043c61041d83600a61084e565b61027f9084610885565b600081610370670de0b6b3a76400008561070c565b600061046b6103f983600a61084e565b61027f908461070c565b60006104856103f983600a61084e565b61027f908461073c565b6000816103dc670de0b6b3a76400008561085a565b6000816103bd670de0b6b3a764000085610885565b60006104cc6103fe6103f984600a61084e565b61027f90846106ce565b600081610351670de0b6b3a764000085610691565b60006001600160ff1b038211156105155760405163677c430560e11b815260040160405180910390fd5b5090565b600060016001607f1b031982128061054057506f7fffffffffffffffffffffffffffffff82135b1561051557604051634022cc0360e01b815260040160405180910390fd5b60006001600160801b0382111561051557604051637d5864af60e11b815260040160405180910390fd5b8035600f81900b811461059a57600080fd5b919050565b600080604083850312156105b257600080fd5b6105bb83610588565b91506105c960208401610588565b90509250929050565b600080604083850312156105e557600080fd5b50508035926020909101359150565b80356001600160801b038116811461059a57600080fd5b6000806040838503121561061e57600080fd5b610627836105f4565b91506105c9602084016105f4565b6000806040838503121561064857600080fd5b61065183610588565b946020939093013593505050565b6000806040838503121561067257600080fd5b610651836105f4565b634e487b7160e01b600052601160045260246000fd5b600082600f0b82600f0b0280600f0b91508082146106b1576106b161067b565b5092915050565b634e487b7160e01b600052601260045260246000fd5b600081600f0b83600f0b806106e5576106e56106b8565b60016001607f1b03198214600019821416156107035761070361067b565b90059392505050565b80820260008212600160ff1b841416156107285761072861067b565b81810583148215176102825761028261067b565b60008261074b5761074b6106b8565b600160ff1b8214600019841416156107655761076561067b565b500590565b600181815b808511156107a557816000190482111561078b5761078b61067b565b8085161561079857918102915b93841c939080029061076f565b509250929050565b6000826107bc57506001610282565b816107c957506000610282565b81600181146107df57600281146107e957610805565b6001915050610282565b60ff8411156107fa576107fa61067b565b50506001821b610282565b5060208310610133831016604e8410600b8410161715610828575081810a610282565b610832838361076a565b80600019048211156108465761084661067b565b029392505050565b600061027f83836107ad565b80820281158282048414176102825761028261067b565b600082610880576108806106b8565b500490565b6001600160801b038181168382160280821691908281146108a8576108a861067b565b505092915050565b60006001600160801b03808416806108ca576108ca6106b8565b9216919091049291505056fea2646970667358221220e2bec5b9bd9895e55e78afc2547abed427edd47cdc3829201b8e24de8da3e8eb64736f6c63430008160033";

type DecimalMathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecimalMathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DecimalMathMock__factory extends ContractFactory {
  constructor(...args: DecimalMathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DecimalMathMock> {
    return super.deploy(overrides || {}) as Promise<DecimalMathMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DecimalMathMock {
    return super.attach(address) as DecimalMathMock;
  }
  override connect(signer: Signer): DecimalMathMock__factory {
    return super.connect(signer) as DecimalMathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecimalMathMockInterface {
    return new utils.Interface(_abi) as DecimalMathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DecimalMathMock {
    return new Contract(address, _abi, signerOrProvider) as DecimalMathMock;
  }
}
