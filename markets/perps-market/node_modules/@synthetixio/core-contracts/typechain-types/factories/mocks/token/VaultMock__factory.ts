/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VaultMock,
  VaultMockInterface,
} from "../../../mocks/token/VaultMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "depositWithPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20Permit",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610305806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634a970be714610046578063c4d66de81461005b578063fc0c546a1461008b575b600080fd5b61005961005436600461022e565b6100ba565b005b61005961006936600461027d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60005461009e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b031663d505accf6100d36101f1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b15801561013f57600080fd5b505af1158015610153573d6000803e3d6000fd5b50506000546001600160a01b031691506323b872dd90506101726101f1565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064016020604051808303816000875af11580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e991906102ad565b505050505050565b600073e2c5658cc5c448b48141168f3e475df8f65a1e3e33148015610217575060143610155b15610229575060131936013560601c90565b503390565b600080600080600060a0868803121561024657600080fd5b8535945060208601359350604086013560ff8116811461026557600080fd5b94979396509394606081013594506080013592915050565b60006020828403121561028f57600080fd5b81356001600160a01b03811681146102a657600080fd5b9392505050565b6000602082840312156102bf57600080fd5b815180151581146102a657600080fdfea26469706673582212208843df24a137a3ba22c1f3fb29972e852bfd99ec04d5ea696f09a73f05892a6b64736f6c63430008160033";

type VaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultMock__factory extends ContractFactory {
  constructor(...args: VaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<VaultMock> {
    return super.deploy(overrides || {}) as Promise<VaultMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VaultMock {
    return super.attach(address) as VaultMock;
  }
  override connect(signer: Signer): VaultMock__factory {
    return super.connect(signer) as VaultMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultMockInterface {
    return new utils.Interface(_abi) as VaultMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultMock {
    return new Contract(address, _abi, signerOrProvider) as VaultMock;
  }
}
