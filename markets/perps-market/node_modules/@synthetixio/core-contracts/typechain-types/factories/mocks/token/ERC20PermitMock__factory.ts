/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20PermitMock,
  ERC20PermitMockInterface,
} from "../../../mocks/token/ERC20PermitMock";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "existing",
        type: "uint256",
      },
    ],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "existing",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "parameter",
        type: "string",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidParameter",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recoveredAddress",
        type: "address",
      },
    ],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "PermitDeadlineExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "tokenDecimals",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061134a806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806342966c68116100a2578063a0712d6811610071578063a0712d6814610205578063a457c2d714610218578063a9059cbb1461022b578063d505accf1461023e578063dd62ed3e1461025157600080fd5b806342966c68146101c457806370a08231146101d75780637ecebe00146101ea57806395d89b41146101fd57600080fd5b806323b872dd116100de57806323b872dd1461017c578063313ce5671461018f5780633644e515146101a957806339509351146101b157600080fd5b806306fdde0314610110578063095ea7b31461012e5780631624f6c61461015157806318160ddd14610166575b600080fd5b610118610264565b6040516101259190610e47565b60405180910390f35b61014161013c366004610eb2565b6102fc565b6040519015158152602001610125565b61016461015f366004610f90565b61031a565b005b61016e61032a565b604051908152602001610125565b61014161018a366004611004565b61033d565b610197610352565b60405160ff9091168152602001610125565b61016e610368565b6101416101bf366004610eb2565b610397565b6101646101d2366004611040565b610400565b61016e6101e5366004611059565b610414565b61016e6101f8366004611059565b610440565b61011861046d565b610164610213366004611040565b610485565b610141610226366004610eb2565b610496565b610141610239366004610eb2565b6104f0565b61016461024c36600461107b565b610504565b61016e61025f3660046110e5565b6106e3565b606061026e61071d565b805461027990611118565b80601f01602080910402602001604051908101604052809291908181526020018280546102a590611118565b80156102f25780601f106102c7576101008083540402835291602001916102f2565b820191906000526020600020905b8154815290600101906020018083116102d557829003601f168201915b5050505050905090565b6000610310610309610789565b84846107c6565b5060015b92915050565b610325838383610841565b505050565b600061033461071d565b60050154905090565b600061034a84848461086e565b949350505050565b600061035c61071d565b6002015460ff16919050565b60008061037361094a565b8054909150461461038b5761038661099e565b610391565b80600101545b91505090565b6000806103a261071d565b60040160006103af610789565b6001600160a01b039081168252602080830193909352604091820160009081209188168152925290205490506103f66103e6610789565b856103f18685611168565b6107c6565b5060019392505050565b61041161040b610789565b82610a46565b50565b600061041e61071d565b6001600160a01b03909216600090815260039290920160205250604090205490565b60008061044b61094a565b6001600160a01b03909316600090815260029093016020525050604090205490565b606061047761071d565b600101805461027990611118565b610411610490610789565b82610b0a565b6000806104a161071d565b60040160006104ae610789565b6001600160a01b039081168252602080830193909352604091820160009081209188168152925290205490506103f66104e5610789565b856103f1868561117b565b60006103106104fd610789565b8484610b88565b42841015610525576040516305787bdf60e01b815260040160405180910390fd5b600061052f61094a565b6001600160a01b03891660009081526002820160205260408120549192506001610557610368565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960208201526001600160a01b03808f1692820192909252908c166060820152608081018b905260a0810185905260c081018a905260e001604051602081830303815290604052805190602001206040516020016105f092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff891690820152606081018790526080810186905260a0016020604051602081039080840390855afa15801561064e573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03808e1660009081526002880160205292909220600186019055925082161590508061069e5750896001600160a01b0316816001600160a01b031614155b156106cc5760405163bf18af4360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6106d7818a8a6107c6565b50505050505050505050565b60006106ed61071d565b6001600160a01b039384166000908152600491909101602090815260408083209490951682529290925250205490565b60008060405160200161076b9060208082526021908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e455243326040820152600360fc1b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b600073e2c5658cc5c448b48141168f3e475df8f65a1e3e331480156107af575060143610155b156107c1575060131936013560601c90565b503390565b6107cf82610c58565b806107d861071d565b6001600160a01b038581166000818152600493909301602090815260408085209388168086529382529384902094909455915184815290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b61084c838383610cbd565b600061085661094a565b468155905061086361099e565b600190910155505050565b60008061087961071d565b6001600160a01b0386166000908152600482016020526040812091925090816108a0610789565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050838110156108ee5760405163054365bb60e31b815260048101859052602481018290526044016106c3565b6001600160a01b038616600090815260048301602052604081208591610912610789565b6001600160a01b031681526020810191909152604001600020805491909103905561093e868686610b88565b50600195945050505050565b60008060405160200161076b9060208082526027908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e455243326040820152660c14195c9b5a5d60ca1b606082015260800190565b6000806109a961071d565b90507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f816000016040516109dd919061118e565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c0016040516020818303038152906040528051906020012091505090565b610a508282610ddc565b6000610a5a61071d565b6001600160a01b038416600090815260038201602052604090205490915082811015610aa35760405163cf47918160e01b815260048101849052602481018290526044016106c3565b6001600160a01b03841660008181526003840160209081526040808320805488900390556005860180548890039055518681529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b610b148282610ddc565b6000610b1e61071d565b905081816005016000828254610b349190611168565b90915550506001600160a01b03831660008181526003830160209081526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610834565b610b928282610ddc565b6000610b9c61071d565b6001600160a01b038516600090815260038201602052604090205490915082811015610be55760405163cf47918160e01b815260048101849052602481018290526044016106c3565b6001600160a01b038086166000818152600385016020526040808220805488900390559287168082529083902080548701905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610c499087815260200190565b60405180910390a35050505050565b6001600160a01b0381166104115760408051634bab873760e11b8152600481019190915260066044820152651d185c99d95d60d21b606482015260806024820152600c60848201526b5a65726f206164647265737360a01b60a482015260c4016106c3565b6000610cc761071d565b9050835160001480610cd857508251155b80610ce4575060ff8216155b15610d6b5760408051634bab873760e11b81526004810191909152602360448201527f746f6b656e4e616d657c746f6b656e53796d626f6c7c746f6b656e446563696d606482015262616c7360e81b608482015260a06024820152601460a4820152734174206c65617374206f6e65206973207a65726f60601b60c482015260e4016106c3565b600281015460ff1615801590610d8b5750600281015460ff838116911614155b15610da85760405162dc149f60e41b815260040160405180910390fd5b80610db38582611254565b5060018101610dc28482611254565b50600201805460ff191660ff929092169190911790555050565b610de582610c58565b80600003610e435760408051634bab873760e11b815260048101919091526006604482015265185b5bdd5b9d60d21b606482015260806024820152600b60848201526a16995c9bc8185b5bdd5b9d60aa1b60a482015260c4016106c3565b5050565b60006020808352835180602085015260005b81811015610e7557858101830151858201604001528201610e59565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610ead57600080fd5b919050565b60008060408385031215610ec557600080fd5b610ece83610e96565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610f0357600080fd5b813567ffffffffffffffff80821115610f1e57610f1e610edc565b604051601f8301601f19908116603f01168101908282118183101715610f4657610f46610edc565b81604052838152866020858801011115610f5f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610ead57600080fd5b600080600060608486031215610fa557600080fd5b833567ffffffffffffffff80821115610fbd57600080fd5b610fc987838801610ef2565b94506020860135915080821115610fdf57600080fd5b50610fec86828701610ef2565b925050610ffb60408501610f7f565b90509250925092565b60008060006060848603121561101957600080fd5b61102284610e96565b925061103060208501610e96565b9150604084013590509250925092565b60006020828403121561105257600080fd5b5035919050565b60006020828403121561106b57600080fd5b61107482610e96565b9392505050565b600080600080600080600060e0888a03121561109657600080fd5b61109f88610e96565b96506110ad60208901610e96565b955060408801359450606088013593506110c960808901610f7f565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156110f857600080fd5b61110183610e96565b915061110f60208401610e96565b90509250929050565b600181811c9082168061112c57607f821691505b60208210810361114c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561031457610314611152565b8181038181111561031457610314611152565b600080835461119c81611118565b600182811680156111b457600181146111c9576111f8565b60ff19841687528215158302870194506111f8565b8760005260208060002060005b858110156111ef5781548a8201529084019082016111d6565b50505082870194505b50929695505050505050565b601f821115610325576000816000526020600020601f850160051c8101602086101561122d5750805b601f850160051c820191505b8181101561124c57828155600101611239565b505050505050565b815167ffffffffffffffff81111561126e5761126e610edc565b6112828161127c8454611118565b84611204565b602080601f8311600181146112b7576000841561129f5750858301515b600019600386901b1c1916600185901b17855561124c565b600085815260208120601f198616915b828110156112e6578886015182559484019460019091019084016112c7565b50858210156113045787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122084602444f307490e0f5bf9ce1c4000ef93723c4ce9ae90793de7f9a60ec85fef64736f6c63430008160033";

type ERC20PermitMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20PermitMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20PermitMock__factory extends ContractFactory {
  constructor(...args: ERC20PermitMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ERC20PermitMock> {
    return super.deploy(overrides || {}) as Promise<ERC20PermitMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20PermitMock {
    return super.attach(address) as ERC20PermitMock;
  }
  override connect(signer: Signer): ERC20PermitMock__factory {
    return super.connect(signer) as ERC20PermitMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20PermitMockInterface {
    return new utils.Interface(_abi) as ERC20PermitMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20PermitMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20PermitMock;
  }
}
