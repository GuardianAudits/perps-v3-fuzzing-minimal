/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC721Mock,
  ERC721MockInterface,
} from "../../../mocks/token/ERC721Mock";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "CannotSelfApprove",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "parameter",
        type: "string",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidParameter",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "InvalidTransferRecipient",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "TokenAlreadyMinted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "TokenDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "baseURL",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mintTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061165f806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636352211e116100a2578063a22cb46511610071578063a22cb46514610228578063a6487c531461023b578063b88d4fde1461024e578063c87b56dd14610261578063e985e9c51461027457600080fd5b80636352211e146101d957806370a08231146101ec57806395d89b411461020d578063a0712d681461021557600080fd5b806323b872dd116100de57806323b872dd1461018d57806342842e0e146101a057806342966c68146101b3578063449a52f8146101c657600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e366004611058565b610287565b60405190151581526020015b60405180910390f35b6101406102d9565b60405161012f91906110c5565b61016061015b3660046110d8565b610371565b6040516001600160a01b03909116815260200161012f565b61018b61018636600461110d565b6103c6565b005b61018b61019b366004611137565b610491565b61018b6101ae366004611137565b6104be565b61018b6101c13660046110d8565b6104d9565b61018b6101d436600461110d565b6104e5565b6101606101e73660046110d8565b6104f3565b6101ff6101fa366004611173565b610543565b60405190815260200161012f565b6101406105a1565b61018b6102233660046110d8565b6105b9565b61018b61023636600461118e565b6105ca565b61018b610249366004611276565b6106b0565b61018b61025c3660046112fe565b6106bb565b61014061026f3660046110d8565b610717565b61012361028236600461137a565b61082a565b60006001600160e01b031982166301ffc9a760e01b14806102b857506001600160e01b031982166380ac58cd60e01b145b806102d357506001600160e01b03198216635b5e139f60e01b145b92915050565b60606102e3610867565b80546102ee906113ad565b80601f016020809104026020016040519081016040528092919081815260200182805461031a906113ad565b80156103675780601f1061033c57610100808354040283529160200191610367565b820191906000526020600020905b81548152906001019060200180831161034a57829003601f168201915b5050505050905090565b600061037c826108d4565b6103a15760405163c927e5bf60e01b8152600481018390526024015b60405180910390fd5b6103a9610867565b60009283526005016020525060409020546001600160a01b031690565b60006103d0610867565b60008381526003820160205260409020549091506001600160a01b0390811690841681900361041d5760405163132d05df60e31b81526001600160a01b0385166004820152602401610398565b806001600160a01b031661042f610902565b6001600160a01b03161415801561044f575061044d81610282610902565b155b156104815761045c610902565b60405163472511eb60e11b81526001600160a01b039091166004820152602401610398565b61048b848461093f565b50505050565b6104a261049c610902565b826109ba565b6104ae5761045c610902565b6104b9838383610a19565b505050565b6104b9838383604051806020016040528060008152506106bb565b6104e281610b6c565b50565b6104ef8282610c28565b5050565b60006104fe826108d4565b61051e5760405163c927e5bf60e01b815260048101839052602401610398565b610526610867565b60009283526003016020525060409020546001600160a01b031690565b60006001600160a01b0382166105775760405163b20f76e360e01b81526001600160a01b0383166004820152602401610398565b61057f610867565b6001600160a01b03909216600090815260049290920160205250604090205490565b60606105ab610867565b60010180546102ee906113ad565b6104e26105c4610902565b82610c28565b816001600160a01b03166105dc610902565b6001600160a01b03160361060e5760405163132d05df60e31b81526001600160a01b0383166004820152602401610398565b80610617610867565b6006016000610624610902565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610668610902565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516106a4911515815260200190565b60405180910390a35050565b6104b9838383610d7d565b6106cc6106c6610902565b836109ba565b6106d85761045c610902565b6106e3848484610a19565b6106ef84848484610e93565b61048b576040516307d7841560e21b81526001600160a01b0384166004820152602401610398565b6060610722826108d4565b6107425760405163c927e5bf60e01b815260048101839052602401610398565b600061074c610867565b600201805461075a906113ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610786906113ad565b80156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b5050505050905060008151116107f85760405180602001604052806000815250610823565b8061080284610f41565b6040516020016108139291906113e7565b6040516020818303038152906040525b9392505050565b6000610834610867565b6001600160a01b039384166000908152600691909101602090815260408083209490951682529290925250205460ff1690565b6000806040516020016108b69060208082526022908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e45524337604082015261323160f01b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b6000806108df610867565b60009384526003016020526040909220546001600160a01b031690911415919050565b600073e2c5658cc5c448b48141168f3e475df8f65a1e3e33148015610928575060143610155b1561093a575060131936013560601c90565b503390565b81610948610867565b60008381526005919091016020526040902080546001600160a01b0319166001600160a01b0392831617905581908316610981826104f3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109c6836104f3565b9050806001600160a01b0316846001600160a01b03161480610a015750836001600160a01b03166109f684610371565b6001600160a01b0316145b80610a115750610a11818561082a565b949350505050565b6000610a23610867565b9050836001600160a01b0316610a38836104f3565b6001600160a01b031614610a6a5760405163472511eb60e11b81526001600160a01b0385166004820152602401610398565b6001600160a01b038316610a915760405163d92e233d60e01b815260040160405180910390fd5b610a9c60008361093f565b6001600160a01b03841660009081526004820160205260408120805460019290610ac790849061142c565b90915550506001600160a01b03831660009081526004820160205260408120805460019290610af790849061143f565b90915550506000828152600382016020526040902080546001600160a01b0319166001600160a01b03851617905581836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000610b76610867565b60008381526003820160205260408120549192506001600160a01b0390911690610ba0908461093f565b6001600160a01b03811660009081526004830160205260408120805460019290610bcb90849061142c565b9091555050600083815260038301602052604080822080546001600160a01b0319169055518491906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6000610c32610867565b90506001600160a01b038316610c5b5760405163d92e233d60e01b815260040160405180910390fd5b81600003610cbd5760408051634bab873760e11b8152600481019190915260076044820152661d1bdad95b925960ca1b606482015260806024820152600e60848201526d63616e6e6f74206265207a65726f60901b60a482015260c401610398565b610cc6826108d4565b15610ce7576040516322d1d39560e21b815260048101839052602401610398565b6001600160a01b03831660009081526004820160205260408120805460019290610d1290849061143f565b90915550506000828152600382016020526040902080546001600160a01b0319166001600160a01b03851617905560405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6000610d87610867565b90506000816000018054610d9a906113ad565b90501180610db857506000816001018054610db4906113ad565b9050115b80610dd357506000816002018054610dcf906113ad565b9050115b15610df05760405162dc149f60e41b815260040160405180910390fd5b83511580610dfd57508251155b15610e635760408051634bab873760e11b81526004810191909152600b60448201526a1b985b594bdcde5b589bdb60aa1b60648201526080602482015260116084820152706d757374206e6f7420626520656d70747960781b60a482015260c401610398565b80610e6e85826114a2565b5060018101610e7d84826114a2565b5060028101610e8c83826114a2565b5050505050565b6000833b15610f3657836001600160a01b031663150b7a02610eb3610902565b8786866040518563ffffffff1660e01b8152600401610ed59493929190611562565b6020604051808303816000875af1925050508015610f10575060408051601f3d908101601f19168201909252610f0d9181019061159f565b60015b610f1c57506000610a11565b6001600160e01b031916630a85bd0160e11b149050610a11565b506001949350505050565b606081600003610f685750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f925780610f7c816115bc565b9150610f8b9050600a836115eb565b9150610f6c565b60008167ffffffffffffffff811115610fad57610fad6111ca565b6040519080825280601f01601f191660200182016040528015610fd7576020820181803683370190505b5090505b8415610a1157610fec60018361142c565b9150610ff9600a866115ff565b61100490603061143f565b60f81b81838151811061101957611019611613565b60200101906001600160f81b031916908160001a90535061103b600a866115eb565b9450610fdb565b6001600160e01b0319811681146104e257600080fd5b60006020828403121561106a57600080fd5b813561082381611042565b60005b83811015611090578181015183820152602001611078565b50506000910152565b600081518084526110b1816020860160208601611075565b601f01601f19169290920160200192915050565b6020815260006108236020830184611099565b6000602082840312156110ea57600080fd5b5035919050565b80356001600160a01b038116811461110857600080fd5b919050565b6000806040838503121561112057600080fd5b611129836110f1565b946020939093013593505050565b60008060006060848603121561114c57600080fd5b611155846110f1565b9250611163602085016110f1565b9150604084013590509250925092565b60006020828403121561118557600080fd5b610823826110f1565b600080604083850312156111a157600080fd5b6111aa836110f1565b9150602083013580151581146111bf57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156111fb576111fb6111ca565b604051601f8501601f19908116603f01168101908282118183101715611223576112236111ca565b8160405280935085815286868601111561123c57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261126757600080fd5b610823838335602085016111e0565b60008060006060848603121561128b57600080fd5b833567ffffffffffffffff808211156112a357600080fd5b6112af87838801611256565b945060208601359150808211156112c557600080fd5b6112d187838801611256565b935060408601359150808211156112e757600080fd5b506112f486828701611256565b9150509250925092565b6000806000806080858703121561131457600080fd5b61131d856110f1565b935061132b602086016110f1565b925060408501359150606085013567ffffffffffffffff81111561134e57600080fd5b8501601f8101871361135f57600080fd5b61136e878235602084016111e0565b91505092959194509250565b6000806040838503121561138d57600080fd5b611396836110f1565b91506113a4602084016110f1565b90509250929050565b600181811c908216806113c157607f821691505b6020821081036113e157634e487b7160e01b600052602260045260246000fd5b50919050565b600083516113f9818460208801611075565b83519083019061140d818360208801611075565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102d3576102d3611416565b808201808211156102d3576102d3611416565b601f8211156104b9576000816000526020600020601f850160051c8101602086101561147b5750805b601f850160051c820191505b8181101561149a57828155600101611487565b505050505050565b815167ffffffffffffffff8111156114bc576114bc6111ca565b6114d0816114ca84546113ad565b84611452565b602080601f83116001811461150557600084156114ed5750858301515b600019600386901b1c1916600185901b17855561149a565b600085815260208120601f198616915b8281101561153457888601518255948401946001909101908401611515565b50858210156115525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061159590830184611099565b9695505050505050565b6000602082840312156115b157600080fd5b815161082381611042565b6000600182016115ce576115ce611416565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826115fa576115fa6115d5565b500490565b60008261160e5761160e6115d5565b500690565b634e487b7160e01b600052603260045260246000fdfea26469706673582212209ec02f87071bb5585cf43598ed34654dfedfc85e3be679cb05393f81023c236a64736f6c63430008160033";

type ERC721MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Mock__factory extends ContractFactory {
  constructor(...args: ERC721MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ERC721Mock> {
    return super.deploy(overrides || {}) as Promise<ERC721Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC721Mock {
    return super.attach(address) as ERC721Mock;
  }
  override connect(signer: Signer): ERC721Mock__factory {
    return super.connect(signer) as ERC721Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721MockInterface {
    return new utils.Interface(_abi) as ERC721MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC721Mock;
  }
}
