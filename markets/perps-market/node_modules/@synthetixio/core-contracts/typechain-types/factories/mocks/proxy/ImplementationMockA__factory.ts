/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ImplementationMockA,
  ImplementationMockAInterface,
} from "../../../mocks/proxy/ImplementationMockA";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "ImplementationIsSterile",
    type: "error",
  },
  {
    inputs: [],
    name: "NoChange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contr",
        type: "address",
      },
    ],
    name: "NotAContract",
    type: "error",
  },
  {
    inputs: [],
    name: "UpgradeSimulationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "self",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "getA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newA",
        type: "uint256",
      },
    ],
    name: "setA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "simulateUpgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061054b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c578063aaf10f4214610071578063c7f62cda14610096578063d46300fd146100a9578063ee919d50146100ba575b600080fd5b61006f61006a36600461049d565b6100cd565b005b6100796100d9565b6040516001600160a01b0390911681526020015b60405180910390f35b61006f6100a436600461049d565b6100f2565b60005460405190815260200161008d565b61006f6100c83660046104cd565b600055565b6100d681610207565b50565b60006100e3610332565b546001600160a01b0316919050565b60006100fc610332565b80546001600160a01b038481166001600160a81b031983168117600160a01b1784556040805192909316602480840182905284518085039091018152604490930184526020830180516001600160e01b0316631b2ce7f360e11b179052925193945091926000929161016d916104e6565b600060405180830381855af49150503d80600081146101a8576040519150601f19603f3d011682016040523d82523d6000602084013e6101ad565b606091505b505090508015806101d85750816001600160a01b03166101cb610332565b546001600160a01b031614155b156101f657604051631439f4b560e31b815260040160405180910390fd5b825460ff60a01b1916835560008080fd5b6001600160a01b03811661022e5760405163d92e233d60e01b815260040160405180910390fd5b803b61025d576040516322a2d07b60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6000610267610332565b80549091506001600160a01b03908116908316036102985760405163a88ee57760e01b815260040160405180910390fd5b8054600160a01b900460ff161580156102b557506102b58261039e565b156102de57604051631550430160e01b81526001600160a01b0383166004820152602401610254565b80546001600160a01b0319166001600160a01b038316908117825560405190815230907f5d611f318680d00598bb735d61bacf0c514c6b50e1e5ad30040a4df2b12791c79060200160405180910390a25050565b6000806040516020016103809060208082526021908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e50726f786040820152607960f81b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b604080516001600160a01b03831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166363fb166d60e11b17905290516000918291829130916103f591906104e6565b600060405180830381855af49150503d8060008114610430576040519150601f19603f3d011682016040523d82523d6000602084013e610435565b606091505b5091509150811580156104955750604051631439f4b560e31b6020820152602401604051602081830303815290604052805190602001208160405160200161047d91906104e6565b60405160208183030381529060405280519060200120145b949350505050565b6000602082840312156104af57600080fd5b81356001600160a01b03811681146104c657600080fd5b9392505050565b6000602082840312156104df57600080fd5b5035919050565b6000825160005b8181101561050757602081860181015185830152016104ed565b50600092019182525091905056fea264697066735822122009425b3888a70f0b03ea5666876b94cdc5c2aa6c463652e2dbaaf1ae10e97b9564736f6c63430008160033";

type ImplementationMockAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImplementationMockAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImplementationMockA__factory extends ContractFactory {
  constructor(...args: ImplementationMockAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ImplementationMockA> {
    return super.deploy(overrides || {}) as Promise<ImplementationMockA>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ImplementationMockA {
    return super.attach(address) as ImplementationMockA;
  }
  override connect(signer: Signer): ImplementationMockA__factory {
    return super.connect(signer) as ImplementationMockA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImplementationMockAInterface {
    return new utils.Interface(_abi) as ImplementationMockAInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImplementationMockA {
    return new Contract(address, _abi, signerOrProvider) as ImplementationMockA;
  }
}
