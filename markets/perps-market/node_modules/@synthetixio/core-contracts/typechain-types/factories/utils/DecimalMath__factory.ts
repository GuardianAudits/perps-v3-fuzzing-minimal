/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DecimalMath,
  DecimalMathInterface,
} from "../../utils/DecimalMath";

const _abi = [
  {
    inputs: [],
    name: "PRECISION_FACTOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT_INT",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT_INT128",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT_PRECISE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT_PRECISE_INT",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT_PRECISE_INT128",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UNIT_UINT128",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61016f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c80639d8e2177116100655780639d8e2177146101225780639f3f7fc114610101578063ccd34cd514610131578063d3efe7951461012257600080fd5b80635031052e1461009757806377ad5213146100cc5780637decad29146100ee5780639be8de8f14610101575b600080fd5b6100a6670de0b6b3a764000081565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100db670de0b6b3a764000081565b604051600f9190910b81526020016100c3565b6100db6b033b2e3c9fd0803ce800000081565b6101146b033b2e3c9fd0803ce800000081565b6040519081526020016100c3565b610114670de0b6b3a764000081565b61011460098156fea264697066735822122042cf4ed3553ec2a393f5925922795a0f7f3368c53a3d8636b90356a5f1357d9464736f6c63430008160033";

type DecimalMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecimalMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DecimalMath__factory extends ContractFactory {
  constructor(...args: DecimalMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DecimalMath> {
    return super.deploy(overrides || {}) as Promise<DecimalMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DecimalMath {
    return super.attach(address) as DecimalMath;
  }
  override connect(signer: Signer): DecimalMath__factory {
    return super.connect(signer) as DecimalMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecimalMathInterface {
    return new utils.Interface(_abi) as DecimalMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DecimalMath {
    return new Contract(address, _abi, signerOrProvider) as DecimalMath;
  }
}
