/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UUPSProxyWithOwner,
  UUPSProxyWithOwnerInterface,
} from "../../proxy/UUPSProxyWithOwner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "firstImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contr",
        type: "address",
      },
    ],
    name: "NotAContract",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102ed3803806102ed83398101604081905261002f916101b4565b816001600160a01b0381166100575760405163d92e233d60e01b815260040160405180910390fd5b803b610085576040516322a2d07b60e21b81526001600160a01b038216600482015260240160405180910390fd5b8061008e6100dc565b80546001600160a01b0319166001600160a01b039290921691909117905550806100b6610148565b80546001600160a01b0319166001600160a01b0392909216919091179055506101e79050565b60008060405160200161012a9060208082526021908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e50726f786040820152607960f81b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b60008060405160200161012a9060208082526023908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e4f776e61604082015262626c6560e81b606082015260800190565b80516001600160a01b03811681146101af57600080fd5b919050565b600080604083850312156101c757600080fd5b6101d083610198565b91506101de60208401610198565b90509250929050565b60f8806101f56000396000f3fe608060405236601057600e6013565b005b600e5b6000601b6040565b90503660008037600080366000845af43d6000803e808015603b573d6000f35b3d6000fd5b600060486057565b546001600160a01b0316919050565b60008060405160200160a49060208082526021908201527f696f2e73796e7468657469782e636f72652d636f6e7472616374732e50726f786040820152607960f81b606082015260800190565b60408051601f1981840301815291905280516020909101209291505056fea264697066735822122095b3801da177280b68106b25cd1cd705c1fd3030d0fd4a751eb9d178a624e05664736f6c63430008160033";

type UUPSProxyWithOwnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UUPSProxyWithOwnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UUPSProxyWithOwner__factory extends ContractFactory {
  constructor(...args: UUPSProxyWithOwnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    firstImplementation: string,
    initialOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<UUPSProxyWithOwner> {
    return super.deploy(
      firstImplementation,
      initialOwner,
      overrides || {}
    ) as Promise<UUPSProxyWithOwner>;
  }
  override getDeployTransaction(
    firstImplementation: string,
    initialOwner: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      firstImplementation,
      initialOwner,
      overrides || {}
    );
  }
  override attach(address: string): UUPSProxyWithOwner {
    return super.attach(address) as UUPSProxyWithOwner;
  }
  override connect(signer: Signer): UUPSProxyWithOwner__factory {
    return super.connect(signer) as UUPSProxyWithOwner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UUPSProxyWithOwnerInterface {
    return new utils.Interface(_abi) as UUPSProxyWithOwnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UUPSProxyWithOwner {
    return new Contract(address, _abi, signerOrProvider) as UUPSProxyWithOwner;
  }
}
