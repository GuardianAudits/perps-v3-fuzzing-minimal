import type { BuildOutputs } from './types';
import type { getContract, getContractData, getAllContractDatas } from './utils';
import type * as viem from 'viem';
declare module 'hardhat/types/config' {
    interface HardhatUserConfig {
        cannon?: Record<string, never>;
    }
    interface NetworksConfig {
        cannon: CannonNetworkConfig;
    }
    interface CannonNetworkConfig extends HardhatNetworkConfig {
        port: number;
        url: string;
    }
    interface HardhatConfig {
        cannon: Record<string, never>;
    }
}
declare module 'hardhat/types/runtime' {
    interface HardhatRuntimeEnvironment {
        cannon: {
            /** Output generated on last build */
            outputs?: BuildOutputs;
            provider?: viem.PublicClient & viem.TestClient & viem.WalletClient;
            signers?: viem.Account[];
            /** Get the abi and address from a specific contract */
            getContract: typeof getContract;
            /** Get all the contract data from a specific contract */
            getContractData: typeof getContractData;
            /** Get all the contracts generated during the executed cannon:build */
            getAllContractDatas: typeof getAllContractDatas;
        };
    }
}
//# sourceMappingURL=type-extensions.d.ts.map