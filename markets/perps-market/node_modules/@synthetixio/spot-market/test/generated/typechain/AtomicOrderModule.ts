/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace OrderFees {
  export type DataStruct = {
    fixedFees: BigNumberish;
    utilizationFees: BigNumberish;
    skewFees: BigNumberish;
    wrapperFees: BigNumberish;
  };

  export type DataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fixedFees: BigNumber;
    utilizationFees: BigNumber;
    skewFees: BigNumber;
    wrapperFees: BigNumber;
  };
}

export interface AtomicOrderModuleInterface extends utils.Interface {
  functions: {
    "buy(uint128,uint256,uint256,address)": FunctionFragment;
    "buyExactIn(uint128,uint256,uint256,address)": FunctionFragment;
    "buyExactOut(uint128,uint256,uint256,address)": FunctionFragment;
    "getMarketSkew(uint128)": FunctionFragment;
    "quoteBuyExactIn(uint128,uint256,uint8)": FunctionFragment;
    "quoteBuyExactOut(uint128,uint256,uint8)": FunctionFragment;
    "quoteSellExactIn(uint128,uint256,uint8)": FunctionFragment;
    "quoteSellExactOut(uint128,uint256,uint8)": FunctionFragment;
    "sell(uint128,uint256,uint256,address)": FunctionFragment;
    "sellExactIn(uint128,uint256,uint256,address)": FunctionFragment;
    "sellExactOut(uint128,uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "buyExactIn"
      | "buyExactOut"
      | "getMarketSkew"
      | "quoteBuyExactIn"
      | "quoteBuyExactOut"
      | "quoteSellExactIn"
      | "quoteSellExactOut"
      | "sell"
      | "sellExactIn"
      | "sellExactOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBuyExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBuyExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSellExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSellExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellExactIn",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellExactOut",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyExactIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBuyExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBuyExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSellExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSellExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellExactOut",
    data: BytesLike
  ): Result;

  events: {
    "SynthBought(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)": EventFragment;
    "SynthSold(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SynthBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthSold"): EventFragment;
}

export interface SynthBoughtEventObject {
  synthMarketId: BigNumber;
  synthReturned: BigNumber;
  fees: OrderFees.DataStructOutput;
  collectedFees: BigNumber;
  referrer: string;
  price: BigNumber;
}
export type SynthBoughtEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    OrderFees.DataStructOutput,
    BigNumber,
    string,
    BigNumber
  ],
  SynthBoughtEventObject
>;

export type SynthBoughtEventFilter = TypedEventFilter<SynthBoughtEvent>;

export interface SynthSoldEventObject {
  synthMarketId: BigNumber;
  amountReturned: BigNumber;
  fees: OrderFees.DataStructOutput;
  collectedFees: BigNumber;
  referrer: string;
  price: BigNumber;
}
export type SynthSoldEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    OrderFees.DataStructOutput,
    BigNumber,
    string,
    BigNumber
  ],
  SynthSoldEventObject
>;

export type SynthSoldEventFilter = TypedEventFilter<SynthSoldEvent>;

export interface AtomicOrderModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AtomicOrderModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marketSkew: BigNumber }>;

    quoteBuyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteBuyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        usdAmountCharged: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthToBurn: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  buy(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyExactIn(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyExactOut(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    maxUsdAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketSkew(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteBuyExactIn(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      synthAmount: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  quoteBuyExactOut(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      usdAmountCharged: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  quoteSellExactIn(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      returnAmount: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  quoteSellExactOut(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    stalenessTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, OrderFees.DataStructOutput] & {
      synthToBurn: BigNumber;
      fees: OrderFees.DataStructOutput;
    }
  >;

  sell(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    minUsdAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellExactIn(
    marketId: BigNumberish,
    synthAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellExactOut(
    marketId: BigNumberish,
    usdAmount: BigNumberish,
    maxSynthAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    buyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    buyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        usdAmountCharged: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBuyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteBuyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        usdAmountCharged: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthToBurn: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        usdAmountReceived: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    sellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        synthToBurn: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;
  };

  filters: {
    "SynthBought(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      synthReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthBoughtEventFilter;
    SynthBought(
      synthMarketId?: BigNumberish | null,
      synthReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthBoughtEventFilter;

    "SynthSold(uint256,uint256,(uint256,uint256,int256,int256),uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      amountReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthSoldEventFilter;
    SynthSold(
      synthMarketId?: BigNumberish | null,
      amountReturned?: null,
      fees?: null,
      collectedFees?: null,
      referrer?: null,
      price?: null
    ): SynthSoldEventFilter;
  };

  estimateGas: {
    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBuyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBuyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      maxUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketSkew(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBuyExactIn(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBuyExactOut(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      stalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minUsdAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellExactIn(
      marketId: BigNumberish,
      synthAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellExactOut(
      marketId: BigNumberish,
      usdAmount: BigNumberish,
      maxSynthAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
