/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  AsyncOrderSettlementModule,
  AsyncOrderSettlementModuleInterface,
} from "../AsyncOrderSettlementModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "asyncOrderId",
        type: "uint256",
      },
    ],
    name: "InvalidClaim",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum SettlementStrategy.Type",
        name: "strategyType",
        type: "uint8",
      },
    ],
    name: "InvalidSettlementStrategy",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVerificationResponse",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimum",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "MinimumSettlementAmountNotMet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "asyncOrderId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "settledAt",
        type: "uint256",
      },
    ],
    name: "OrderAlreadySettled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
    ],
    name: "OutsideSettlementWindow",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowInt256ToUint256",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowUint256ToInt256",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowUint256ToUint64",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum SettlementStrategy.Type",
        name: "strategyType",
        type: "uint8",
      },
    ],
    name: "SettlementStrategyNotFound",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint128",
        name: "asyncOrderId",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "finalOrderAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collectedFees",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "settler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum Transaction.Type",
        name: "orderType",
        type: "uint8",
      },
    ],
    name: "OrderSettled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "asyncOrderId",
        type: "uint128",
      },
    ],
    name: "settleOrder",
    outputs: [
      {
        internalType: "uint256",
        name: "finalOrderAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class AsyncOrderSettlementModule__factory {
  static readonly abi = _abi;
  static createInterface(): AsyncOrderSettlementModuleInterface {
    return new utils.Interface(_abi) as AsyncOrderSettlementModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AsyncOrderSettlementModule {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AsyncOrderSettlementModule;
  }
}
