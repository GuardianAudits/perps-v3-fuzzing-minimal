/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace AsyncOrderClaim {
  export type DataStruct = {
    id: BigNumberish;
    owner: string;
    orderType: BigNumberish;
    amountEscrowed: BigNumberish;
    settlementStrategyId: BigNumberish;
    commitmentTime: BigNumberish;
    minimumSettlementAmount: BigNumberish;
    settledAt: BigNumberish;
    referrer: string;
  };

  export type DataStructOutput = [
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    owner: string;
    orderType: number;
    amountEscrowed: BigNumber;
    settlementStrategyId: BigNumber;
    commitmentTime: BigNumber;
    minimumSettlementAmount: BigNumber;
    settledAt: BigNumber;
    referrer: string;
  };
}

export interface AsyncOrderModuleInterface extends utils.Interface {
  functions: {
    "cancelOrder(uint128,uint128)": FunctionFragment;
    "commitOrder(uint128,uint8,uint256,uint256,uint256,address)": FunctionFragment;
    "getAsyncOrderClaim(uint128,uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "cancelOrder" | "commitOrder" | "getAsyncOrderClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitOrder",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAsyncOrderClaim",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAsyncOrderClaim",
    data: BytesLike
  ): Result;

  events: {
    "OrderCancelled(uint128,uint128,(uint128,address,uint8,uint256,uint256,uint256,uint256,uint256,address),address)": EventFragment;
    "OrderCommitted(uint128,uint8,uint256,uint128,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCommitted"): EventFragment;
}

export interface OrderCancelledEventObject {
  marketId: BigNumber;
  asyncOrderId: BigNumber;
  asyncOrderClaim: AsyncOrderClaim.DataStructOutput;
  sender: string;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber, BigNumber, AsyncOrderClaim.DataStructOutput, string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCommittedEventObject {
  marketId: BigNumber;
  orderType: number;
  amountProvided: BigNumber;
  asyncOrderId: BigNumber;
  sender: string;
  referrer: string;
}
export type OrderCommittedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber, string, string],
  OrderCommittedEventObject
>;

export type OrderCommittedEventFilter = TypedEventFilter<OrderCommittedEvent>;

export interface AsyncOrderModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AsyncOrderModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    commitOrder(
      marketId: BigNumberish,
      orderType: BigNumberish,
      amountProvided: BigNumberish,
      settlementStrategyId: BigNumberish,
      minimumSettlementAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAsyncOrderClaim(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [AsyncOrderClaim.DataStructOutput] & {
        asyncOrderClaim: AsyncOrderClaim.DataStructOutput;
      }
    >;
  };

  cancelOrder(
    marketId: BigNumberish,
    asyncOrderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  commitOrder(
    marketId: BigNumberish,
    orderType: BigNumberish,
    amountProvided: BigNumberish,
    settlementStrategyId: BigNumberish,
    minimumSettlementAmount: BigNumberish,
    referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAsyncOrderClaim(
    marketId: BigNumberish,
    asyncOrderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<AsyncOrderClaim.DataStructOutput>;

  callStatic: {
    cancelOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitOrder(
      marketId: BigNumberish,
      orderType: BigNumberish,
      amountProvided: BigNumberish,
      settlementStrategyId: BigNumberish,
      minimumSettlementAmount: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<AsyncOrderClaim.DataStructOutput>;

    getAsyncOrderClaim(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<AsyncOrderClaim.DataStructOutput>;
  };

  filters: {
    "OrderCancelled(uint128,uint128,(uint128,address,uint8,uint256,uint256,uint256,uint256,uint256,address),address)"(
      marketId?: BigNumberish | null,
      asyncOrderId?: BigNumberish | null,
      asyncOrderClaim?: null,
      sender?: string | null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      marketId?: BigNumberish | null,
      asyncOrderId?: BigNumberish | null,
      asyncOrderClaim?: null,
      sender?: string | null
    ): OrderCancelledEventFilter;

    "OrderCommitted(uint128,uint8,uint256,uint128,address,address)"(
      marketId?: BigNumberish | null,
      orderType?: BigNumberish | null,
      amountProvided?: null,
      asyncOrderId?: null,
      sender?: string | null,
      referrer?: null
    ): OrderCommittedEventFilter;
    OrderCommitted(
      marketId?: BigNumberish | null,
      orderType?: BigNumberish | null,
      amountProvided?: null,
      asyncOrderId?: null,
      sender?: string | null,
      referrer?: null
    ): OrderCommittedEventFilter;
  };

  estimateGas: {
    cancelOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    commitOrder(
      marketId: BigNumberish,
      orderType: BigNumberish,
      amountProvided: BigNumberish,
      settlementStrategyId: BigNumberish,
      minimumSettlementAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAsyncOrderClaim(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    commitOrder(
      marketId: BigNumberish,
      orderType: BigNumberish,
      amountProvided: BigNumberish,
      settlementStrategyId: BigNumberish,
      minimumSettlementAmount: BigNumberish,
      referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAsyncOrderClaim(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
