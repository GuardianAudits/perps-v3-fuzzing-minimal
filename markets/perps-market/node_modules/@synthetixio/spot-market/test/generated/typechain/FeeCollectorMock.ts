/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface FeeCollectorMockInterface extends utils.Interface {
  functions: {
    "quoteFees(uint128,uint256,address,uint8)": FunctionFragment;
    "setUsdToken(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "usdToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "quoteFees"
      | "setUsdToken"
      | "supportsInterface"
      | "usdToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "quoteFees",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUsdToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "quoteFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUsdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;

  events: {};
}

export interface FeeCollectorMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeCollectorMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    quoteFees(
      marketId: BigNumberish,
      feeAmount: BigNumberish,
      sender: string,
      tradeType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUsdToken(
      _usdToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    usdToken(overrides?: CallOverrides): Promise<[string]>;
  };

  quoteFees(
    marketId: BigNumberish,
    feeAmount: BigNumberish,
    sender: string,
    tradeType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUsdToken(
    _usdToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  usdToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    quoteFees(
      marketId: BigNumberish,
      feeAmount: BigNumberish,
      sender: string,
      tradeType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUsdToken(_usdToken: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usdToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    quoteFees(
      marketId: BigNumberish,
      feeAmount: BigNumberish,
      sender: string,
      tradeType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUsdToken(
      _usdToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    quoteFees(
      marketId: BigNumberish,
      feeAmount: BigNumberish,
      sender: string,
      tradeType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUsdToken(
      _usdToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
