/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MarketConfigurationModuleInterface extends utils.Interface {
  functions: {
    "getCollateralLeverage(uint128)": FunctionFragment;
    "getCustomTransactorFees(uint128,address)": FunctionFragment;
    "getFeeCollector(uint128)": FunctionFragment;
    "getMarketFees(uint128)": FunctionFragment;
    "getMarketSkewScale(uint128)": FunctionFragment;
    "getMarketUtilizationFees(uint128)": FunctionFragment;
    "getReferrerShare(uint128,address)": FunctionFragment;
    "setAsyncFixedFee(uint128,uint256)": FunctionFragment;
    "setAtomicFixedFee(uint128,uint256)": FunctionFragment;
    "setCollateralLeverage(uint128,uint256)": FunctionFragment;
    "setCustomTransactorFees(uint128,address,uint256)": FunctionFragment;
    "setFeeCollector(uint128,address)": FunctionFragment;
    "setMarketSkewScale(uint128,uint256)": FunctionFragment;
    "setMarketUtilizationFees(uint128,uint256)": FunctionFragment;
    "setWrapperFees(uint128,int256,int256)": FunctionFragment;
    "updateReferrerShare(uint128,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCollateralLeverage"
      | "getCustomTransactorFees"
      | "getFeeCollector"
      | "getMarketFees"
      | "getMarketSkewScale"
      | "getMarketUtilizationFees"
      | "getReferrerShare"
      | "setAsyncFixedFee"
      | "setAtomicFixedFee"
      | "setCollateralLeverage"
      | "setCustomTransactorFees"
      | "setFeeCollector"
      | "setMarketSkewScale"
      | "setMarketUtilizationFees"
      | "setWrapperFees"
      | "updateReferrerShare"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCollateralLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomTransactorFees",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketSkewScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketUtilizationFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerShare",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsyncFixedFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAtomicFixedFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralLeverage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomTransactorFees",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketSkewScale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketUtilizationFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrapperFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferrerShare",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCollateralLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomTransactorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketSkewScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketUtilizationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAsyncFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAtomicFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomTransactorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketSkewScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketUtilizationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrapperFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferrerShare",
    data: BytesLike
  ): Result;

  events: {
    "AsyncFixedFeeSet(uint256,uint256)": EventFragment;
    "AtomicFixedFeeSet(uint256,uint256)": EventFragment;
    "CollateralLeverageSet(uint256,uint256)": EventFragment;
    "FeeCollectorSet(uint256,address)": EventFragment;
    "MarketSkewScaleSet(uint256,uint256)": EventFragment;
    "MarketUtilizationFeesSet(uint256,uint256)": EventFragment;
    "ReferrerShareUpdated(uint128,address,uint256)": EventFragment;
    "TransactorFixedFeeSet(uint256,address,uint256)": EventFragment;
    "WrapperFeesSet(uint256,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AsyncFixedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AtomicFixedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLeverageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketSkewScaleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUtilizationFeesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactorFixedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperFeesSet"): EventFragment;
}

export interface AsyncFixedFeeSetEventObject {
  synthMarketId: BigNumber;
  asyncFixedFee: BigNumber;
}
export type AsyncFixedFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  AsyncFixedFeeSetEventObject
>;

export type AsyncFixedFeeSetEventFilter =
  TypedEventFilter<AsyncFixedFeeSetEvent>;

export interface AtomicFixedFeeSetEventObject {
  synthMarketId: BigNumber;
  atomicFixedFee: BigNumber;
}
export type AtomicFixedFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  AtomicFixedFeeSetEventObject
>;

export type AtomicFixedFeeSetEventFilter =
  TypedEventFilter<AtomicFixedFeeSetEvent>;

export interface CollateralLeverageSetEventObject {
  synthMarketId: BigNumber;
  collateralLeverage: BigNumber;
}
export type CollateralLeverageSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  CollateralLeverageSetEventObject
>;

export type CollateralLeverageSetEventFilter =
  TypedEventFilter<CollateralLeverageSetEvent>;

export interface FeeCollectorSetEventObject {
  synthMarketId: BigNumber;
  feeCollector: string;
}
export type FeeCollectorSetEvent = TypedEvent<
  [BigNumber, string],
  FeeCollectorSetEventObject
>;

export type FeeCollectorSetEventFilter = TypedEventFilter<FeeCollectorSetEvent>;

export interface MarketSkewScaleSetEventObject {
  synthMarketId: BigNumber;
  skewScale: BigNumber;
}
export type MarketSkewScaleSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketSkewScaleSetEventObject
>;

export type MarketSkewScaleSetEventFilter =
  TypedEventFilter<MarketSkewScaleSetEvent>;

export interface MarketUtilizationFeesSetEventObject {
  synthMarketId: BigNumber;
  utilizationFeeRate: BigNumber;
}
export type MarketUtilizationFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketUtilizationFeesSetEventObject
>;

export type MarketUtilizationFeesSetEventFilter =
  TypedEventFilter<MarketUtilizationFeesSetEvent>;

export interface ReferrerShareUpdatedEventObject {
  marketId: BigNumber;
  referrer: string;
  sharePercentage: BigNumber;
}
export type ReferrerShareUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ReferrerShareUpdatedEventObject
>;

export type ReferrerShareUpdatedEventFilter =
  TypedEventFilter<ReferrerShareUpdatedEvent>;

export interface TransactorFixedFeeSetEventObject {
  synthMarketId: BigNumber;
  transactor: string;
  fixedFeeAmount: BigNumber;
}
export type TransactorFixedFeeSetEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TransactorFixedFeeSetEventObject
>;

export type TransactorFixedFeeSetEventFilter =
  TypedEventFilter<TransactorFixedFeeSetEvent>;

export interface WrapperFeesSetEventObject {
  synthMarketId: BigNumber;
  wrapFee: BigNumber;
  unwrapFee: BigNumber;
}
export type WrapperFeesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  WrapperFeesSetEventObject
>;

export type WrapperFeesSetEventFilter = TypedEventFilter<WrapperFeesSetEvent>;

export interface MarketConfigurationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketConfigurationModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralLeverage: BigNumber }>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fixedFeeAmount: BigNumber }>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { feeCollector: string }>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        atomicFixedFee: BigNumber;
        asyncFixedFee: BigNumber;
        wrapFee: BigNumber;
        unwrapFee: BigNumber;
      }
    >;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skewScale: BigNumber }>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { utilizationFeeRate: BigNumber }>;

    getReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sharePercentage: BigNumber }>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getCollateralLeverage(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCustomTransactorFees(
    synthMarketId: BigNumberish,
    transactor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeCollector(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketFees(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      atomicFixedFee: BigNumber;
      asyncFixedFee: BigNumber;
      wrapFee: BigNumber;
      unwrapFee: BigNumber;
    }
  >;

  getMarketSkewScale(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketUtilizationFees(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferrerShare(
    synthMarketId: BigNumberish,
    referrer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAsyncFixedFee(
    synthMarketId: BigNumberish,
    asyncFixedFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAtomicFixedFee(
    synthMarketId: BigNumberish,
    atomicFixedFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCollateralLeverage(
    synthMarketId: BigNumberish,
    collateralLeverage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCustomTransactorFees(
    synthMarketId: BigNumberish,
    transactor: string,
    fixedFeeAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    synthMarketId: BigNumberish,
    feeCollector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketSkewScale(
    synthMarketId: BigNumberish,
    skewScale: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketUtilizationFees(
    synthMarketId: BigNumberish,
    utilizationFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWrapperFees(
    synthMarketId: BigNumberish,
    wrapFee: BigNumberish,
    unwrapFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReferrerShare(
    synthMarketId: BigNumberish,
    referrer: string,
    sharePercentage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        atomicFixedFee: BigNumber;
        asyncFixedFee: BigNumber;
        wrapFee: BigNumber;
        unwrapFee: BigNumber;
      }
    >;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AsyncFixedFeeSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      asyncFixedFee?: null
    ): AsyncFixedFeeSetEventFilter;
    AsyncFixedFeeSet(
      synthMarketId?: BigNumberish | null,
      asyncFixedFee?: null
    ): AsyncFixedFeeSetEventFilter;

    "AtomicFixedFeeSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      atomicFixedFee?: null
    ): AtomicFixedFeeSetEventFilter;
    AtomicFixedFeeSet(
      synthMarketId?: BigNumberish | null,
      atomicFixedFee?: null
    ): AtomicFixedFeeSetEventFilter;

    "CollateralLeverageSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      collateralLeverage?: null
    ): CollateralLeverageSetEventFilter;
    CollateralLeverageSet(
      synthMarketId?: BigNumberish | null,
      collateralLeverage?: null
    ): CollateralLeverageSetEventFilter;

    "FeeCollectorSet(uint256,address)"(
      synthMarketId?: BigNumberish | null,
      feeCollector?: null
    ): FeeCollectorSetEventFilter;
    FeeCollectorSet(
      synthMarketId?: BigNumberish | null,
      feeCollector?: null
    ): FeeCollectorSetEventFilter;

    "MarketSkewScaleSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      skewScale?: null
    ): MarketSkewScaleSetEventFilter;
    MarketSkewScaleSet(
      synthMarketId?: BigNumberish | null,
      skewScale?: null
    ): MarketSkewScaleSetEventFilter;

    "MarketUtilizationFeesSet(uint256,uint256)"(
      synthMarketId?: BigNumberish | null,
      utilizationFeeRate?: null
    ): MarketUtilizationFeesSetEventFilter;
    MarketUtilizationFeesSet(
      synthMarketId?: BigNumberish | null,
      utilizationFeeRate?: null
    ): MarketUtilizationFeesSetEventFilter;

    "ReferrerShareUpdated(uint128,address,uint256)"(
      marketId?: BigNumberish | null,
      referrer?: null,
      sharePercentage?: null
    ): ReferrerShareUpdatedEventFilter;
    ReferrerShareUpdated(
      marketId?: BigNumberish | null,
      referrer?: null,
      sharePercentage?: null
    ): ReferrerShareUpdatedEventFilter;

    "TransactorFixedFeeSet(uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      transactor?: null,
      fixedFeeAmount?: null
    ): TransactorFixedFeeSetEventFilter;
    TransactorFixedFeeSet(
      synthMarketId?: BigNumberish | null,
      transactor?: null,
      fixedFeeAmount?: null
    ): TransactorFixedFeeSetEventFilter;

    "WrapperFeesSet(uint256,int256,int256)"(
      synthMarketId?: BigNumberish | null,
      wrapFee?: null,
      unwrapFee?: null
    ): WrapperFeesSetEventFilter;
    WrapperFeesSet(
      synthMarketId?: BigNumberish | null,
      wrapFee?: null,
      unwrapFee?: null
    ): WrapperFeesSetEventFilter;
  };

  estimateGas: {
    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCollateralLeverage(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeCollector(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketSkewScale(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketUtilizationFees(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAsyncFixedFee(
      synthMarketId: BigNumberish,
      asyncFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAtomicFixedFee(
      synthMarketId: BigNumberish,
      atomicFixedFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCollateralLeverage(
      synthMarketId: BigNumberish,
      collateralLeverage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCustomTransactorFees(
      synthMarketId: BigNumberish,
      transactor: string,
      fixedFeeAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      synthMarketId: BigNumberish,
      feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketSkewScale(
      synthMarketId: BigNumberish,
      skewScale: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketUtilizationFees(
      synthMarketId: BigNumberish,
      utilizationFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWrapperFees(
      synthMarketId: BigNumberish,
      wrapFee: BigNumberish,
      unwrapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReferrerShare(
      synthMarketId: BigNumberish,
      referrer: string,
      sharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
