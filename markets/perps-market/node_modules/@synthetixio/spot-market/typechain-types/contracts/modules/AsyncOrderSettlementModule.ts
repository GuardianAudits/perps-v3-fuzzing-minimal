/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace OrderFees {
  export type DataStruct = {
    fixedFees: BigNumberish;
    utilizationFees: BigNumberish;
    skewFees: BigNumberish;
    wrapperFees: BigNumberish;
  };

  export type DataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fixedFees: BigNumber;
    utilizationFees: BigNumber;
    skewFees: BigNumber;
    wrapperFees: BigNumber;
  };
}

export interface AsyncOrderSettlementModuleInterface extends utils.Interface {
  functions: {
    "settleOrder(uint128,uint128)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "settleOrder"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "settleOrder",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "settleOrder",
    data: BytesLike
  ): Result;

  events: {
    "OrderSettled(uint128,uint128,uint256,(uint256,uint256,int256,int256),uint256,address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderSettled"): EventFragment;
}

export interface OrderSettledEventObject {
  marketId: BigNumber;
  asyncOrderId: BigNumber;
  finalOrderAmount: BigNumber;
  fees: OrderFees.DataStructOutput;
  collectedFees: BigNumber;
  settler: string;
  price: BigNumber;
  orderType: number;
}
export type OrderSettledEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    OrderFees.DataStructOutput,
    BigNumber,
    string,
    BigNumber,
    number
  ],
  OrderSettledEventObject
>;

export type OrderSettledEventFilter = TypedEventFilter<OrderSettledEvent>;

export interface AsyncOrderSettlementModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AsyncOrderSettlementModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    settleOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  settleOrder(
    marketId: BigNumberish,
    asyncOrderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    settleOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        finalOrderAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;
  };

  filters: {
    "OrderSettled(uint128,uint128,uint256,(uint256,uint256,int256,int256),uint256,address,uint256,uint8)"(
      marketId?: BigNumberish | null,
      asyncOrderId?: BigNumberish | null,
      finalOrderAmount?: null,
      fees?: null,
      collectedFees?: null,
      settler?: string | null,
      price?: null,
      orderType?: null
    ): OrderSettledEventFilter;
    OrderSettled(
      marketId?: BigNumberish | null,
      asyncOrderId?: BigNumberish | null,
      finalOrderAmount?: null,
      fees?: null,
      collectedFees?: null,
      settler?: string | null,
      price?: null,
      orderType?: null
    ): OrderSettledEventFilter;
  };

  estimateGas: {
    settleOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    settleOrder(
      marketId: BigNumberish,
      asyncOrderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
