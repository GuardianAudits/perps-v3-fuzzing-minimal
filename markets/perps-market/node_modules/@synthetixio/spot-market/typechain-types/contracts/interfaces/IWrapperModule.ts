/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace OrderFees {
  export type DataStruct = {
    fixedFees: BigNumberish;
    utilizationFees: BigNumberish;
    skewFees: BigNumberish;
    wrapperFees: BigNumberish;
  };

  export type DataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fixedFees: BigNumber;
    utilizationFees: BigNumber;
    skewFees: BigNumber;
    wrapperFees: BigNumber;
  };
}

export interface IWrapperModuleInterface extends utils.Interface {
  functions: {
    "getWrapper(uint128)": FunctionFragment;
    "setWrapper(uint128,address,uint256)": FunctionFragment;
    "unwrap(uint128,uint256,uint256)": FunctionFragment;
    "wrap(uint128,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getWrapper" | "setWrapper" | "unwrap" | "wrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getWrapper",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrapper",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getWrapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWrapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;

  events: {
    "SynthUnwrapped(uint256,uint256,(uint256,uint256,int256,int256),uint256)": EventFragment;
    "SynthWrapped(uint256,uint256,(uint256,uint256,int256,int256),uint256)": EventFragment;
    "WrapperSet(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SynthUnwrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthWrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperSet"): EventFragment;
}

export interface SynthUnwrappedEventObject {
  synthMarketId: BigNumber;
  amountUnwrapped: BigNumber;
  fees: OrderFees.DataStructOutput;
  feesCollected: BigNumber;
}
export type SynthUnwrappedEvent = TypedEvent<
  [BigNumber, BigNumber, OrderFees.DataStructOutput, BigNumber],
  SynthUnwrappedEventObject
>;

export type SynthUnwrappedEventFilter = TypedEventFilter<SynthUnwrappedEvent>;

export interface SynthWrappedEventObject {
  synthMarketId: BigNumber;
  amountWrapped: BigNumber;
  fees: OrderFees.DataStructOutput;
  feesCollected: BigNumber;
}
export type SynthWrappedEvent = TypedEvent<
  [BigNumber, BigNumber, OrderFees.DataStructOutput, BigNumber],
  SynthWrappedEventObject
>;

export type SynthWrappedEventFilter = TypedEventFilter<SynthWrappedEvent>;

export interface WrapperSetEventObject {
  synthMarketId: BigNumber;
  wrapCollateralType: string;
  maxWrappableAmount: BigNumber;
}
export type WrapperSetEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  WrapperSetEventObject
>;

export type WrapperSetEventFilter = TypedEventFilter<WrapperSetEvent>;

export interface IWrapperModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWrapperModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getWrapper(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        wrapCollateralType: string;
        maxWrappableAmount: BigNumber;
      }
    >;

    setWrapper(
      marketId: BigNumberish,
      wrapCollateralType: string,
      maxWrappableAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unwrap(
      marketId: BigNumberish,
      unwrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    wrap(
      marketId: BigNumberish,
      wrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getWrapper(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      wrapCollateralType: string;
      maxWrappableAmount: BigNumber;
    }
  >;

  setWrapper(
    marketId: BigNumberish,
    wrapCollateralType: string,
    maxWrappableAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unwrap(
    marketId: BigNumberish,
    unwrapAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  wrap(
    marketId: BigNumberish,
    wrapAmount: BigNumberish,
    minAmountReceived: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getWrapper(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        wrapCollateralType: string;
        maxWrappableAmount: BigNumber;
      }
    >;

    setWrapper(
      marketId: BigNumberish,
      wrapCollateralType: string,
      maxWrappableAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrap(
      marketId: BigNumberish,
      unwrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        returnCollateralAmount: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;

    wrap(
      marketId: BigNumberish,
      wrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, OrderFees.DataStructOutput] & {
        amountToMint: BigNumber;
        fees: OrderFees.DataStructOutput;
      }
    >;
  };

  filters: {
    "SynthUnwrapped(uint256,uint256,(uint256,uint256,int256,int256),uint256)"(
      synthMarketId?: BigNumberish | null,
      amountUnwrapped?: null,
      fees?: null,
      feesCollected?: null
    ): SynthUnwrappedEventFilter;
    SynthUnwrapped(
      synthMarketId?: BigNumberish | null,
      amountUnwrapped?: null,
      fees?: null,
      feesCollected?: null
    ): SynthUnwrappedEventFilter;

    "SynthWrapped(uint256,uint256,(uint256,uint256,int256,int256),uint256)"(
      synthMarketId?: BigNumberish | null,
      amountWrapped?: null,
      fees?: null,
      feesCollected?: null
    ): SynthWrappedEventFilter;
    SynthWrapped(
      synthMarketId?: BigNumberish | null,
      amountWrapped?: null,
      fees?: null,
      feesCollected?: null
    ): SynthWrappedEventFilter;

    "WrapperSet(uint256,address,uint256)"(
      synthMarketId?: BigNumberish | null,
      wrapCollateralType?: string | null,
      maxWrappableAmount?: null
    ): WrapperSetEventFilter;
    WrapperSet(
      synthMarketId?: BigNumberish | null,
      wrapCollateralType?: string | null,
      maxWrappableAmount?: null
    ): WrapperSetEventFilter;
  };

  estimateGas: {
    getWrapper(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setWrapper(
      marketId: BigNumberish,
      wrapCollateralType: string,
      maxWrappableAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unwrap(
      marketId: BigNumberish,
      unwrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    wrap(
      marketId: BigNumberish,
      wrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getWrapper(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setWrapper(
      marketId: BigNumberish,
      wrapCollateralType: string,
      maxWrappableAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unwrap(
      marketId: BigNumberish,
      unwrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    wrap(
      marketId: BigNumberish,
      wrapAmount: BigNumberish,
      minAmountReceived: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
