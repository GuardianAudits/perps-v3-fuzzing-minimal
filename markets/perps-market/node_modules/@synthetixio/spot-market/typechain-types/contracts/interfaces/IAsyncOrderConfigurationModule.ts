/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace SettlementStrategy {
  export type DataStruct = {
    strategyType: BigNumberish;
    settlementDelay: BigNumberish;
    settlementWindowDuration: BigNumberish;
    priceVerificationContract: string;
    feedId: BytesLike;
    url: string;
    settlementReward: BigNumberish;
    priceDeviationTolerance: BigNumberish;
    minimumUsdExchangeAmount: BigNumberish;
    maxRoundingLoss: BigNumberish;
    disabled: boolean;
  };

  export type DataStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    strategyType: number;
    settlementDelay: BigNumber;
    settlementWindowDuration: BigNumber;
    priceVerificationContract: string;
    feedId: string;
    url: string;
    settlementReward: BigNumber;
    priceDeviationTolerance: BigNumber;
    minimumUsdExchangeAmount: BigNumber;
    maxRoundingLoss: BigNumber;
    disabled: boolean;
  };
}

export interface IAsyncOrderConfigurationModuleInterface
  extends utils.Interface {
  functions: {
    "addSettlementStrategy(uint128,(uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "getSettlementStrategy(uint128,uint256)": FunctionFragment;
    "setSettlementStrategy(uint128,uint256,(uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "setSettlementStrategyEnabled(uint128,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSettlementStrategy"
      | "getSettlementStrategy"
      | "setSettlementStrategy"
      | "setSettlementStrategyEnabled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSettlementStrategy",
    values: [BigNumberish, SettlementStrategy.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementStrategy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementStrategy",
    values: [BigNumberish, BigNumberish, SettlementStrategy.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementStrategyEnabled",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSettlementStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementStrategyEnabled",
    data: BytesLike
  ): Result;

  events: {
    "SettlementStrategyAdded(uint128,uint256)": EventFragment;
    "SettlementStrategySet(uint128,uint256,(uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SettlementStrategyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementStrategySet"): EventFragment;
}

export interface SettlementStrategyAddedEventObject {
  synthMarketId: BigNumber;
  strategyId: BigNumber;
}
export type SettlementStrategyAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SettlementStrategyAddedEventObject
>;

export type SettlementStrategyAddedEventFilter =
  TypedEventFilter<SettlementStrategyAddedEvent>;

export interface SettlementStrategySetEventObject {
  synthMarketId: BigNumber;
  strategyId: BigNumber;
  strategy: SettlementStrategy.DataStructOutput;
}
export type SettlementStrategySetEvent = TypedEvent<
  [BigNumber, BigNumber, SettlementStrategy.DataStructOutput],
  SettlementStrategySetEventObject
>;

export type SettlementStrategySetEventFilter =
  TypedEventFilter<SettlementStrategySetEvent>;

export interface IAsyncOrderConfigurationModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAsyncOrderConfigurationModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSettlementStrategy(
      synthMarketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SettlementStrategy.DataStructOutput] & {
        settlementStrategy: SettlementStrategy.DataStructOutput;
      }
    >;

    setSettlementStrategy(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSettlementStrategyEnabled(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addSettlementStrategy(
    synthMarketId: BigNumberish,
    strategy: SettlementStrategy.DataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getSettlementStrategy(
    marketId: BigNumberish,
    strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SettlementStrategy.DataStructOutput>;

  setSettlementStrategy(
    synthMarketId: BigNumberish,
    strategyId: BigNumberish,
    strategy: SettlementStrategy.DataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSettlementStrategyEnabled(
    synthMarketId: BigNumberish,
    strategyId: BigNumberish,
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSettlementStrategy(
      synthMarketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SettlementStrategy.DataStructOutput>;

    setSettlementStrategy(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementStrategyEnabled(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SettlementStrategyAdded(uint128,uint256)"(
      synthMarketId?: BigNumberish | null,
      strategyId?: BigNumberish | null
    ): SettlementStrategyAddedEventFilter;
    SettlementStrategyAdded(
      synthMarketId?: BigNumberish | null,
      strategyId?: BigNumberish | null
    ): SettlementStrategyAddedEventFilter;

    "SettlementStrategySet(uint128,uint256,(uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool))"(
      synthMarketId?: BigNumberish | null,
      strategyId?: BigNumberish | null,
      strategy?: null
    ): SettlementStrategySetEventFilter;
    SettlementStrategySet(
      synthMarketId?: BigNumberish | null,
      strategyId?: BigNumberish | null,
      strategy?: null
    ): SettlementStrategySetEventFilter;
  };

  estimateGas: {
    addSettlementStrategy(
      synthMarketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSettlementStrategy(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSettlementStrategyEnabled(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSettlementStrategy(
      synthMarketId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getSettlementStrategy(
      marketId: BigNumberish,
      strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSettlementStrategy(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      strategy: SettlementStrategy.DataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSettlementStrategyEnabled(
      synthMarketId: BigNumberish,
      strategyId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
