/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ISpotMarketFactoryModuleInterface extends utils.Interface {
  functions: {
    "acceptMarketOwnership(uint128)": FunctionFragment;
    "createSynth(string,string,address)": FunctionFragment;
    "getMarketOwner(uint128)": FunctionFragment;
    "getNominatedMarketOwner(uint128)": FunctionFragment;
    "getPriceData(uint128)": FunctionFragment;
    "getSynth(uint128)": FunctionFragment;
    "getSynthImpl(uint128)": FunctionFragment;
    "indexPrice(uint128,uint128,uint8)": FunctionFragment;
    "minimumCredit(uint128)": FunctionFragment;
    "name(uint128)": FunctionFragment;
    "nominateMarketOwner(uint128,address)": FunctionFragment;
    "renounceMarketNomination(uint128)": FunctionFragment;
    "renounceMarketOwnership(uint128)": FunctionFragment;
    "reportedDebt(uint128)": FunctionFragment;
    "setDecayRate(uint128,uint256)": FunctionFragment;
    "setSynthImplementation(address)": FunctionFragment;
    "setSynthetix(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePriceData(uint128,bytes32,bytes32,uint256)": FunctionFragment;
    "upgradeSynthImpl(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptMarketOwnership"
      | "createSynth"
      | "getMarketOwner"
      | "getNominatedMarketOwner"
      | "getPriceData"
      | "getSynth"
      | "getSynthImpl"
      | "indexPrice"
      | "minimumCredit"
      | "name"
      | "nominateMarketOwner"
      | "renounceMarketNomination"
      | "renounceMarketOwnership"
      | "reportedDebt"
      | "setDecayRate"
      | "setSynthImplementation"
      | "setSynthetix"
      | "supportsInterface"
      | "updatePriceData"
      | "upgradeSynthImpl"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptMarketOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSynth",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNominatedMarketOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynthImpl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nominateMarketOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMarketNomination",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMarketOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecayRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynthImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynthetix",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceData",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeSynthImpl",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptMarketOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNominatedMarketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSynth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSynthImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateMarketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMarketNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMarketOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynthImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynthetix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeSynthImpl",
    data: BytesLike
  ): Result;

  events: {
    "DecayRateUpdated(uint128,uint256)": EventFragment;
    "MarketNominationRenounced(uint128,address)": EventFragment;
    "MarketOwnerChanged(uint128,address,address)": EventFragment;
    "MarketOwnerNominated(uint128,address)": EventFragment;
    "SynthImplementationSet(address)": EventFragment;
    "SynthImplementationUpgraded(uint256,address,address)": EventFragment;
    "SynthPriceDataUpdated(uint256,bytes32,bytes32,uint256)": EventFragment;
    "SynthRegistered(uint256,address)": EventFragment;
    "SynthetixSystemSet(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecayRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketNominationRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthImplementationSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SynthImplementationUpgraded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthPriceDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthetixSystemSet"): EventFragment;
}

export interface DecayRateUpdatedEventObject {
  marketId: BigNumber;
  rate: BigNumber;
}
export type DecayRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DecayRateUpdatedEventObject
>;

export type DecayRateUpdatedEventFilter =
  TypedEventFilter<DecayRateUpdatedEvent>;

export interface MarketNominationRenouncedEventObject {
  marketId: BigNumber;
  nominee: string;
}
export type MarketNominationRenouncedEvent = TypedEvent<
  [BigNumber, string],
  MarketNominationRenouncedEventObject
>;

export type MarketNominationRenouncedEventFilter =
  TypedEventFilter<MarketNominationRenouncedEvent>;

export interface MarketOwnerChangedEventObject {
  marketId: BigNumber;
  oldOwner: string;
  newOwner: string;
}
export type MarketOwnerChangedEvent = TypedEvent<
  [BigNumber, string, string],
  MarketOwnerChangedEventObject
>;

export type MarketOwnerChangedEventFilter =
  TypedEventFilter<MarketOwnerChangedEvent>;

export interface MarketOwnerNominatedEventObject {
  marketId: BigNumber;
  newOwner: string;
}
export type MarketOwnerNominatedEvent = TypedEvent<
  [BigNumber, string],
  MarketOwnerNominatedEventObject
>;

export type MarketOwnerNominatedEventFilter =
  TypedEventFilter<MarketOwnerNominatedEvent>;

export interface SynthImplementationSetEventObject {
  synthImplementation: string;
}
export type SynthImplementationSetEvent = TypedEvent<
  [string],
  SynthImplementationSetEventObject
>;

export type SynthImplementationSetEventFilter =
  TypedEventFilter<SynthImplementationSetEvent>;

export interface SynthImplementationUpgradedEventObject {
  synthMarketId: BigNumber;
  proxy: string;
  implementation: string;
}
export type SynthImplementationUpgradedEvent = TypedEvent<
  [BigNumber, string, string],
  SynthImplementationUpgradedEventObject
>;

export type SynthImplementationUpgradedEventFilter =
  TypedEventFilter<SynthImplementationUpgradedEvent>;

export interface SynthPriceDataUpdatedEventObject {
  synthMarketId: BigNumber;
  buyFeedId: string;
  sellFeedId: string;
  strictStalenessTolerance: BigNumber;
}
export type SynthPriceDataUpdatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  SynthPriceDataUpdatedEventObject
>;

export type SynthPriceDataUpdatedEventFilter =
  TypedEventFilter<SynthPriceDataUpdatedEvent>;

export interface SynthRegisteredEventObject {
  synthMarketId: BigNumber;
  synthTokenAddress: string;
}
export type SynthRegisteredEvent = TypedEvent<
  [BigNumber, string],
  SynthRegisteredEventObject
>;

export type SynthRegisteredEventFilter = TypedEventFilter<SynthRegisteredEvent>;

export interface SynthetixSystemSetEventObject {
  synthetix: string;
  usdTokenAddress: string;
  oracleManager: string;
}
export type SynthetixSystemSetEvent = TypedEvent<
  [string, string, string],
  SynthetixSystemSetEventObject
>;

export type SynthetixSystemSetEventFilter =
  TypedEventFilter<SynthetixSystemSetEvent>;

export interface ISpotMarketFactoryModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISpotMarketFactoryModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        buyFeedId: string;
        sellFeedId: string;
        strictPriceStalenessTolerance: BigNumber;
      }
    >;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { synthAddress: string }>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { implAddress: string }>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(marketId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSynthetix(
      synthetix: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptMarketOwnership(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createSynth(
    tokenName: string,
    tokenSymbol: string,
    synthOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketOwner(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNominatedMarketOwner(
    synthMarketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPriceData(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      buyFeedId: string;
      sellFeedId: string;
      strictPriceStalenessTolerance: BigNumber;
    }
  >;

  getSynth(marketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getSynthImpl(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  indexPrice(
    marketId: BigNumberish,
    transactionType: BigNumberish,
    priceTolerance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumCredit(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(marketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  nominateMarketOwner(
    synthMarketId: BigNumberish,
    newNominatedOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceMarketNomination(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceMarketOwnership(
    synthMarketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reportedDebt(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDecayRate(
    marketId: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSynthImplementation(
    synthImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSynthetix(
    synthetix: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePriceData(
    marketId: BigNumberish,
    buyFeedId: BytesLike,
    sellFeedId: BytesLike,
    strictPriceStalenessTolerance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeSynthImpl(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        buyFeedId: string;
        sellFeedId: string;
        strictPriceStalenessTolerance: BigNumber;
      }
    >;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(marketId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSynthetix(synthetix: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecayRateUpdated(uint128,uint256)"(
      marketId?: BigNumberish | null,
      rate?: null
    ): DecayRateUpdatedEventFilter;
    DecayRateUpdated(
      marketId?: BigNumberish | null,
      rate?: null
    ): DecayRateUpdatedEventFilter;

    "MarketNominationRenounced(uint128,address)"(
      marketId?: BigNumberish | null,
      nominee?: null
    ): MarketNominationRenouncedEventFilter;
    MarketNominationRenounced(
      marketId?: BigNumberish | null,
      nominee?: null
    ): MarketNominationRenouncedEventFilter;

    "MarketOwnerChanged(uint128,address,address)"(
      marketId?: BigNumberish | null,
      oldOwner?: null,
      newOwner?: null
    ): MarketOwnerChangedEventFilter;
    MarketOwnerChanged(
      marketId?: BigNumberish | null,
      oldOwner?: null,
      newOwner?: null
    ): MarketOwnerChangedEventFilter;

    "MarketOwnerNominated(uint128,address)"(
      marketId?: BigNumberish | null,
      newOwner?: null
    ): MarketOwnerNominatedEventFilter;
    MarketOwnerNominated(
      marketId?: BigNumberish | null,
      newOwner?: null
    ): MarketOwnerNominatedEventFilter;

    "SynthImplementationSet(address)"(
      synthImplementation?: null
    ): SynthImplementationSetEventFilter;
    SynthImplementationSet(
      synthImplementation?: null
    ): SynthImplementationSetEventFilter;

    "SynthImplementationUpgraded(uint256,address,address)"(
      synthMarketId?: BigNumberish | null,
      proxy?: string | null,
      implementation?: null
    ): SynthImplementationUpgradedEventFilter;
    SynthImplementationUpgraded(
      synthMarketId?: BigNumberish | null,
      proxy?: string | null,
      implementation?: null
    ): SynthImplementationUpgradedEventFilter;

    "SynthPriceDataUpdated(uint256,bytes32,bytes32,uint256)"(
      synthMarketId?: BigNumberish | null,
      buyFeedId?: BytesLike | null,
      sellFeedId?: BytesLike | null,
      strictStalenessTolerance?: null
    ): SynthPriceDataUpdatedEventFilter;
    SynthPriceDataUpdated(
      synthMarketId?: BigNumberish | null,
      buyFeedId?: BytesLike | null,
      sellFeedId?: BytesLike | null,
      strictStalenessTolerance?: null
    ): SynthPriceDataUpdatedEventFilter;

    "SynthRegistered(uint256,address)"(
      synthMarketId?: BigNumberish | null,
      synthTokenAddress?: null
    ): SynthRegisteredEventFilter;
    SynthRegistered(
      synthMarketId?: BigNumberish | null,
      synthTokenAddress?: null
    ): SynthRegisteredEventFilter;

    "SynthetixSystemSet(address,address,address)"(
      synthetix?: null,
      usdTokenAddress?: null,
      oracleManager?: null
    ): SynthetixSystemSetEventFilter;
    SynthetixSystemSet(
      synthetix?: null,
      usdTokenAddress?: null,
      oracleManager?: null
    ): SynthetixSystemSetEventFilter;
  };

  estimateGas: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(marketId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSynthetix(
      synthetix: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createSynth(
      tokenName: string,
      tokenSymbol: string,
      synthOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNominatedMarketOwner(
      synthMarketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceData(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynth(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynthImpl(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexPrice(
      marketId: BigNumberish,
      transactionType: BigNumberish,
      priceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumCredit(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateMarketOwner(
      synthMarketId: BigNumberish,
      newNominatedOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceMarketNomination(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceMarketOwnership(
      synthMarketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDecayRate(
      marketId: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSynthImplementation(
      synthImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSynthetix(
      synthetix: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePriceData(
      marketId: BigNumberish,
      buyFeedId: BytesLike,
      sellFeedId: BytesLike,
      strictPriceStalenessTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeSynthImpl(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
