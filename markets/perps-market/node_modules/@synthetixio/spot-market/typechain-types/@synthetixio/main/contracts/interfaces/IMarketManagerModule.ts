/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IMarketManagerModuleInterface extends utils.Interface {
  functions: {
    "depositMarketUsd(uint128,address,uint256)": FunctionFragment;
    "distributeDebtToPools(uint128,uint256)": FunctionFragment;
    "getMarketAddress(uint128)": FunctionFragment;
    "getMarketCollateral(uint128)": FunctionFragment;
    "getMarketDebtPerShare(uint128)": FunctionFragment;
    "getMarketFees(uint128,uint256)": FunctionFragment;
    "getMarketMinDelegateTime(uint128)": FunctionFragment;
    "getMarketNetIssuance(uint128)": FunctionFragment;
    "getMarketPoolDebtDistribution(uint128,uint128)": FunctionFragment;
    "getMarketPools(uint128)": FunctionFragment;
    "getMarketReportedDebt(uint128)": FunctionFragment;
    "getMarketTotalDebt(uint128)": FunctionFragment;
    "getMinLiquidityRatio(uint128)": FunctionFragment;
    "getOracleManager()": FunctionFragment;
    "getUsdToken()": FunctionFragment;
    "getWithdrawableMarketUsd(uint128)": FunctionFragment;
    "isMarketCapacityLocked(uint128)": FunctionFragment;
    "registerMarket(address)": FunctionFragment;
    "setMarketMinDelegateTime(uint128,uint32)": FunctionFragment;
    "setMinLiquidityRatio(uint128,uint256)": FunctionFragment;
    "withdrawMarketUsd(uint128,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositMarketUsd"
      | "distributeDebtToPools"
      | "getMarketAddress"
      | "getMarketCollateral"
      | "getMarketDebtPerShare"
      | "getMarketFees"
      | "getMarketMinDelegateTime"
      | "getMarketNetIssuance"
      | "getMarketPoolDebtDistribution"
      | "getMarketPools"
      | "getMarketReportedDebt"
      | "getMarketTotalDebt"
      | "getMinLiquidityRatio"
      | "getOracleManager"
      | "getUsdToken"
      | "getWithdrawableMarketUsd"
      | "isMarketCapacityLocked"
      | "registerMarket"
      | "setMarketMinDelegateTime"
      | "setMinLiquidityRatio"
      | "withdrawMarketUsd"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositMarketUsd",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDebtToPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketDebtPerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMinDelegateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketNetIssuance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPoolDebtDistribution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketReportedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTotalDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinLiquidityRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableMarketUsd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCapacityLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketMinDelegateTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidityRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMarketUsd",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositMarketUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeDebtToPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketDebtPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMinDelegateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketNetIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPoolDebtDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketReportedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableMarketUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCapacityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketMinDelegateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMarketUsd",
    data: BytesLike
  ): Result;

  events: {
    "MarketRegistered(address,uint128,address)": EventFragment;
    "MarketSystemFeePaid(uint128,uint256)": EventFragment;
    "MarketUsdDeposited(uint128,address,uint256,address,int128,int128,uint256)": EventFragment;
    "MarketUsdWithdrawn(uint128,address,uint256,address,int128,int128,uint256)": EventFragment;
    "SetMarketMinLiquidityRatio(uint128,uint256)": EventFragment;
    "SetMinDelegateTime(uint128,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketSystemFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUsdDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUsdWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarketMinLiquidityRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinDelegateTime"): EventFragment;
}

export interface MarketRegisteredEventObject {
  market: string;
  marketId: BigNumber;
  sender: string;
}
export type MarketRegisteredEvent = TypedEvent<
  [string, BigNumber, string],
  MarketRegisteredEventObject
>;

export type MarketRegisteredEventFilter =
  TypedEventFilter<MarketRegisteredEvent>;

export interface MarketSystemFeePaidEventObject {
  marketId: BigNumber;
  feeAmount: BigNumber;
}
export type MarketSystemFeePaidEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketSystemFeePaidEventObject
>;

export type MarketSystemFeePaidEventFilter =
  TypedEventFilter<MarketSystemFeePaidEvent>;

export interface MarketUsdDepositedEventObject {
  marketId: BigNumber;
  target: string;
  amount: BigNumber;
  market: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
}
export type MarketUsdDepositedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  MarketUsdDepositedEventObject
>;

export type MarketUsdDepositedEventFilter =
  TypedEventFilter<MarketUsdDepositedEvent>;

export interface MarketUsdWithdrawnEventObject {
  marketId: BigNumber;
  target: string;
  amount: BigNumber;
  market: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
}
export type MarketUsdWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  MarketUsdWithdrawnEventObject
>;

export type MarketUsdWithdrawnEventFilter =
  TypedEventFilter<MarketUsdWithdrawnEvent>;

export interface SetMarketMinLiquidityRatioEventObject {
  marketId: BigNumber;
  minLiquidityRatio: BigNumber;
}
export type SetMarketMinLiquidityRatioEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMarketMinLiquidityRatioEventObject
>;

export type SetMarketMinLiquidityRatioEventFilter =
  TypedEventFilter<SetMarketMinLiquidityRatioEvent>;

export interface SetMinDelegateTimeEventObject {
  marketId: BigNumber;
  minDelegateTime: number;
}
export type SetMinDelegateTimeEvent = TypedEvent<
  [BigNumber, number],
  SetMinDelegateTimeEventObject
>;

export type SetMinDelegateTimeEventFilter =
  TypedEventFilter<SetMinDelegateTimeEvent>;

export interface IMarketManagerModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketManagerModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { marketAddress: string }>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { valueD18: BigNumber }>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositFeeAmount: BigNumber;
        withdrawFeeAmount: BigNumber;
      }
    >;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { issuanceD18: BigNumber }>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reportedDebtD18: BigNumber }>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDebtD18: BigNumber }>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minRatioD18: BigNumber }>;

    getOracleManager(overrides?: CallOverrides): Promise<[string]>;

    getUsdToken(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawableD18: BigNumber }>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isLocked: boolean }>;

    registerMarket(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  depositMarketUsd(
    marketId: BigNumberish,
    target: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeDebtToPools(
    marketId: BigNumberish,
    maxIter: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketAddress(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketCollateral(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketDebtPerShare(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketFees(
    marketId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      depositFeeAmount: BigNumber;
      withdrawFeeAmount: BigNumber;
    }
  >;

  getMarketMinDelegateTime(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMarketNetIssuance(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketPoolDebtDistribution(
    marketId: BigNumberish,
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketPools(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketReportedDebt(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketTotalDebt(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinLiquidityRatio(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleManager(overrides?: CallOverrides): Promise<string>;

  getUsdToken(overrides?: CallOverrides): Promise<string>;

  getWithdrawableMarketUsd(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isMarketCapacityLocked(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerMarket(
    market: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMarketMinDelegateTime(
    marketId: BigNumberish,
    minDelegateTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinLiquidityRatio(
    marketId: BigNumberish,
    minLiquidityRatio: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawMarketUsd(
    marketId: BigNumberish,
    target: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositFeeAmount: BigNumber;
        withdrawFeeAmount: BigNumber;
      }
    >;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sharesD18: BigNumber;
        totalSharesD18: BigNumber;
        valuePerShareD27: BigNumber;
      }
    >;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        inRangePoolIds: BigNumber[];
        outRangePoolIds: BigNumber[];
      }
    >;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleManager(overrides?: CallOverrides): Promise<string>;

    getUsdToken(overrides?: CallOverrides): Promise<string>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "MarketRegistered(address,uint128,address)"(
      market?: string | null,
      marketId?: BigNumberish | null,
      sender?: string | null
    ): MarketRegisteredEventFilter;
    MarketRegistered(
      market?: string | null,
      marketId?: BigNumberish | null,
      sender?: string | null
    ): MarketRegisteredEventFilter;

    "MarketSystemFeePaid(uint128,uint256)"(
      marketId?: BigNumberish | null,
      feeAmount?: null
    ): MarketSystemFeePaidEventFilter;
    MarketSystemFeePaid(
      marketId?: BigNumberish | null,
      feeAmount?: null
    ): MarketSystemFeePaidEventFilter;

    "MarketUsdDeposited(uint128,address,uint256,address,int128,int128,uint256)"(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdDepositedEventFilter;
    MarketUsdDeposited(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdDepositedEventFilter;

    "MarketUsdWithdrawn(uint128,address,uint256,address,int128,int128,uint256)"(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdWithdrawnEventFilter;
    MarketUsdWithdrawn(
      marketId?: BigNumberish | null,
      target?: string | null,
      amount?: null,
      market?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null
    ): MarketUsdWithdrawnEventFilter;

    "SetMarketMinLiquidityRatio(uint128,uint256)"(
      marketId?: BigNumberish | null,
      minLiquidityRatio?: null
    ): SetMarketMinLiquidityRatioEventFilter;
    SetMarketMinLiquidityRatio(
      marketId?: BigNumberish | null,
      minLiquidityRatio?: null
    ): SetMarketMinLiquidityRatioEventFilter;

    "SetMinDelegateTime(uint128,uint32)"(
      marketId?: BigNumberish | null,
      minDelegateTime?: null
    ): SetMinDelegateTimeEventFilter;
    SetMinDelegateTime(
      marketId?: BigNumberish | null,
      minDelegateTime?: null
    ): SetMinDelegateTimeEventFilter;
  };

  estimateGas: {
    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleManager(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdToken(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerMarket(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeDebtToPools(
      marketId: BigNumberish,
      maxIter: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketAddress(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCollateral(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketDebtPerShare(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketFees(
      marketId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketMinDelegateTime(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketNetIssuance(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPoolDebtDistribution(
      marketId: BigNumberish,
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketPools(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketReportedDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketTotalDebt(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinLiquidityRatio(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawableMarketUsd(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketCapacityLocked(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerMarket(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMarketMinDelegateTime(
      marketId: BigNumberish,
      minDelegateTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinLiquidityRatio(
      marketId: BigNumberish,
      minLiquidityRatio: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawMarketUsd(
      marketId: BigNumberish,
      target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
