/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IUtilsModuleInterface extends utils.Interface {
  functions: {
    "configureChainlinkCrossChain(address,address)": FunctionFragment;
    "configureOracleManager(address)": FunctionFragment;
    "getConfig(bytes32)": FunctionFragment;
    "getConfigAddress(bytes32)": FunctionFragment;
    "getConfigUint(bytes32)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "setConfig(bytes32,bytes32)": FunctionFragment;
    "setSupportedCrossChainNetworks(uint64[],uint64[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configureChainlinkCrossChain"
      | "configureOracleManager"
      | "getConfig"
      | "getConfigAddress"
      | "getConfigUint"
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "setConfig"
      | "setSupportedCrossChainNetworks"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configureChainlinkCrossChain",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureOracleManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigUint",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedCrossChainNetworks",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureChainlinkCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureOracleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfigAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedCrossChainNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "NewSupportedCrossChainNetwork(uint64)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "NewSupportedCrossChainNetwork"
  ): EventFragment;
}

export interface NewSupportedCrossChainNetworkEventObject {
  newChainId: BigNumber;
}
export type NewSupportedCrossChainNetworkEvent = TypedEvent<
  [BigNumber],
  NewSupportedCrossChainNetworkEventObject
>;

export type NewSupportedCrossChainNetworkEventFilter =
  TypedEventFilter<NewSupportedCrossChainNetworkEvent>;

export interface IUtilsModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUtilsModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getConfig(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { v: string }>;

    getConfigAddress(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { v: string }>;

    getConfigUint(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { v: BigNumber }>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  configureChainlinkCrossChain(
    ccipRouter: string,
    ccipTokenPool: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  configureOracleManager(
    oracleManagerAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getConfig(k: BytesLike, overrides?: CallOverrides): Promise<string>;

  getConfigAddress(k: BytesLike, overrides?: CallOverrides): Promise<string>;

  getConfigUint(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setConfig(
    k: BytesLike,
    v: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSupportedCrossChainNetworks(
    supportedNetworks: BigNumberish[],
    ccipSelectors: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfig(k: BytesLike, overrides?: CallOverrides): Promise<string>;

    getConfigAddress(k: BytesLike, overrides?: CallOverrides): Promise<string>;

    getConfigUint(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewSupportedCrossChainNetwork(uint64)"(
      newChainId?: null
    ): NewSupportedCrossChainNetworkEventFilter;
    NewSupportedCrossChainNetwork(
      newChainId?: null
    ): NewSupportedCrossChainNetworkEventFilter;
  };

  estimateGas: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getConfig(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getConfigAddress(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigUint(k: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureChainlinkCrossChain(
      ccipRouter: string,
      ccipTokenPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    configureOracleManager(
      oracleManagerAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getConfig(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigAddress(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigUint(
      k: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConfig(
      k: BytesLike,
      v: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSupportedCrossChainNetworks(
      supportedNetworks: BigNumberish[],
      ccipSelectors: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
