/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IMarketCollateralModuleInterface extends utils.Interface {
  functions: {
    "configureMaximumMarketCollateral(uint128,address,uint256)": FunctionFragment;
    "depositMarketCollateral(uint128,address,uint256)": FunctionFragment;
    "getMarketCollateralAmount(uint128,address)": FunctionFragment;
    "getMarketCollateralValue(uint128)": FunctionFragment;
    "getMaximumMarketCollateral(uint128,address)": FunctionFragment;
    "withdrawMarketCollateral(uint128,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configureMaximumMarketCollateral"
      | "depositMarketCollateral"
      | "getMarketCollateralAmount"
      | "getMarketCollateralValue"
      | "getMaximumMarketCollateral"
      | "withdrawMarketCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configureMaximumMarketCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMarketCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCollateralAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCollateralValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumMarketCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMarketCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureMaximumMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumMarketCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMarketCollateral",
    data: BytesLike
  ): Result;

  events: {
    "MarketCollateralDeposited(uint128,address,uint256,address,int128,int128,uint256,uint256)": EventFragment;
    "MarketCollateralWithdrawn(uint128,address,uint256,address,int128,int128,uint256,uint256)": EventFragment;
    "MaximumMarketCollateralConfigured(uint128,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketCollateralDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCollateralWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaximumMarketCollateralConfigured"
  ): EventFragment;
}

export interface MarketCollateralDepositedEventObject {
  marketId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
  reportedDebt: BigNumber;
}
export type MarketCollateralDepositedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketCollateralDepositedEventObject
>;

export type MarketCollateralDepositedEventFilter =
  TypedEventFilter<MarketCollateralDepositedEvent>;

export interface MarketCollateralWithdrawnEventObject {
  marketId: BigNumber;
  collateralType: string;
  tokenAmount: BigNumber;
  sender: string;
  creditCapacity: BigNumber;
  netIssuance: BigNumber;
  depositedCollateralValue: BigNumber;
  reportedDebt: BigNumber;
}
export type MarketCollateralWithdrawnEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarketCollateralWithdrawnEventObject
>;

export type MarketCollateralWithdrawnEventFilter =
  TypedEventFilter<MarketCollateralWithdrawnEvent>;

export interface MaximumMarketCollateralConfiguredEventObject {
  marketId: BigNumber;
  collateralType: string;
  systemAmount: BigNumber;
  owner: string;
}
export type MaximumMarketCollateralConfiguredEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  MaximumMarketCollateralConfiguredEventObject
>;

export type MaximumMarketCollateralConfiguredEventFilter =
  TypedEventFilter<MaximumMarketCollateralConfiguredEvent>;

export interface IMarketCollateralModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketCollateralModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountD18: BigNumber }>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { valueD18: BigNumber }>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountD18: BigNumber }>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  configureMaximumMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMarketCollateralAmount(
    marketId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketCollateralValue(
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaximumMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawMarketCollateral(
    marketId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MarketCollateralDeposited(uint128,address,uint256,address,int128,int128,uint256,uint256)"(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralDepositedEventFilter;
    MarketCollateralDeposited(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralDepositedEventFilter;

    "MarketCollateralWithdrawn(uint128,address,uint256,address,int128,int128,uint256,uint256)"(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralWithdrawnEventFilter;
    MarketCollateralWithdrawn(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      tokenAmount?: null,
      sender?: string | null,
      creditCapacity?: null,
      netIssuance?: null,
      depositedCollateralValue?: null,
      reportedDebt?: null
    ): MarketCollateralWithdrawnEventFilter;

    "MaximumMarketCollateralConfigured(uint128,address,uint256,address)"(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      systemAmount?: null,
      owner?: string | null
    ): MaximumMarketCollateralConfiguredEventFilter;
    MaximumMarketCollateralConfigured(
      marketId?: BigNumberish | null,
      collateralType?: string | null,
      systemAmount?: null,
      owner?: string | null
    ): MaximumMarketCollateralConfiguredEventFilter;
  };

  estimateGas: {
    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMarketCollateralAmount(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCollateralValue(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawMarketCollateral(
      marketId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
