/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AsyncOrderConfigurationModule,
  AsyncOrderConfigurationModuleInterface,
} from "../../../contracts/modules/AsyncOrderConfigurationModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "settlementStrategyId",
        type: "uint256",
      },
    ],
    name: "InvalidSettlementStrategy",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "InvalidSettlementWindowDuration",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "marketOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "OnlyMarketOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
    ],
    name: "SettlementStrategyAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint128",
        name: "synthMarketId",
        type: "uint128",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum SettlementStrategy.Type",
            name: "strategyType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "settlementDelay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settlementWindowDuration",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "priceVerificationContract",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "feedId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "settlementReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceDeviationTolerance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumUsdExchangeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxRoundingLoss",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct SettlementStrategy.Data",
        name: "strategy",
        type: "tuple",
      },
    ],
    name: "SettlementStrategySet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        components: [
          {
            internalType: "enum SettlementStrategy.Type",
            name: "strategyType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "settlementDelay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settlementWindowDuration",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "priceVerificationContract",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "feedId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "settlementReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceDeviationTolerance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumUsdExchangeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxRoundingLoss",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct SettlementStrategy.Data",
        name: "strategy",
        type: "tuple",
      },
    ],
    name: "addSettlementStrategy",
    outputs: [
      {
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
    ],
    name: "getSettlementStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "enum SettlementStrategy.Type",
            name: "strategyType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "settlementDelay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settlementWindowDuration",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "priceVerificationContract",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "feedId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "settlementReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceDeviationTolerance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumUsdExchangeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxRoundingLoss",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct SettlementStrategy.Data",
        name: "settlementStrategy",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum SettlementStrategy.Type",
            name: "strategyType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "settlementDelay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settlementWindowDuration",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "priceVerificationContract",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "feedId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "settlementReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceDeviationTolerance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumUsdExchangeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxRoundingLoss",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct SettlementStrategy.Data",
        name: "strategy",
        type: "tuple",
      },
    ],
    name: "setSettlementStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "setSettlementStrategyEnabled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f40806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637cbe2075146100515780637f73a8911461006657806397b30e6d14610079578063f74c377f1461009f575b600080fd5b61006461005f366004610a3b565b6100bf565b005b610064610074366004610a92565b61026e565b61008c610087366004610ace565b610317565b6040519081526020015b60405180910390f35b6100b26100ad366004610b1c565b610499565b6040516100969190610bc4565b6100d1836100cb61066e565b906106e3565b60006100dc84610761565b90506100e881846107f0565b816040015160000361011e5781604001516040516329e9f8d360e21b815260040161011591815260200190565b60405180910390fd5b602082015115610132578160200151610135565b60015b60208301528054829082908590811061015057610150610c75565b600091825260209091208251600b909202018054909190829060ff19166001838181111561018057610180610b46565b0217905550602082015160018201556040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a082015160058201906101dd9082610d15565b5060c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905560405183906001600160801b038616907f3b785af09c0835778dc2ef3acec91abfbcf58e48118ede60e3a33ba55ec8af3d90610260908690610bc4565b60405180910390a350505050565b61027a836100cb61066e565b600061028584610761565b905061029181846107f0565b60008160000184815481106102a8576102a8610c75565b60009182526020909120600a600b90920201908101805460ff1916851517905560405190915084906001600160801b038716907f3b785af09c0835778dc2ef3acec91abfbcf58e48118ede60e3a33ba55ec8af3d90610308908590610e52565b60405180910390a35050505050565b6000610325836100cb61066e565b81604001516000036103525781604001516040516329e9f8d360e21b815260040161011591815260200190565b602082015115610366578160200151610369565b60015b6020830152600061037984610761565b8054600180820183556000838152602090208651600b840290910180549396509394508693929091839160ff19169083818111156103b9576103b9610b46565b0217905550602082015160018201556040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a082015160058201906104169082610d15565b5060c0820151600682015560e082015160078201556101008201516008820155610120820151600982015561014090910151600a909101805460ff191691151591909117905560405182906001600160801b038616907f91750a8e3d84ed1bccdc79dcecf63cc1b6f83b5bf8293bf86628cbb248e487f190600090a35092915050565b6105056040805161016081019091528060008152602001600081526020016000815260200160006001600160a01b031681526020016000801916815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b61050e83610761565b80548390811061052057610520610c75565b60009182526020909120604080516101608101909152600b909202018054829060ff16600181111561055457610554610b46565b600181111561056557610565610b46565b8152600182015460208201526002820154604082015260038201546001600160a01b031660608201526004820154608082015260058201805460a0909201916105ad90610c8b565b80601f01602080910402602001604051908101604052809291908181526020018280546105d990610c8b565b80156106265780601f106105fb57610100808354040283529160200191610626565b820191906000526020600020905b81548152906001019060200180831161060957829003601f168201915b505050918352505060068201546020820152600782015460408201526008820154606082015260098201546080820152600a9091015460ff16151560a0909101529392505050565b6000806040516020016106c5906020808252602a908201527f696f2e73796e7468657469782e73706f742d6d61726b65742e53706f744d61726040820152696b6574466163746f727960b01b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b6001600160801b03811660009081526004830160205260409020546001600160a01b031661070f610818565b6001600160a01b0316816001600160a01b03161461075c5780610730610818565b60405163f250d69d60e01b81526001600160a01b03928316600482015291166024820152604401610115565b505050565b600080826040516020016107d1919060408082526030908201527f696f2e73796e7468657469782e73706f742d6d61726b65742e4173796e634f7260608201526f3232b921b7b73334b3bab930ba34b7b760811b60808201526001600160801b0391909116602082015260a00190565b60408051601f1981840301815291905280516020909101209392505050565b815481106108145760405163a9f8684760e01b815260048101829052602401610115565b5050565b600073e2c5658cc5c448b48141168f3e475df8f65a1e3e3314801561083e575060143610155b15610850575060131936013560601c90565b503390565b80356001600160801b038116811461086c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156108ab576108ab610871565b60405290565b80356002811061086c57600080fd5b80356001600160a01b038116811461086c57600080fd5b600082601f8301126108e857600080fd5b813567ffffffffffffffff8082111561090357610903610871565b604051601f8301601f19908116603f0116810190828211818310171561092b5761092b610871565b8160405283815286602085880101111561094457600080fd5b836020870160208301376000602085830101528094505050505092915050565b8035801515811461086c57600080fd5b6000610160828403121561098757600080fd5b61098f610887565b905061099a826108b1565b815260208201356020820152604082013560408201526109bc606083016108c0565b60608201526080820135608082015260a082013567ffffffffffffffff8111156109e557600080fd5b6109f1848285016108d7565b60a08301525060c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140610a31818401610964565b9082015292915050565b600080600060608486031215610a5057600080fd5b610a5984610855565b925060208401359150604084013567ffffffffffffffff811115610a7c57600080fd5b610a8886828701610974565b9150509250925092565b600080600060608486031215610aa757600080fd5b610ab084610855565b925060208401359150610ac560408501610964565b90509250925092565b60008060408385031215610ae157600080fd5b610aea83610855565b9150602083013567ffffffffffffffff811115610b0657600080fd5b610b1285828601610974565b9150509250929050565b60008060408385031215610b2f57600080fd5b610b3883610855565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60028110610b7a57634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b81811015610ba457602081850181015186830182015201610b88565b506000602082860101526020601f19601f83011685010191505092915050565b60208152610bd6602082018351610b5c565b602082015160408201526040820151606082015260006060830151610c0660808401826001600160a01b03169052565b50608083015160a083015260a08301516101608060c0850152610c2d610180850183610b7e565b60c086015160e0868101919091528601516101008087019190915286015161012080870191909152860151610140808701919091529095015115159301929092525090919050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610c9f57607f821691505b602082108103610cbf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561075c576000816000526020600020601f850160051c81016020861015610cee5750805b601f850160051c820191505b81811015610d0d57828155600101610cfa565b505050505050565b815167ffffffffffffffff811115610d2f57610d2f610871565b610d4381610d3d8454610c8b565b84610cc5565b602080601f831160018114610d785760008415610d605750858301515b600019600386901b1c1916600185901b178555610d0d565b600085815260208120601f198616915b82811015610da757888601518255948401946001909101908401610d88565b5085821015610dc55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154610de281610c8b565b808552602060018381168015610dff5760018114610e1957610e47565b60ff1985168884015283151560051b880183019550610e47565b866000528260002060005b85811015610e3f5781548a8201860152908301908401610e24565b890184019650505b505050505092915050565b60208152610e6d60208201610e68845460ff1690565b610b5c565b60018201546040820152600282015460608201526000610e9760038401546001600160a01b031690565b6001600160a01b03166080830152600483015460a083015261016060c08301819052610eca610180840160058601610dd5565b600685015460e0850152600785015461010085015260088501546101208501526009850154610140850152600a9094015460ff161515920191909152509056fea26469706673582212200a99e8c1e0481369d79fc3d3ba36501a47f46c896616add44e81894602ca8a4c64736f6c63430008160033";

type AsyncOrderConfigurationModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AsyncOrderConfigurationModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AsyncOrderConfigurationModule__factory extends ContractFactory {
  constructor(...args: AsyncOrderConfigurationModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<AsyncOrderConfigurationModule> {
    return super.deploy(
      overrides || {}
    ) as Promise<AsyncOrderConfigurationModule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AsyncOrderConfigurationModule {
    return super.attach(address) as AsyncOrderConfigurationModule;
  }
  override connect(signer: Signer): AsyncOrderConfigurationModule__factory {
    return super.connect(signer) as AsyncOrderConfigurationModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AsyncOrderConfigurationModuleInterface {
    return new utils.Interface(_abi) as AsyncOrderConfigurationModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AsyncOrderConfigurationModule {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AsyncOrderConfigurationModule;
  }
}
