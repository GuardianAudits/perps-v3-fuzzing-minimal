/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IWrapperModule,
  IWrapperModuleInterface,
} from "../../../contracts/interfaces/IWrapperModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
    ],
    name: "InsufficientAmountReceived",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountUnwrapped",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesCollected",
        type: "uint256",
      },
    ],
    name: "SynthUnwrapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountWrapped",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesCollected",
        type: "uint256",
      },
    ],
    name: "SynthWrapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "wrapCollateralType",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
    ],
    name: "WrapperSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
    ],
    name: "getWrapper",
    outputs: [
      {
        internalType: "address",
        name: "wrapCollateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "wrapCollateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
    ],
    name: "setWrapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "unwrapAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
    ],
    name: "unwrap",
    outputs: [
      {
        internalType: "uint256",
        name: "returnCollateralAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "wrapAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
    ],
    name: "wrap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IWrapperModule__factory {
  static readonly abi = _abi;
  static createInterface(): IWrapperModuleInterface {
    return new utils.Interface(_abi) as IWrapperModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IWrapperModule {
    return new Contract(address, _abi, signerOrProvider) as IWrapperModule;
  }
}
