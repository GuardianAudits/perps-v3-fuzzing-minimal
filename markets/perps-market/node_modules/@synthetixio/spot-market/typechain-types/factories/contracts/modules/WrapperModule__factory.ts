/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WrapperModule,
  WrapperModuleInterface,
} from "../../../contracts/modules/WrapperModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedTransfer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
    ],
    name: "InsufficientAmountReceived",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "configuredCollateralType",
        type: "address",
      },
    ],
    name: "InvalidCollateralType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
    ],
    name: "InvalidMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "marketOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "OnlyMarketOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowInt256ToUint256",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowUint256ToInt256",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountToWrap",
        type: "uint256",
      },
    ],
    name: "WrapperExceedsMaxAmount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountUnwrapped",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesCollected",
        type: "uint256",
      },
    ],
    name: "SynthUnwrapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountWrapped",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesCollected",
        type: "uint256",
      },
    ],
    name: "SynthWrapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "wrapCollateralType",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
    ],
    name: "WrapperSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
    ],
    name: "getWrapper",
    outputs: [
      {
        internalType: "address",
        name: "wrapCollateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "wrapCollateralType",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxWrappableAmount",
        type: "uint256",
      },
    ],
    name: "setWrapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "unwrapAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
    ],
    name: "unwrap",
    outputs: [
      {
        internalType: "uint256",
        name: "returnCollateralAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "wrapAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
    ],
    name: "wrap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type WrapperModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrapperModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrapperModule__factory extends ContractFactory {
  constructor(...args: WrapperModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<WrapperModule> {
    return super.deploy(overrides || {}) as Promise<WrapperModule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WrapperModule {
    return super.attach(address) as WrapperModule;
  }
  override connect(signer: Signer): WrapperModule__factory {
    return super.connect(signer) as WrapperModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrapperModuleInterface {
    return new utils.Interface(_abi) as WrapperModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WrapperModule {
    return new Contract(address, _abi, signerOrProvider) as WrapperModule;
  }
}
