/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AsyncOrderClaim,
  AsyncOrderClaimInterface,
} from "../../../contracts/storage/AsyncOrderClaim";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
    ],
    name: "IneligibleForCancellation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "asyncOrderId",
        type: "uint256",
      },
    ],
    name: "InvalidClaim",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "asyncOrderId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "settledAt",
        type: "uint256",
      },
    ],
    name: "OrderAlreadySettled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
    ],
    name: "OutsideSettlementWindow",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5086697e5a31ef5e169b556592e81ad268e337d996c827cbe67f3dfe745027e64736f6c63430008160033";

type AsyncOrderClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AsyncOrderClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AsyncOrderClaim__factory extends ContractFactory {
  constructor(...args: AsyncOrderClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<AsyncOrderClaim> {
    return super.deploy(overrides || {}) as Promise<AsyncOrderClaim>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AsyncOrderClaim {
    return super.attach(address) as AsyncOrderClaim;
  }
  override connect(signer: Signer): AsyncOrderClaim__factory {
    return super.connect(signer) as AsyncOrderClaim__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AsyncOrderClaimInterface {
    return new utils.Interface(_abi) as AsyncOrderClaimInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AsyncOrderClaim {
    return new Contract(address, _abi, signerOrProvider) as AsyncOrderClaim;
  }
}
