/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AtomicOrderModule,
  AtomicOrderModuleInterface,
} from "../../../contracts/modules/AtomicOrderModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxSynthAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "synthAmountCharged",
        type: "uint256",
      },
    ],
    name: "ExceedsMaxSynthAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxUsdAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "usdAmountCharged",
        type: "uint256",
      },
    ],
    name: "ExceedsMaxUsdAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
    ],
    name: "InsufficientAmountReceived",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
    ],
    name: "InvalidMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPrices",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowInt256ToUint256",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowUint256ToInt256",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "synthReturned",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collectedFees",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "referrer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "SynthBought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "synthMarketId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountReturned",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        indexed: false,
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collectedFees",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "referrer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "SynthSold",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "usdAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "buy",
    outputs: [
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "usdAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "buyExactIn",
    outputs: [
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxUsdAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "buyExactOut",
    outputs: [
      {
        internalType: "uint256",
        name: "usdAmountCharged",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
    ],
    name: "getMarketSkew",
    outputs: [
      {
        internalType: "int256",
        name: "marketSkew",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "usdAmount",
        type: "uint256",
      },
      {
        internalType: "enum Price.Tolerance",
        name: "stalenessTolerance",
        type: "uint8",
      },
    ],
    name: "quoteBuyExactIn",
    outputs: [
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        internalType: "enum Price.Tolerance",
        name: "stalenessTolerance",
        type: "uint8",
      },
    ],
    name: "quoteBuyExactOut",
    outputs: [
      {
        internalType: "uint256",
        name: "usdAmountCharged",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        internalType: "enum Price.Tolerance",
        name: "stalenessTolerance",
        type: "uint8",
      },
    ],
    name: "quoteSellExactIn",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "usdAmount",
        type: "uint256",
      },
      {
        internalType: "enum Price.Tolerance",
        name: "stalenessTolerance",
        type: "uint8",
      },
    ],
    name: "quoteSellExactOut",
    outputs: [
      {
        internalType: "uint256",
        name: "synthToBurn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minUsdAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "sell",
    outputs: [
      {
        internalType: "uint256",
        name: "usdAmountReceived",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "synthAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountReceived",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "sellExactIn",
    outputs: [
      {
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "marketId",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "usdAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSynthAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "sellExactOut",
    outputs: [
      {
        internalType: "uint256",
        name: "synthToBurn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "fixedFees",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilizationFees",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "skewFees",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "wrapperFees",
            type: "int256",
          },
        ],
        internalType: "struct OrderFees.Data",
        name: "fees",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506124dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806370d9a0c61161007157806370d9a0c614610124578063983220bb14610137578063a05ee4f61461014a578063a12d94001461016b578063ab75d9501461017e578063c4b41a2e1461019157600080fd5b806337fb3369146100ae5780633d1a60e4146100d85780634ce94d9d146100eb5780634d4bfbd5146100fe578063687ed93d14610111575b600080fd5b6100c16100bc36600461209e565b6101a4565b6040516100cf9291906120f2565b60405180910390f35b6100c16100e636600461209e565b6101c7565b6100c16100f936600461209e565b6103eb565b6100c161010c36600461209e565b6105e7565b6100c161011f366004612127565b6105fd565b6100c1610132366004612127565b61063f565b6100c161014536600461209e565b610675565b61015d61015836600461216b565b6108b5565b6040519081526020016100cf565b6100c161017936600461209e565b6108c6565b6100c161018c366004612127565b610adf565b6100c161019f366004612127565b610b0e565b60006101ae61205a565b6101ba868686866108c6565b9150915094509492505050565b60006101d161205a565b60006101db610b3d565b90506101e78188610bb2565b6000806101f78960026001610c02565b905061020e898983610207610e27565b6002610e64565b91965094509150868510156102455760405163a18f407560e01b815260048101889052602481018690526044015b60405180910390fd5b60006102538a876001610adf565b509050888111156102775760405163104272fb60e11b815260040160405180910390fd5b6102808a610f14565b6001600160a01b0316639dc29fac610296610e27565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018c9052604401600060405180830381600087803b1580156102de57600080fd5b505af11580156102f2573d6000803e3d6000fd5b5050505060006103128b87610305610e27565b879291908c8a6002610f88565b60028601549091506001600160a01b031663140a7cfe8c610331610e27565b8a6040518463ffffffff1660e01b815260040161035093929190612186565b6020604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039391906121b0565b508a6001600160801b03167f61fa4bb370a2f18a502b3bcf1d0755e53371d58791fa42766aa6386bbefb594a8888848c886040516103d59594939291906121c9565b60405180910390a2505050505094509492505050565b60006103f561205a565b60006103ff610b3d565b905061040b8188610bb2565b60008061041b8960026001610c02565b905061043289898361042b610e27565b600261120f565b91965094509150868511156104645760405163f624588760e01b8152600481018890526024810186905260440161023c565b60006104728a8a6001610adf565b509050858111156104965760405163104272fb60e11b815260040160405180910390fd5b61049f8a610f14565b6001600160a01b0316639dc29fac6104b5610e27565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101899052604401600060405180830381600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b5050505060006105248b87610305610e27565b60028601549091506001600160a01b031663140a7cfe8c610543610e27565b8d6040518463ffffffff1660e01b815260040161056293929190612186565b6020604051808303816000875af1158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a591906121b0565b508a6001600160801b03167f61fa4bb370a2f18a502b3bcf1d0755e53371d58791fa42766aa6386bbefb594a8b88848c886040516103d59594939291906121c9565b60006105f161205a565b6101ba868686866101c7565b600061060761205a565b61061985610613610b3d565b90610bb2565b610632858561062a88600288610c02565b610207610e27565b5090969095509350505050565b600061064961205a565b61065585610613610b3d565b610632858561066688600188610c02565b61066e610e27565b60016112f0565b600061067f61205a565b6000610689610b3d565b90506106958188610bb2565b6000806106a489600180610c02565b90506106b489898361066e610e27565b91965094509150868511156106e6576040516361b66bdd60e11b8152600481018890526024810186905260440161023c565b60006106f48a8a60016105fd565b509050858111156107185760405163104272fb60e11b815260040160405180910390fd5b83546001600160a01b03166323b872dd610730610e27565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018990526064016020604051808303816000875af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612224565b5060006107c48b876107b7610e27565b879291908c8a6001610f88565b90506107dc8b6107d4838a61225c565b8791906113ec565b6107e58b610f14565b6001600160a01b03166340c10f196107fb610e27565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018d9052604401600060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b505050508a6001600160801b03167fac82d63e679c7d862613aa8b5ccd94f9adc4986763ab14bb3351ab9092ef13038b88848c8860405161089c9594939291906121c9565b60405180910390a2899650505050505094509492505050565b60006108c0826114e0565b92915050565b60006108d061205a565b60006108da610b3d565b90506108e68188610bb2565b80546001600160a01b03166323b872dd6108fe610e27565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018990526064016020604051808303816000875af1158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190612224565b5060008061098589600180610c02565b905061099c898983610995610e27565b6001611607565b91965094509150868510156109ce5760405163a18f407560e01b8152600481018890526024810186905260440161023c565b60006109dc8a8760016105fd565b50905088811115610a005760405163104272fb60e11b815260040160405180910390fd5b6000610a0f8b876107b7610e27565b9050610a1f8b6107d4838d61225c565b610a288b610f14565b6001600160a01b03166340c10f19610a3e610e27565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018a9052604401600060405180830381600087803b158015610a8657600080fd5b505af1158015610a9a573d6000803e3d6000fd5b505050508a6001600160801b03167fac82d63e679c7d862613aa8b5ccd94f9adc4986763ab14bb3351ab9092ef13038888848c886040516103d59594939291906121c9565b6000610ae961205a565b610af585610613610b3d565b6106328585610b0688600188610c02565b610995610e27565b6000610b1861205a565b610b2485610613610b3d565b6106328585610b3588600288610c02565b61042b610e27565b600080604051602001610b94906020808252602a908201527f696f2e73796e7468657469782e73706f742d6d61726b65742e53706f744d61726040820152696b6574466163746f727960b01b606082015260800190565b60408051601f19818403018152919052805160209091012092915050565b6001600160801b03811660009081526004830160205260409020546001600160a01b0316610bfe5760405163019d9ad960e61b81526001600160801b038216600482015260240161023c565b5050565b600080610c0e856116c2565b90506000610c1a610b3d565b90506000610c2786611738565b610c35578260010154610c38565b82545b9050610c656040518060800160405280600081526020016000815260200160008152602001600081525090565b6001866001811115610c7957610c7961226f565b03610d9e57604080516001808252818301909252600091602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050717374616c656e657373546f6c6572616e636560701b82600081518110610cec57610cec612285565b602002602001018181525050856002015460001b81600081518110610d1357610d13612285565b60209081029190910101526001850154604051636d51285f60e11b81526001600160a01b039091169063daa250be90610d54908790869086906004016122d7565b608060405180830381865afa158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190612302565b92505050610e10565b6001830154604051632a952b2d60e01b8152600481018490526001600160a01b0390911690632a952b2d90602401608060405180830381865afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190612302565b90505b8051610e1b90611771565b98975050505050505050565b600073e2c5658cc5c448b48141168f3e475df8f65a1e3e33148015610e4d575060143610155b15610e5f575060131936013560601c90565b503390565b6000610e6e61205a565b6000610e7988611798565b9050610e8587876117ef565b92506000610e9c8287610e978861180e565b611833565b9050610ea881856117ef565b808452610eb5908561225c565b93506000610ec28561188d565b90506000610ede848c610ed785600019612376565b8c8b6118b7565b9050610eea8183611969565b60408601819052610f0490610eff90846123a6565b611771565b9550505050955095509592505050565b600080610f6c83604051640e6f2dce8d60db1b60208201526fffffffffffffffffffffffffffffffff19608083901b166025820152600090603501604051602081830303815290604052805190602001209050919050565b9050610f7781611988565b546001600160a01b03169392505050565b600080610f998989898888886119e6565b90506000610fa688611b3e565b9050610fb18261188d565b610fbb90826123a6565b9050600081131580610fd8575060088a01546001600160a01b0316155b15610fe557509050611204565b6000610ff082611771565b60088c01549091506000906001600160a01b031663b45232898c848c8a600681111561101e5761101e61226f565b6040516001600160e01b031960e087901b1681526001600160801b03909416600485015260248401929092526001600160a01b0316604483015260ff1660648201526084016020604051808303816000875af1158015611082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a691906121b0565b9050818111156110b35750805b6110bc86611b80565b806110cb57506110cb86611b89565b15611177578660020160009054906101000a90046001600160a01b03166001600160a01b031663140a7cfe8c8e60080160009054906101000a90046001600160a01b0316846040518463ffffffff1660e01b815260040161112e93929190612186565b6020604051808303816000875af115801561114d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117191906121b0565b506111f3565b865460088d015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612224565b505b6111fd81856123cd565b9450505050505b979650505050505050565b600061121961205a565b600061122488611798565b90506000611248828a6112368b61188d565b61124290600019612376565b8a611bad565b90506112538861188d565b611265611260838a6117ef565b61188d565b61126f91906123a6565b6040840181905261128d906112838a61188d565b610eff91906123e0565b9750600061129f8388610e978961180e565b9050886112be6112b783670de0b6b3a764000061225c565b8b90611bf6565b6112c8919061225c565b8085526112d5908a6123cd565b98506112e18989611bf6565b94505050955095509592505050565b60006112fa61205a565b600061130588611798565b905061131187876117ef565b9250600061131e8461188d565b9050600061132f838b848b8a6118b7565b905061133b8183611969565b6040850181905261135090610eff90846123e0565b94506000611360848c888c611c0b565b90506000611372858a610e978b61180e565b90508661139161138a84670de0b6b3a764000061225c565b8990611bf6565b61139b919061225c565b6020870152866113b661138a83670de0b6b3a764000061225c565b6113c0919061225c565b80875260208701516113d1916123cd565b6113db90886123cd565b965050505050955095509592505050565b825460405163095ea7b360e01b8152306004820152602481018390526001600160a01b039091169063095ea7b3906044016020604051808303816000875af115801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114609190612224565b50600283015460405163085867bb60e11b81526001600160a01b03909116906310b0cf769061149790859030908690600401612186565b6020604051808303816000875af11580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da91906121b0565b50505050565b6000806114eb610b3d565b600201546001600160a01b031663c2b0cf418461150781611e15565b5460405160e084901b6001600160e01b03191681526001600160801b0390921660048301526001600160a01b03166024820152604401602060405180830381865afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906121b0565b90506115898161188d565b6115f661159585610f14565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906121b0565b61160091906123a6565b9392505050565b600061161161205a565b600061161c88611798565b9050600061162c828a8a8a611c0b565b9050600061163e8388610e978961180e565b905061164a828a6117ef565b6020850152611659818a6117ef565b80855260208501519061166c908b61225c565b611676919061225c565b985061168c838b6116868c61188d565b8b611bad565b945061169b611260868a6117ef565b6116a48a61188d565b6116ae91906123a6565b604085015250929891975095509350505050565b6000808260405160200161171991906040808252601e908201527f696f2e73796e7468657469782e73706f742d6d61726b65742e5072696365000060608201526001600160801b0391909116602082015260800190565b60408051601f1981840301815291905280516020909101209392505050565b6000600182600681111561174e5761174e61226f565b14806108c0575060035b82600681111561176a5761176a61226f565b1492915050565b6000808212156117945760405163029f024d60e31b815260040160405180910390fd5b5090565b6000808260405160200161171991906040808252601c908201527f696f2e73796e7468657469782e73706f742d6d61726b65742e4665650000000060608201526001600160801b0391909116602082015260800190565b6000670de0b6b3a76400006118048385612408565b6116009190612435565b600060035b8260068111156118255761182561226f565b14806108c057506004611758565b6001600160a01b0382166000908152602084905260408120541561187057506001600160a01b038216600090815260208490526040902054611600565b8161187f578360010154611885565b83600201545b949350505050565b60006001600160ff1b038211156117945760405163677c430560e11b815260040160405180910390fd5b600085600701546000036118cd57506000611960565b60006118e96112608589600701546117ef90919063ffffffff16565b905060006119086118f98661188d565b611902896114e0565b90611969565b9050600061191687836123e0565b90506000600261192684846123e0565b6119309190612449565b905061193c8185611e6a565b945061194786611b80565b1561195b5761195885600019612376565b94505b505050505b95945050505050565b6000670de0b6b3a764000061197e8385612376565b6116009190612449565b6040805160208101829052602a60608201527f696f2e73796e7468657469782e636f72652d6d6f64756c65732e4173736f63696080820152696174656453797374656d60b01b60a0820152908101829052600090819060c001611719565b60006001600160a01b0384166119fe57506000611b34565b6001600160a01b03841660009081526009880160205260409020548551611a2590826117ef565b91508115611b3257611a3683611b80565b15611aba576002840154604051630a053e7f60e11b81526001600160a01b039091169063140a7cfe90611a71908a9089908790600401612186565b6020604051808303816000875af1158015611a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab491906121b0565b50611b32565b835460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b309190612224565b505b505b9695505050505050565b600081606001518260400151611b57846020015161188d565b8451611b629061188d565b611b6c91906123e0565b611b7691906123e0565b6108c091906123e0565b60006002611813565b60006005826006811115611b9f57611b9f61226f565b14806108c057506006611758565b60008460070154600003611bd557611bce82611bc885611e7f565b90611bf6565b9050611885565b6000611be0856114e0565b9050611b34611bf187868685611ea3565b611e7f565b600081611804670de0b6b3a764000085612408565b6000846003015460001480611c2257506004850154155b15611c2f57506000611885565b6000611cbd8660040154611c41610b3d565b6002015460405163150834a360e01b81526001600160801b03891660048201526001600160a01b039091169063150834a390602401602060405180830381865afa158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb791906121b0565b906117ef565b90506000611cca86610f14565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b91906121b0565b90506000611d3982866117ef565b90506000611d4787836123cd565b905080841115611d5e576000945050505050611885565b6000611d6a8386611bf6565b90506000670de0b6b3a76400008211611d84576000611d96565b611d96670de0b6b3a76400008361225c565b90506000611da48488611bf6565b90506000611dba670de0b6b3a76400008361225c565b905060006002611de0611dd6670de0b6b3a76400006064612408565b611cb785886123cd565b611dea9190612435565b9050611e038e60030154826117ef90919063ffffffff16565b9e9d5050505050505050505050505050565b60408051602080820183905260608201527f696f2e73796e7468657469782e73706f742d6d61726b65742e5772617070657260808201526001600160801b03831691810191909152600090819060a001611719565b60008161197e670de0b6b3a764000085612376565b600080821215611e9a57611e95610eff83612477565b6108c0565b6108c082611771565b600080611ebf611eb4856002612408565b600788015490611bf6565b90506000611ef7611ed3886007015461188d565b611ee6611edf8861188d565b8990611969565b611ef1906008612376565b90611e6a565b90506000611f29611f0b896007015461188d565b611f1e611f178961188d565b8890611969565b611ef1906002612376565b90506000611f55611f398861188d565b611f44906002612376565b611f4e90846123e0565b6002611faa565b90506000611f6b611f6683866123e0565b612001565b905086611f7b8b6007015461188d565b611f88836119028961188d565b611f9291906123a6565b611f9c91906123a6565b9a9950505050505050505050565b670de0b6b3a76400005b81156108c057611fc5600283612493565b600103611fea57611fd68184611969565b9050611fe360018361225c565b9150611fb4565b611ff48380611969565b9250611fe3600283612435565b60008060026120118460016123e0565b61201b9190612449565b90508291505b81811215612054579050806002816120398582611e6a565b61204391906123e0565b61204d9190612449565b9050612021565b50919050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b80356001600160801b038116811461209957600080fd5b919050565b600080600080608085870312156120b457600080fd5b6120bd85612082565b9350602085013592506040850135915060608501356001600160a01b03811681146120e757600080fd5b939692955090935050565b82815260a081016116006020830184805182526020810151602083015260408101516040830152606081015160608301525050565b60008060006060848603121561213c57600080fd5b61214584612082565b92506020840135915060408401356002811061216057600080fd5b809150509250925092565b60006020828403121561217d57600080fd5b61160082612082565b6001600160801b039390931683526001600160a01b03919091166020830152604082015260600190565b6000602082840312156121c257600080fd5b5051919050565b85815261010081016121ff6020830187805182526020810151602083015260408101516040830152606081015160608301525050565b60a08201949094526001600160a01b039290921660c083015260e09091015292915050565b60006020828403121561223657600080fd5b8151801515811461160057600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156108c0576108c0612246565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b838110156122cc578151875295820195908201906001016122b0565b509495945050505050565b8381526060602082015260006122f0606083018561229b565b8281036040840152611b34818561229b565b60006080828403121561231457600080fd5b6040516080810181811067ffffffffffffffff8211171561234557634e487b7160e01b600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b80820260008212600160ff1b8414161561239257612392612246565b81810583148215176108c0576108c0612246565b81810360008312801583831316838312821617156123c6576123c6612246565b5092915050565b808201808211156108c0576108c0612246565b808201828112600083128015821682158216171561240057612400612246565b505092915050565b80820281158282048414176108c0576108c0612246565b634e487b7160e01b600052601260045260246000fd5b6000826124445761244461241f565b500490565b6000826124585761245861241f565b600160ff1b82146000198414161561247257612472612246565b500590565b6000600160ff1b820161248c5761248c612246565b5060000390565b6000826124a2576124a261241f565b50069056fea26469706673582212205ce9aa28f6ac67c92bc242f91160a00ac45a7615d5b2bc2e9127915594998d0f64736f6c63430008160033";

type AtomicOrderModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AtomicOrderModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AtomicOrderModule__factory extends ContractFactory {
  constructor(...args: AtomicOrderModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<AtomicOrderModule> {
    return super.deploy(overrides || {}) as Promise<AtomicOrderModule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AtomicOrderModule {
    return super.attach(address) as AtomicOrderModule;
  }
  override connect(signer: Signer): AtomicOrderModule__factory {
    return super.connect(signer) as AtomicOrderModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AtomicOrderModuleInterface {
    return new utils.Interface(_abi) as AtomicOrderModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AtomicOrderModule {
    return new Contract(address, _abi, signerOrProvider) as AtomicOrderModule;
  }
}
