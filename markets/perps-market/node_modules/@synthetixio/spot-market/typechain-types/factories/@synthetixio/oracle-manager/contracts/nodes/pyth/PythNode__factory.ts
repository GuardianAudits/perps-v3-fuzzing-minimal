/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PythNode,
  PythNodeInterface,
} from "../../../../../../@synthetixio/oracle-manager/contracts/nodes/pyth/PythNode";

const _abi = [
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6087610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063aaf5eb68146038575b600080fd5b603f601281565b60405190815260200160405180910390f3fea264697066735822122030c571fd785956761a4de9d1d8fd27a61c186d2c9e68484c38187fc7cceef51264736f6c63430008160033";

type PythNodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PythNodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PythNode__factory extends ContractFactory {
  constructor(...args: PythNodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<PythNode> {
    return super.deploy(overrides || {}) as Promise<PythNode>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PythNode {
    return super.attach(address) as PythNode;
  }
  override connect(signer: Signer): PythNode__factory {
    return super.connect(signer) as PythNode__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PythNodeInterface {
    return new utils.Interface(_abi) as PythNodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PythNode {
    return new Contract(address, _abi, signerOrProvider) as PythNode;
  }
}
