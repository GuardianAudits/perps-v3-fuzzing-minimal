/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapNode,
  UniswapNodeInterface,
} from "../../../../../@synthetixio/oracle-manager/contracts/nodes/UniswapNode";

const _abi = [
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608b610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063aaf5eb68146038575b600080fd5b603f601281565b60405160ff909116815260200160405180910390f3fea2646970667358221220831c09af97001ec29e19b8c5255c70b0cb8acfaf5a71003c903897e76f0e381b64736f6c63430008160033";

type UniswapNodeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapNodeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapNode__factory extends ContractFactory {
  constructor(...args: UniswapNodeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<UniswapNode> {
    return super.deploy(overrides || {}) as Promise<UniswapNode>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapNode {
    return super.attach(address) as UniswapNode;
  }
  override connect(signer: Signer): UniswapNode__factory {
    return super.connect(signer) as UniswapNode__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapNodeInterface {
    return new utils.Interface(_abi) as UniswapNodeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapNode {
    return new Contract(address, _abi, signerOrProvider) as UniswapNode;
  }
}
