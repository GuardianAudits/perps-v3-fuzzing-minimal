/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IOracleManager,
  IOracleManagerInterface,
} from "../../../../../../@synthetixio/main/contracts/interfaces/external/IOracleManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum NodeDefinition.NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "parameters",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "parents",
            type: "bytes32[]",
          },
        ],
        internalType: "struct NodeDefinition.Data",
        name: "nodeType",
        type: "tuple",
      },
    ],
    name: "InvalidNodeDefinition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    name: "NodeNotRegistered",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "enum NodeDefinition.NodeType",
        name: "nodeType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "parameters",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "parents",
        type: "bytes32[]",
      },
    ],
    name: "NodeRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "enum NodeDefinition.NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "parameters",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "parents",
            type: "bytes32[]",
          },
        ],
        internalType: "struct NodeDefinition.Data",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum NodeDefinition.NodeType",
        name: "nodeType",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "parameters",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "parents",
        type: "bytes32[]",
      },
    ],
    name: "getNodeId",
    outputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    name: "process",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse2",
            type: "uint256",
          },
        ],
        internalType: "struct NodeOutput.Data",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
      {
        internalType: "bytes32[]",
        name: "runtimeKeys",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "runtimeValues",
        type: "bytes32[]",
      },
    ],
    name: "processWithRuntime",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "__slotAvailableForFutureUse2",
            type: "uint256",
          },
        ],
        internalType: "struct NodeOutput.Data",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum NodeDefinition.NodeType",
        name: "nodeType",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "parameters",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "parents",
        type: "bytes32[]",
      },
    ],
    name: "registerNode",
    outputs: [
      {
        internalType: "bytes32",
        name: "nodeId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IOracleManager__factory {
  static readonly abi = _abi;
  static createInterface(): IOracleManagerInterface {
    return new utils.Interface(_abi) as IOracleManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOracleManager {
    return new Contract(address, _abi, signerOrProvider) as IOracleManager;
  }
}
